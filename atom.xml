<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wjnba的博客</title>
  
  <subtitle>君子以坦荡立于世间，必将步步生花，一路繁华</subtitle>
  <link href="https://www.wjnba.top/atom.xml" rel="self"/>
  
  <link href="https://www.wjnba.top/"/>
  <updated>2024-04-03T04:56:33.780Z</updated>
  <id>https://www.wjnba.top/</id>
  
  <author>
    <name>wjnba</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS命名规范</title>
    <link href="https://www.wjnba.top/articles/202404033e401561b4c9.html"/>
    <id>https://www.wjnba.top/articles/202404033e401561b4c9.html</id>
    <published>2024-04-03T03:21:51.000Z</published>
    <updated>2024-04-03T04:56:33.780Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pic.wjnba.top/img/202404/20240403125232.png" alt=""></p><blockquote><p>js命名应遵循 <strong>简洁、语义化</strong> 的原则</p></blockquote><h2 id="一、变量"><a href="#一、变量" class="headerlink" title="一、变量"></a>一、变量</h2><p>命名方法: 小驼峰式命名法<br>命名规范：前缀为形容词 （函数前缀为动词, 以此来区分函数和变量）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//好的命名方式</span></span><br><span class="line"><span class="keyword">let</span> maxCount = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> tableTitle = <span class="string">&#x27;啦啦啦&#x27;</span>;</span><br><span class="line"><span class="comment">//不好的命名方式</span></span><br><span class="line"><span class="keyword">let</span> setConut = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> getTitle = <span class="string">&#x27;啦啦啦&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="临时变量"><a href="#临时变量" class="headerlink" title="临时变量"></a>临时变量</h3><p>1：作用域不大临时变量可以简写，比如：<code>str</code>，<code>num</code>，<code>bol</code>，<code>obj</code>，<code>fun</code>，<code>arr</code>。<br>2：循环变量可以简写，比如：<code>i</code>，<code>j</code>，<code>k</code>等。</p><ul><li><code>s</code>：表示字符串。例如：sName，sHtml；</li><li><code>n</code>：表示数字。例如：nPage，nTotal；</li><li><code>b</code>：表示逻辑。例如：bChecked，bHasLogin；</li><li><code>a</code>：表示数组。例如：aList，aGroup；</li><li><code>r</code>：表示正则表达式。例如：rDomain，rEmail；</li><li><code>f</code>：表示函数。例如：fGetHtml，fInit；</li><li><code>o</code>：表示以上未涉及到的其他对象，例如：oButton，oDate；</li><li><code>g</code>：表示全局变量，例如：gUserName，gLoginTime；</li></ul><h2 id="二、常量"><a href="#二、常量" class="headerlink" title="二、常量"></a>二、常量</h2><blockquote><p> 某些作为不允许修改值的变量认为是常量，常量可以存在于函数中，也可以存在于全局。</p></blockquote><p><strong>命名方法：</strong>名词全部大写<br><strong>命名规范：</strong>使用大写字母和下划线来组合命名，下划线用来分割单词。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MAX_COUNT = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> URL = <span class="string">&#x27;//www.huifenqi.com&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="三、函数-amp-方法"><a href="#三、函数-amp-方法" class="headerlink" title="三、函数 &amp; 方法"></a>三、函数 &amp; 方法</h2><p><strong>命名方法：</strong> 小驼峰式命名法<br><strong>命名规范：</strong> 前缀应该为动词<br><strong>命名建议：</strong>常用动词约定</p><ul><li><p>get 获取/<code>set</code> 设置/<code>add</code> 增加/<code>remove</code> 删除/<code>create</code> 创建/<code>destory</code> 移除</p></li><li><p><code>start</code> 启动/<code>stop</code> 停止/<code>open</code> 打开/<code>close</code> 关闭/<code>read</code> 读取/<code>write</code> 写入</p></li><li><p><code>load</code> 载入/<code>save</code> 保存/<code>create</code> 创建/<code>destroy</code> 销毁</p></li><li><p><code>begin</code> 开始/<code>end</code> 结束/<code>backup</code> 备份/<code>restore</code> 恢复/<code>detach</code> 脱离</p></li><li><p><code>import</code> 导入/<code>export</code> 导出/<code>split</code> 分割/<code>merge</code> 合并/<code>inject</code> 注入/<code>extract</code> 提取</p></li><li><p><code>attach</code> 附着/<code>bind</code> 绑定/<code>separate</code> 分离/ <code>view</code> 查看/<code>browse</code> 浏览</p></li><li><p><code>edit</code> 编辑/<code>modify</code> 修改/<code>select</code> 选取/<code>mark</code> 标记/<code>copy</code> 复制/<code>paste</code> 粘贴/<code>undo</code> 撤销</p></li><li><p><code>redo</code> 重做/<code>insert</code> 插入/<code>delete</code> 移除/<code>add</code> 加入/<code>append</code> 添加</p></li><li><p><code>clean</code> 清理/<code>clear</code> 清除/<code>index</code> 索引/<code>sort</code> 排序/<code>find</code> 查找/<code>search</code> 搜索/</p></li><li><p><code>increase</code> 增加/<code>decrease</code> 减少/<code>play</code> 播放/<code>pause</code> 暂停/</p></li><li><p><code>launch</code> 启动/<code>run</code> 运行/<code>pack</code> 打包/<code>unpack</code> 解包/<code>parse</code> 解析/<code>emit</code> 生成</p></li><li><p><code>compile</code> 编译/<code>execute</code> 执行/<code>debug</code> 调试/<code>trace</code> 跟踪</p></li><li><p><code>observe</code> 观察/<code>listen</code> 监听/<code>build</code> 构建/<code>publish</code> 发布/<code>push</code> 推/<code>pull</code> 拉</p></li><li><p><code>input</code> 输入/<code>output</code> 输出/<code>encode</code> 编码/<code>decode</code> 解码</p></li><li><p><code>expand</code> 展开/<code>collapse</code> 折叠/<code>encrypt</code> 加密/<code>decrypt</code> 解密</p></li><li><p><code>compress</code> 压缩/<code>decompress</code> 解压缩</p></li><li><p><code>connect</code> 连接/<code>disconnect</code> 断开/<code>send</code> 发送/<code>receive</code> 接收</p></li><li><p><code>download</code> 下载/<code>upload</code> 上传/<code>refresh</code> 刷新/<code>synchronize</code> 同步</p></li><li><p><code>update</code> 更新/<code>revert</code> 复原/<code>lock</code> 锁定/<code>unlock</code> 解锁</p></li><li><p><code>check out</code> 签出/<code>check in</code> 签入/<code>submit</code> 提交/<code>commit</code> 交付</p></li><li><p><code>begin</code> 起始/<code>end</code> 结束/<code>start</code> 开始/<code>finish</code> 完成/<code>enter</code> 进入/<code>exit</code> 退出</p></li><li><p><code>abort</code> 放弃/<code>quit</code> 离开/<code>obsolete</code> 废弃/<code>depreciate</code> 废旧</p></li><li><p><code>collect</code> 收集/<code>aggregate</code> 聚集</p></li><li><p><code>can</code> 判断是否可执行某个动作</p></li><li><p><code>has</code> 判断是否含义某个值</p></li><li><p><code>is</code> 判断是否为某个值</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 是否可阅读</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">canRead</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 获取名称</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="四、类-amp-构造函数"><a href="#四、类-amp-构造函数" class="headerlink" title="四、类 &amp; 构造函数"></a>四、类 &amp; 构造函数</h2><p><strong>命名方法：</strong>大写驼峰式命名法，首字母大写。<br><strong>命名规范：</strong>前缀为名称。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Persion</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">   ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> Person(<span class="string">&#x27;啦啦啦&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="五、类的成员"><a href="#五、类的成员" class="headerlink" title="五、类的成员"></a>五、类的成员</h2><p>类的成员包括：</p><p><strong>公共属性和方法：</strong> 跟变量和函数命名一样。<br><strong>私有属性和方法：</strong>前缀为下划线_, 后面跟公共属性和方法一样的命名方式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 私有属性 </span></span><br><span class="line">  <span class="attr">_name</span>: string;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 公共方法</span></span><br><span class="line">  <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 公共方法</span></span><br><span class="line">  <span class="function"><span class="title">setName</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>._name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://pic.wjnba.top/img/202404/20240403125232.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;js命名应遵循 &lt;strong&gt;简洁、语义化&lt;/strong&gt; 的原则&lt;/p&gt;
&lt;/bloc</summary>
      
    
    
    
    <category term="代码规范" scheme="https://www.wjnba.top/categories/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
    
    <category term="javascript" scheme="https://www.wjnba.top/tags/javascript/"/>
    
    <category term="代码规范" scheme="https://www.wjnba.top/tags/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>CSS媒体查询</title>
    <link href="https://www.wjnba.top/articles/20240402d6b5aa8c7fec.html"/>
    <id>https://www.wjnba.top/articles/20240402d6b5aa8c7fec.html</id>
    <published>2024-04-02T02:18:25.000Z</published>
    <updated>2024-04-03T05:05:44.045Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pic.wjnba.top/img/202404/20240403125837.png" alt=""></p><h2 id="媒体查询（Media-Queries）"><a href="#媒体查询（Media-Queries）" class="headerlink" title="媒体查询（Media Queries）"></a>媒体查询（Media Queries）</h2><blockquote><p><strong>媒体查询（Media Queries）</strong>是 CSS3 中的一个特性，它允许你根据设备的特性（如宽度、高度、颜色等）来应用不同的 CSS 样式。这使得开发者能够为不同的设备（如桌面电脑、平板电脑、手机等）或同一设备的不同状态（如横屏或竖屏）创建特定的布局和样式。</p></blockquote><p><strong>媒体查询由两部分组成</strong>：<strong>媒体类型（Media Type）</strong>和<strong>媒体特性（Media Features）</strong>。</p><p><strong>媒体类型</strong>：描述了设备的一般类别，如 all（所有设备）、screen（电脑屏幕、平板电脑、智能手机等）、print（打印机和打印预览）等。</p><p><strong>媒体特性</strong>：描述了设备的具体特性，如 width（视口宽度）、height（视口高度）、color（设备颜色位数）等。</p><p>媒体查询的基本语法如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">css</span><br><span class="line"><span class="keyword">@media</span> mediaType <span class="keyword">and</span> (mediaFeature1: value1) <span class="keyword">and</span> (mediaFeature2: value2) &#123;  </span><br><span class="line">    <span class="comment">/* CSS 规则 */</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如，如果你想为宽度小于 768px 的设备设置特定的样式，你可以这样写：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">css</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">767px</span>) &#123;  </span><br><span class="line">    <span class="selector-tag">body</span> &#123;  </span><br><span class="line">        <span class="attribute">background-color</span>: lightblue;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，媒体类型是 screen，媒体特性是 max-width: 767px。这意味着当屏幕宽度小于或等于 767px 时，body 的背景色将变为浅蓝色。</p><p>媒体查询是响应式设计的核心，它允许开发者创建一个灵活且适应各种设备的网站。</p><p><strong>媒体查询中的分辨率</strong>设置主要依赖于具体的设备特性，并没有固定的分辨率列表。但是，你可以根据常见的设备和屏幕尺寸来设置媒体查询。<br> 以下是一些常见的屏幕分辨率和对应的CSS媒体查询：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1024</span>x768 (常用于<span class="number">10.4</span>、<span class="number">12.1</span>、<span class="number">14.1</span>、<span class="number">15</span>寸电脑)：</span><br><span class="line"></span><br><span class="line">css</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">1024px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1279px</span>) &#123;  </span><br><span class="line">    <span class="comment">/* 样式 */</span>  </span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1280</span>x1024 (常用于<span class="number">14.1</span>、<span class="number">15</span>寸电脑)：</span><br><span class="line"></span><br><span class="line">css</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">1280px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1629px</span>) &#123;  </span><br><span class="line">    <span class="comment">/* 样式 */</span>  </span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1280</span>x800 (常用于<span class="number">15.4</span>寸电脑)：</span><br><span class="line"></span><br><span class="line">css</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">1280px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1599px</span>) &#123;  </span><br><span class="line">    <span class="comment">/* 样式 */</span>  </span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1366</span>x768 (常用于<span class="number">15.2</span>寸电脑)：</span><br><span class="line"></span><br><span class="line">css</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">1366px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1629px</span>) &#123;  </span><br><span class="line">    <span class="comment">/* 样式 */</span>  </span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1440</span>x900 (常用于<span class="number">15.6</span>、<span class="number">17</span>寸电脑)：</span><br><span class="line"></span><br><span class="line">css</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">1440px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1799px</span>) &#123;  </span><br><span class="line">    <span class="comment">/* 样式 */</span>  </span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1600</span>x900 (常用于<span class="number">15.4</span>、<span class="number">20</span>寸电脑)：</span><br><span class="line"></span><br><span class="line">css</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">1600px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1899px</span>) &#123;  </span><br><span class="line">    <span class="comment">/* 样式 */</span>  </span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1920</span>x1080 (常用于主流<span class="number">23</span>、<span class="number">24</span>、<span class="number">27</span>寸电脑)：</span><br><span class="line"></span><br><span class="line">css</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">1920px</span>) &#123;  </span><br><span class="line">    <span class="comment">/* 样式 */</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://pic.wjnba.top/img/202404/20240403125837.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;媒体查询（Media-Queries）&quot;&gt;&lt;a href=&quot;#媒体查询（Media-Queries）&quot; cl</summary>
      
    
    
    
    <category term="深入浅出css" scheme="https://www.wjnba.top/categories/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAcss/"/>
    
    
    <category term="css" scheme="https://www.wjnba.top/tags/css/"/>
    
    <category term="响应式布局" scheme="https://www.wjnba.top/tags/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>uniapp安卓手机无线真机调试</title>
    <link href="https://www.wjnba.top/articles/2023083076b3a1d0ac73.html"/>
    <id>https://www.wjnba.top/articles/2023083076b3a1d0ac73.html</id>
    <published>2023-08-30T02:12:00.000Z</published>
    <updated>2023-09-04T05:53:25.487Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pic.wjnba.top/img/202308301602929.png" alt="202308301432378"></p><p>从 <code>Android 11</code> 开始USB调试新增了无线调试功能，需要搭配 <code>adb 30.0.0</code> 及以上版本使用，请确认你的系统和<code>adb</code>是否符合要求。</p><h2 id="一、下载adb"><a href="#一、下载adb" class="headerlink" title="一、下载adb"></a>一、下载<code>adb</code></h2><p><code>adb</code>下载地址： <a href="https://developer.android.google.cn/studio/releases/platform-tools">SDK Platform Tools版本说明</a></p><p>选择对应的系统版本，我是windows系统，所以选择如下：</p><p><img src="https://pic.wjnba.top/img/202308301457052.png" alt="image-20230830145726373"></p><p>下载解压完之后放到<code>HBuilderX</code>的<code>adbs</code>文件夹里 重命名为<code>34.0.0</code> </p><p><img src="https://pic.wjnba.top/img/202308301503762.png" alt="image-20230830150354324"></p><h2 id="二、在手机上打开无线调试"><a href="#二、在手机上打开无线调试" class="headerlink" title="二、在手机上打开无线调试"></a>二、在手机上打开无线调试</h2><p>手机连上<code>wifi</code>，保证手机和电脑在同一局域网，进入开发者选项开启无线调试</p><p><img src="https://pic.wjnba.top/img/202308301513412.png" alt="image-20230830151126101" style="zoom:50%;" /></p><p><img src="https://pic.wjnba.top/img/202308301541876.png" alt="image-20230830151243039" style="zoom:50%;" /></p><h2 id="三、使用配对码配对"><a href="#三、使用配对码配对" class="headerlink" title="三、使用配对码配对"></a>三、使用配对码配对</h2><h3 id="1、手机上点击使用配对码配对设备，查看配对码和ip地址："><a href="#1、手机上点击使用配对码配对设备，查看配对码和ip地址：" class="headerlink" title="1、手机上点击使用配对码配对设备，查看配对码和ip地址："></a>1、手机上点击使用配对码配对设备，查看配对码和ip地址：</h3><p><img src="https://pic.wjnba.top/img/202308301540471.png" alt="image-20230830152317568" style="zoom:50%;" /></p><h3 id="2、进入34-0-0-文件夹，并打开cmd窗口："><a href="#2、进入34-0-0-文件夹，并打开cmd窗口：" class="headerlink" title="2、进入34.0.0 文件夹，并打开cmd窗口："></a>2、进入<code>34.0.0</code> 文件夹，并打开<code>cmd</code>窗口：</h3><ul><li><p>使用adb pair命令和手机配对</p><p><img src="https://pic.wjnba.top/img/202308301540608.png" alt="image-20230830153230621"></p></li></ul><ul><li><p>继续使用adb connect命令连接设备</p><p><img src="https://pic.wjnba.top/img/202308301540436.png" alt="image-20230830153742605"></p></li></ul><h2 id="四、验证"><a href="#四、验证" class="headerlink" title="四、验证"></a>四、验证</h2><p><img src="https://pic.wjnba.top/img/202308301540175.png" alt="image-20230830154040142"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://pic.wjnba.top/img/202308301602929.png&quot; alt=&quot;202308301432378&quot;&gt;&lt;/p&gt;
&lt;p&gt;从 &lt;code&gt;Android 11&lt;/code&gt; 开始USB调试新增了无线调试功能，需要搭配 &lt;c</summary>
      
    
    
    
    <category term="uniapp" scheme="https://www.wjnba.top/categories/uniapp/"/>
    
    
    <category term="uniapp" scheme="https://www.wjnba.top/tags/uniapp/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客butterfly主题cdn加载失败？那就换</title>
    <link href="https://www.wjnba.top/articles/202305238604b7796c2d.html"/>
    <id>https://www.wjnba.top/articles/202305238604b7796c2d.html</id>
    <published>2023-05-23T09:11:51.000Z</published>
    <updated>2023-09-04T08:06:56.598Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前段时间因为jsdelivr挂掉，无法访问第三方文件，导致我的博客长时间出现资源加载问题，后面更换了cdn，但有时候还是会无法加载，未从根本上解决问题。</p></blockquote><p><img src="https://pic.wjnba.top/img/202305231724882.png" alt="image-20230523172407947"></p><p>于是今天决定，把第三方文件放在本地加载，查看<a href="https://butterfly.js.org/posts/ceeb73f/?highlight=hexo+butterfly+extjs#CDN">butterfly</a>官网，看到了两种方案可供选择。</p><h2 id="1、修改third-party-provider"><a href="#1、修改third-party-provider" class="headerlink" title="1、修改third_party_provider"></a>1、修改third_party_provider</h2><p>①.找到<code>/butterfly/_comfig.yml</code>文件，找到下面部分，把标注的部分改为<code>local</code></p><p><img src="https://pic.wjnba.top/img/202305231736947.png" alt="image-20230523173623522"></p><p>②.安装<code>hexo-butterfly-extjs</code>依赖，执行</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-butterfly-extjs@1.3.4</span></span><br></pre></td></tr></table></figure><p>*注意：<code>hexo-butterfly-extjs</code>的版本要和<code>butterfly</code>对应，如果版本不对应的话，可能会导致这个主题需要的第三方依赖无法完全下载到<code>node_modules</code>，导致后面出错。当然也可以直接执行<code>npm i  依赖@版本号</code>，第三方依赖和版本号在<code>/butterfly/plugins.yml</code>。</p><p><img src="https://pic.wjnba.top/img/202305231749290.png" alt="image-20230523174943933"></p><h2 id="2、下载第三方文件到本地，修改option文件地址，覆盖原有的配置"><a href="#2、下载第三方文件到本地，修改option文件地址，覆盖原有的配置" class="headerlink" title="2、下载第三方文件到本地，修改option文件地址，覆盖原有的配置"></a>2、下载第三方文件到本地，修改option文件地址，覆盖原有的配置</h2><p><img src="https://pic.wjnba.top/img/202305231743345.png" alt="image-20230523174345684"></p><div class="table-container"><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>internal_provider</td><td>主题内部文件可选<br /> local/jsdelivr/unpkg/cdnjs/custom<br/>lcoal 为本地加载，custom 为自定义格式，需配置 custom_format<br/>注意: 如果使用的是 Dev 版，只能设置为 local</td></tr><tr><td>third_party_provider</td><td>第三方文件<br/>可选 local/jsdelivr/unpkg/cdnjs/custom<br/>lcoal 为本地加载，custom 为自定义格式，需配置 custom_format<br/>注意: 如果你选择 local 需要安装 hexo-butterfly-extjs插件</td></tr><tr><td>version</td><td>true/false 为 cdn 加上指定版本号</td></tr><tr><td>custom_format</td><td>自定义格式</td></tr><tr><td>option</td><td>你可以在这里更换部分文件,会覆盖原有的配置</td></tr></tbody></table></div>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;前段时间因为jsdelivr挂掉，无法访问第三方文件，导致我的博客长时间出现资源加载问题，后面更换了cdn，但有时候还是会无法加载，未从根本上解决问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.wjnb</summary>
      
    
    
    
    <category term="Hexo+Gitee" scheme="https://www.wjnba.top/categories/Hexo-Gitee/"/>
    
    
    <category term="个人博客" scheme="https://www.wjnba.top/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="Hexo" scheme="https://www.wjnba.top/tags/Hexo/"/>
    
    <category term="butterfly" scheme="https://www.wjnba.top/tags/butterfly/"/>
    
  </entry>
  
  <entry>
    <title>实现五种CSS经典布局</title>
    <link href="https://www.wjnba.top/articles/20230523844402ea9656.html"/>
    <id>https://www.wjnba.top/articles/20230523844402ea9656.html</id>
    <published>2023-05-23T03:30:32.000Z</published>
    <updated>2023-09-04T05:53:25.488Z</updated>
    
    <content type="html"><![CDATA[<p>页面布局是样式开发的第一步，也是 CSS 最重要的功能之一。</p><p><img src="https://pic.wjnba.top/img/202305231513264.jpg" alt="img"></p><p>常用的页面布局，其实就那么几个。下面我会介绍5个经典布局，只要掌握了它们，就能应对绝大多数常规页面。</p><h2 id="一、空间居中布局"><a href="#一、空间居中布局" class="headerlink" title="一、空间居中布局"></a>一、空间居中布局</h2><p>空间居中布局指的是，不管容器的大小，项目总是占据中心点。</p><p><img src="https://pic.wjnba.top/img/202305231515153.jpg" alt="img"></p><p>CSS 代码如下。</p><blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    place-items: center;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></blockquote><p>上面代码需要写在容器上，指定为 Grid 布局。核心代码是<code>place-items</code>属性那一行，它是一个简写形式。</p><blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">place-items: &lt;align-items&gt; &lt;justify-items&gt;;</span><br></pre></td></tr></table></figure></blockquote><p><code>align-items</code>属性控制垂直位置，<code>justify-items</code>属性控制水平位置。这两个属性的值一致时，就可以合并写成一个值。所以，<code>place-items: center;</code>等同于<code>place-items: center center;</code>。</p><p>同理，左上角布局可以写成下面这样。</p><blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">place-items: start;</span><br></pre></td></tr></table></figure></blockquote><p><img src="https://pic.wjnba.top/img/202305231513286.jpg" alt="img"></p><p>右下角布局。</p><blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">place-items: end;</span><br></pre></td></tr></table></figure></blockquote><p><img src="https://pic.wjnba.top/img/202305231513339.jpg" alt="img"></p><h2 id="二、并列式布局"><a href="#二、并列式布局" class="headerlink" title="二、并列式布局"></a>二、并列式布局</h2><p>并列式布局就是多个项目并列。</p><p><img src="https://pic.wjnba.top/img/202305231513737.jpg" alt="img"></p><p>如果宽度不够，放不下的项目就自动折行。</p><p><img src="https://pic.wjnba.top/img/202305231513563.jpg" alt="img"></p><p><img src="https://pic.wjnba.top/img/202305231515110.jpg" alt="img"></p><p>它的实现也很简单。首先，容器设置成 Flex 布局，内容居中（<code>justify-content</code>）可换行（<code>flex-wrap</code>）。</p><blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>然后，项目上面只用一行<code>flex</code>属性就够了。</p><blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">   <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">1</span> <span class="number">150px</span>;</span><br><span class="line">   <span class="attribute">margin</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p><code>flex</code>属性是<code>flex-grow</code>、<code>flex-shrink</code>、<code>flex-basis</code>这三个属性的简写形式。</p><blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flex</span>: &lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;;</span><br></pre></td></tr></table></figure></blockquote><ul><li><code>flex-basis</code>：项目的初始宽度。</li><li><code>flex-grow</code>：指定如果有多余宽度，项目是否可以扩大。</li><li><code>flex-shrink</code>：指定如果宽度不足，项目是否可以缩小。</li></ul><p><code>flex: 0 1 150px;</code>的意思就是，项目的初始宽度是150px，且不可以扩大，但是当容器宽度不足150px时，项目可以缩小。</p><p>如果写成<code>flex: 1 1 150px;</code>，就表示项目始终会占满所有宽度。</p><p><img src="https://pic.wjnba.top/img/202305231513042.jpg" alt="img"></p><p><img src="https://pic.wjnba.top/img/202305231515740.jpg" alt="img"></p><p><img src="https://pic.wjnba.top/img/202305231513940.jpg" alt="img"></p><h2 id="三、两栏式布局"><a href="#三、两栏式布局" class="headerlink" title="三、两栏式布局"></a>三、两栏式布局</h2><p>两栏式布局就是一个边栏，一个主栏。</p><p><img src="https://pic.wjnba.top/img/202305231513525.jpg" alt="img"></p><p>下面的实现是，边栏始终存在，主栏根据设备宽度，变宽或者变窄。如果希望主栏自动换到下一行，可以参考上面的”并列式布局”。</p><p><img src="https://pic.wjnba.top/img/202305231514216.jpg" alt="img"></p><p>使用 Grid，实现很容易。</p><blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid-template-<span class="attribute">columns</span>: <span class="built_in">minmax</span>(<span class="number">150px</span>, <span class="number">25%</span>) <span class="number">1</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>上面代码中，<code>grid-template-columns</code>指定页面分成两列。第一列的宽度是<code>minmax(150px, 25%)</code>，即最小宽度为<code>150px</code>，最大宽度为总宽度的25%；第二列为<code>1fr</code>，即所有剩余宽度。</p><h2 id="四、三明治布局"><a href="#四、三明治布局" class="headerlink" title="四、三明治布局"></a>四、三明治布局</h2><p>三明治布局指的是，页面在垂直方向上，分成三部分：页眉、内容区、页脚。</p><p><img src="https://pic.wjnba.top/img/202305231514618.jpg" alt="img"></p><p>这个布局会根据设备宽度，自动适应，并且不管内容区有多少内容，页脚始终在容器底部（粘性页脚）。也就是说，这个布局总是会占满整个页面高度。</p><p><img src="https://pic.wjnba.top/img/202305231514404.jpg" alt="img"></p><p>CSS 代码如下。</p><blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid-template-rows: auto <span class="number">1</span>fr auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>上面代码写在容器上面，指定采用 Grid 布局。核心代码是<code>grid-template-rows</code>那一行，指定垂直高度怎么划分，这里是从上到下分成三部分。第一部分（页眉）和第三部分（页脚）的高度都为<code>auto</code>，即本来的内容高度；第二部分（内容区）的高度为<code>1fr</code>，即剩余的所有高度，这可以保证页脚始终在容器的底部。</p><h2 id="五、圣杯布局"><a href="#五、圣杯布局" class="headerlink" title="五、圣杯布局"></a>五、圣杯布局</h2><p>圣杯布局是最常用的布局，所以被比喻为圣杯。它将页面分成五个部分，除了页眉和页脚，内容区分成左边栏、主栏、右边栏。</p><p><img src="https://pic.wjnba.top/img/202305231514073.jpg" alt="img"></p><p>这里的实现是，不管页面宽度，内容区始终分成三栏。如果宽度太窄，主栏和右边栏会看不到。如果想将这三栏改成小屏幕自动堆叠，可以参考并列式布局。</p><p><img src="https://pic.wjnba.top/img/202305231514857.jpg" alt="img"></p><p>HTML 代码如下。</p><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">main</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><p>CSS 代码如下。</p><blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid-template: auto <span class="number">1</span>fr auto / auto <span class="number">1</span>fr auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>上面代码要写在容器上面，指定采用 Grid 布局。核心代码是<code>grid-template</code>属性那一行，它是两个属性<code>grid-template-rows</code>（垂直方向）和<code>grid-template-columns</code>（水平方向）的简写形式。</p><blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grid-template: &lt;grid-template-rows&gt; / &lt;grid-template-columns&gt;</span><br></pre></td></tr></table></figure></blockquote><p><code>grid-template-rows</code>和<code>grid-template-columns</code>都是<code>auto 1fr auto</code>，就表示页面在垂直方向和水平方向上，都分成三个部分。第一部分（页眉和左边栏）和第三部分（页脚和右边栏）都是本来的内容高度（或宽度），第二部分（内容区和主栏）占满剩余的高度（或宽度）。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;页面布局是样式开发的第一步，也是 CSS 最重要的功能之一。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.wjnba.top/img/202305231513264.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;常用的页面布局，其实就那么几个。下面我会介绍5个</summary>
      
    
    
    
    <category term="深入浅出 css" scheme="https://www.wjnba.top/categories/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA-css/"/>
    
    
    <category term="css" scheme="https://www.wjnba.top/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>谷歌浏览器书签同步到码云</title>
    <link href="https://www.wjnba.top/articles/2022120111ffaf80a31b.html"/>
    <id>https://www.wjnba.top/articles/2022120111ffaf80a31b.html</id>
    <published>2022-12-01T06:29:30.000Z</published>
    <updated>2023-11-08T07:07:43.425Z</updated>
    
    <content type="html"><![CDATA[<p>在我们更换电脑、或者重新安装谷歌浏览器的情况下，如果书签没有备份，原来收藏的网页就找不到了，我们需要一种手段来保存、同步书签，这时我们可以通过浏览器扩展程序配合码云来实现这个功能。</p><span id="more"></span><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h4 id="一、在码云上创建一个仓库，用来保存书签。"><a href="#一、在码云上创建一个仓库，用来保存书签。" class="headerlink" title="一、在码云上创建一个仓库，用来保存书签。"></a>一、在<a href="https://gitee.com/">码云</a>上创建一个仓库，用来保存书签。</h4><p><img src="https://pic.wjnba.top/img/202212011446255.png" alt=""></p><h4 id="二、在仓库里新建一个名为bookmarks-html的空文件。"><a href="#二、在仓库里新建一个名为bookmarks-html的空文件。" class="headerlink" title="二、在仓库里新建一个名为bookmarks.html的空文件。"></a>二、在仓库里新建一个名为<code>bookmarks.html</code>的空文件。</h4><blockquote><p>必须要创建<code>bookmarks.html</code>文件，不然推送到仓库的时候会失败。</p></blockquote><p><img src="https://pic.wjnba.top/img/202212011448166.png" alt="image-20221201144854987"></p><h4 id="三、创建私人令牌，用来推送书签文件到仓库。"><a href="#三、创建私人令牌，用来推送书签文件到仓库。" class="headerlink" title="三、创建私人令牌，用来推送书签文件到仓库。"></a>三、创建私人令牌，用来推送书签文件到仓库。</h4><p><img src="https://pic.wjnba.top/img/202212011457379.png" alt="image-20221201145712863"></p><h4 id="四、下载使用扩展程序。"><a href="#四、下载使用扩展程序。" class="headerlink" title="四、下载使用扩展程序。"></a>四、下载使用扩展程序。</h4><div class="btns rounded grid5">            <a class="button" href='https://pic.wjnba.top/file/%E8%B0%B7%E6%AD%8C%E5%90%8C%E6%AD%A5%E4%B9%A6%E7%AD%BE.zip' title='下载扩展程序'><i class='fas fa-download'></i>下载扩展程序</a>          </div><p>下载扩展程序后解压，导入到谷歌浏览器扩展程序里。</p><p><img src="https://pic.wjnba.top/img/202212011506216.png" alt="image-20221201150556766"></p><p>点击程序，向下依次填入私人令牌、用户名、仓库名、文件路径（<code>bookmarks.html</code>）、分支（<code>master</code>）,如下图所示：</p><p><img src="https://pic.wjnba.top/img/202212011509374.png" alt="image-20221201150923847"></p><p>填完后，我们就可以通过点击Upload按钮把书签同步到码云上，当更换电脑、重新安装浏览器后可通过点击Download按钮同步书签到本地了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在我们更换电脑、或者重新安装谷歌浏览器的情况下，如果书签没有备份，原来收藏的网页就找不到了，我们需要一种手段来保存、同步书签，这时我们可以通过浏览器扩展程序配合码云来实现这个功能。&lt;/p&gt;</summary>
    
    
    
    <category term="浏览器" scheme="https://www.wjnba.top/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
    <category term="谷歌浏览器" scheme="https://www.wjnba.top/tags/%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>patch-package的使用</title>
    <link href="https://www.wjnba.top/articles/202210170ca19cae2d60.html"/>
    <id>https://www.wjnba.top/articles/202210170ca19cae2d60.html</id>
    <published>2022-10-17T09:10:03.000Z</published>
    <updated>2023-09-04T05:53:25.487Z</updated>
    
    <content type="html"><![CDATA[<h2 id="patch-package的使用"><a href="#patch-package的使用" class="headerlink" title="patch-package的使用"></a>patch-package的使用</h2><p>在<code>vue</code>实际项目中,有时候会涉及到修改<code>node_modules</code>里面的代码，但是如果直接在本地修改<code>node_modules</code>里面的代码，会带来很大的麻烦，比如更换电脑拉取项目后，执行<code>npm install</code>安装项目依赖，会恢复到没改之前的代码，这时我们可以使用<code>patch-package</code>这个库来解决这类问题。</p><span id="more"></span><h4 id="1、安装patch-package"><a href="#1、安装patch-package" class="headerlink" title="1、安装patch-package"></a>1、安装<code>patch-package</code></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i patch-package --save-dev</span><br></pre></td></tr></table></figure><h4 id="2、修改完依赖后，运行patch-package创建patch文件"><a href="#2、修改完依赖后，运行patch-package创建patch文件" class="headerlink" title="2、修改完依赖后，运行patch-package创建patch文件"></a>2、修改完依赖后，运行<code>patch-package</code>创建<code>patch</code>文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npx patch-package 依赖名称</span><br><span class="line">例子： npx patch-package wangeditor</span><br></pre></td></tr></table></figure><p><img src="https://pic.wjnba.top/img/202210171736007.png" alt="image-20221017173642445"></p><h4 id="3、修改package-json的内容，在scripts中加入-quot-postinstall-quot-quot-patch-package-quot-，这个是为了npm-install的时候自动为依赖包打上我们改过的依赖"><a href="#3、修改package-json的内容，在scripts中加入-quot-postinstall-quot-quot-patch-package-quot-，这个是为了npm-install的时候自动为依赖包打上我们改过的依赖" class="headerlink" title="3、修改package.json的内容，在scripts中加入&quot;postinstall&quot;: &quot;patch-package&quot;，这个是为了npm install的时候自动为依赖包打上我们改过的依赖"></a>3、修改<code>package.json</code>的内容，在<code>scripts</code>中加入<code>&quot;postinstall&quot;: &quot;patch-package&quot;</code>，这个是为了<code>npm install</code>的时候自动为依赖包打上我们改过的依赖</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">　　...</span><br><span class="line">　　<span class="attr">&quot;postinstall&quot;</span>: <span class="string">&quot;patch-package&quot;</span></span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>npm install</code>命令发起后，根据工程定义决定是否执行<code>preinstall</code>，<code>install</code>、<code>postinstall</code> 是 <code>npm install</code>命令必然会执行的阶段</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;patch-package的使用&quot;&gt;&lt;a href=&quot;#patch-package的使用&quot; class=&quot;headerlink&quot; title=&quot;patch-package的使用&quot;&gt;&lt;/a&gt;patch-package的使用&lt;/h2&gt;&lt;p&gt;在&lt;code&gt;vue&lt;/code&gt;实际项目中,有时候会涉及到修改&lt;code&gt;node_modules&lt;/code&gt;里面的代码，但是如果直接在本地修改&lt;code&gt;node_modules&lt;/code&gt;里面的代码，会带来很大的麻烦，比如更换电脑拉取项目后，执行&lt;code&gt;npm install&lt;/code&gt;安装项目依赖，会恢复到没改之前的代码，这时我们可以使用&lt;code&gt;patch-package&lt;/code&gt;这个库来解决这类问题。&lt;/p&gt;</summary>
    
    
    
    <category term="vue 插件" scheme="https://www.wjnba.top/categories/vue-%E6%8F%92%E4%BB%B6/"/>
    
    
    <category term="vue" scheme="https://www.wjnba.top/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Butterfly之主题页面</title>
    <link href="https://www.wjnba.top/articles/202209231b74b40eef30.html"/>
    <id>https://www.wjnba.top/articles/202209231b74b40eef30.html</id>
    <published>2022-09-23T07:54:07.000Z</published>
    <updated>2023-09-04T05:53:25.483Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h2><p><code>Front-matter</code> 是 <code>markdown</code> 文件最上方以 <strong>—-</strong> 分隔的区域，用于指定个别档案的变数。</p><p><code>Page Front-matter</code> 用于<strong>页面</strong>配置<br><code>Post Front-matter</code> 用于<strong>文章页</strong>配置</p><span id="more"></span><blockquote><p>如果标注可选的参数，可根据自己需要添加，不用全部都写在markdown里</p></blockquote><h3 id="Page-Front-matter"><a href="#Page-Front-matter" class="headerlink" title="Page Front-matter"></a>Page Front-matter</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line"><span class="built_in">type</span>:</span><br><span class="line">comments:</span><br><span class="line">description:</span><br><span class="line">keywords:</span><br><span class="line">top_img:</span><br><span class="line">mathjax:</span><br><span class="line">katex:</span><br><span class="line">aside:</span><br><span class="line">aplayer:</span><br><span class="line">highlight_shrink:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>写法</th><th>解释</th></tr></thead><tbody><tr><td>title</td><td>【必需】页面标题</td></tr><tr><td>date</td><td>【必需】页面创建日期</td></tr><tr><td>type</td><td>【必需】标籤、分类和友情链接三个页面需要配置</td></tr><tr><td>updated</td><td>【可选】页面更新日期</td></tr><tr><td>description</td><td>【可选】页面描述</td></tr><tr><td>keywords</td><td>【可选】页面关键字</td></tr><tr><td>comments</td><td>【可选】显示页面评论模块(默认 true)</td></tr><tr><td>top_img</td><td>【可选】页面顶部图片</td></tr><tr><td>mathjax</td><td>【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置)</td></tr></tbody></table></div><h3 id="Post-Front-matter"><a href="#Post-Front-matter" class="headerlink" title="Post Front-matter"></a>Post Front-matter</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">keywords:</span><br><span class="line">description:</span><br><span class="line">top_img:</span><br><span class="line">comments:</span><br><span class="line">cover:</span><br><span class="line">toc:</span><br><span class="line">toc_number:</span><br><span class="line">toc_style_simple:</span><br><span class="line">copyright:</span><br><span class="line">copyright_author:</span><br><span class="line">copyright_author_href:</span><br><span class="line">copyright_url:</span><br><span class="line">copyright_info:</span><br><span class="line">mathjax:</span><br><span class="line">katex:</span><br><span class="line">aplayer:</span><br><span class="line">highlight_shrink:</span><br><span class="line">aside:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>写法</th><th>解释</th></tr></thead><tbody><tr><td>title</td><td>【必需】文章标题</td></tr><tr><td>date</td><td>【必需】文章创建日期</td></tr><tr><td>updated</td><td>【可选】文章更新日期</td></tr><tr><td>tags</td><td>【可选】文章标籤</td></tr><tr><td>categories</td><td>【可选】文章分类</td></tr><tr><td>keywords</td><td>【可选】文章关键字</td></tr><tr><td>description</td><td>【可选】文章描述</td></tr><tr><td>top_img</td><td>【可选】文章顶部图片</td></tr><tr><td>cover</td><td>【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false/图片地址/留空)</td></tr><tr><td>comments</td><td>【可选】显示文章评论模块(默认 true)</td></tr><tr><td>toc</td><td>【可选】显示文章TOC(默认为设置中toc的enable配置)</td></tr><tr><td>toc_number</td><td>【可选】显示toc_number(默认为设置中toc的number配置)</td></tr><tr><td>toc_style_simple</td><td>【可选】显示 toc 简洁模式</td></tr><tr><td>copyright</td><td>【可选】显示文章版权模块(默认为设置中post_copyright的enable配置)</td></tr><tr><td>copyright_author</td><td>【可选】文章版权模块的文章作者</td></tr><tr><td>copyright_author_href</td><td>【可选】文章版权模块的文章作者链接</td></tr><tr><td>copyright_url</td><td>【可选】文章版权模块的文章连结链接</td></tr><tr><td>copyright_info</td><td>【【可选】文章版权模块的版权声明文字</td></tr><tr><td>mathjax</td><td>【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr></tbody></table></div>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Front-matter&quot;&gt;&lt;a href=&quot;#Front-matter&quot; class=&quot;headerlink&quot; title=&quot;Front-matter&quot;&gt;&lt;/a&gt;Front-matter&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Front-matter&lt;/code&gt; 是 &lt;code&gt;markdown&lt;/code&gt; 文件最上方以 &lt;strong&gt;—-&lt;/strong&gt; 分隔的区域，用于指定个别档案的变数。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Page Front-matter&lt;/code&gt; 用于&lt;strong&gt;页面&lt;/strong&gt;配置&lt;br&gt;&lt;code&gt;Post Front-matter&lt;/code&gt; 用于&lt;strong&gt;文章页&lt;/strong&gt;配置&lt;/p&gt;</summary>
    
    
    
    <category term="Hexo+Gitee" scheme="https://www.wjnba.top/categories/Hexo-Gitee/"/>
    
    
    <category term="个人博客" scheme="https://www.wjnba.top/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="Hexo" scheme="https://www.wjnba.top/tags/Hexo/"/>
    
    <category term="Gitee Pages" scheme="https://www.wjnba.top/tags/Gitee-Pages/"/>
    
  </entry>
  
  <entry>
    <title>键盘按键键码值（keyCode）对照表</title>
    <link href="https://www.wjnba.top/articles/20220829cc1271ddc11d.html"/>
    <id>https://www.wjnba.top/articles/20220829cc1271ddc11d.html</id>
    <published>2022-08-29T07:42:40.000Z</published>
    <updated>2023-09-04T05:53:25.489Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>键盘事件包含onkeypress onkeydown和onkeyup事件，其中onkeypress事件是在键盘上的某个键被按下并且释放时触发此事件的处理程序，一般用于 键盘上的单键操作。onkeydown事件是在键盘上的某个键被按下时触发此事件的处理程序，一般用于快捷键的操作。onkeyup事件是在键盘上的某个键被按下后松开时触发此事件的处理程序，一般用于快捷键的操作。</p></blockquote><span id="more"></span><h2 id="字母和数字键的键码值-keyCode"><a href="#字母和数字键的键码值-keyCode" class="headerlink" title="字母和数字键的键码值(keyCode)"></a>字母和数字键的键码值(keyCode)</h2><div class="table-container"><table><thead><tr><th style="text-align:center">按键</th><th style="text-align:center">键码</th><th style="text-align:center">按键</th><th style="text-align:center">键码</th><th style="text-align:center">按键</th><th style="text-align:center">键码</th><th style="text-align:center">按键</th><th style="text-align:center">键码</th></tr></thead><tbody><tr><td style="text-align:center">A</td><td style="text-align:center">65</td><td style="text-align:center">J</td><td style="text-align:center">74</td><td style="text-align:center">S</td><td style="text-align:center">83</td><td style="text-align:center">1</td><td style="text-align:center">49</td></tr><tr><td style="text-align:center">B</td><td style="text-align:center">66</td><td style="text-align:center">K</td><td style="text-align:center">75</td><td style="text-align:center">T</td><td style="text-align:center">84</td><td style="text-align:center">2</td><td style="text-align:center">50</td></tr><tr><td style="text-align:center">C</td><td style="text-align:center">67</td><td style="text-align:center">L</td><td style="text-align:center">76</td><td style="text-align:center">U</td><td style="text-align:center">85</td><td style="text-align:center">3</td><td style="text-align:center">51</td></tr><tr><td style="text-align:center">D</td><td style="text-align:center">68</td><td style="text-align:center">M</td><td style="text-align:center">77</td><td style="text-align:center">V</td><td style="text-align:center">86</td><td style="text-align:center">4</td><td style="text-align:center">52</td></tr><tr><td style="text-align:center">E</td><td style="text-align:center">69</td><td style="text-align:center">N</td><td style="text-align:center">78</td><td style="text-align:center">W</td><td style="text-align:center">87</td><td style="text-align:center">5</td><td style="text-align:center">53</td></tr><tr><td style="text-align:center">F</td><td style="text-align:center">70</td><td style="text-align:center">O</td><td style="text-align:center">79</td><td style="text-align:center">X</td><td style="text-align:center">88</td><td style="text-align:center">6</td><td style="text-align:center">54</td></tr><tr><td style="text-align:center">G</td><td style="text-align:center">71</td><td style="text-align:center">P</td><td style="text-align:center">80</td><td style="text-align:center">Y</td><td style="text-align:center">89</td><td style="text-align:center">7</td><td style="text-align:center">55</td></tr><tr><td style="text-align:center">H</td><td style="text-align:center">72</td><td style="text-align:center">Q</td><td style="text-align:center">81</td><td style="text-align:center">Z</td><td style="text-align:center">90</td><td style="text-align:center">8</td><td style="text-align:center">56</td></tr><tr><td style="text-align:center">I</td><td style="text-align:center">73</td><td style="text-align:center">R</td><td style="text-align:center">82</td><td style="text-align:center">0</td><td style="text-align:center">48</td><td style="text-align:center">9</td><td style="text-align:center">57</td></tr></tbody></table></div><h2 id="数字键盘上的键的键码值-keyCode"><a href="#数字键盘上的键的键码值-keyCode" class="headerlink" title="数字键盘上的键的键码值(keyCode)"></a>数字键盘上的键的键码值(keyCode)</h2><div class="table-container"><table><thead><tr><th style="text-align:center">按键</th><th style="text-align:center">键码</th><th style="text-align:center">按键</th><th style="text-align:center">键码</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">96</td><td style="text-align:center">8</td><td style="text-align:center">104</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">97</td><td style="text-align:center">9</td><td style="text-align:center">105</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">98</td><td style="text-align:center">*</td><td style="text-align:center">106</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">99</td><td style="text-align:center">+</td><td style="text-align:center">107</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">100</td><td style="text-align:center">Enter</td><td style="text-align:center">108</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">101</td><td style="text-align:center">–</td><td style="text-align:center">109</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">102</td><td style="text-align:center">.</td><td style="text-align:center">110</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">103</td><td style="text-align:center">/</td><td style="text-align:center">111</td></tr></tbody></table></div><h2 id="功能键键码值-keyCode"><a href="#功能键键码值-keyCode" class="headerlink" title="功能键键码值(keyCode)"></a>功能键键码值(keyCode)</h2><div class="table-container"><table><thead><tr><th style="text-align:center">按键</th><th style="text-align:center">键码</th><th style="text-align:center">按键</th><th style="text-align:center">键码</th></tr></thead><tbody><tr><td style="text-align:center">F1</td><td style="text-align:center">112</td><td style="text-align:center">F7</td><td style="text-align:center">118</td></tr><tr><td style="text-align:center">F2</td><td style="text-align:center">113</td><td style="text-align:center">F8</td><td style="text-align:center">119</td></tr><tr><td style="text-align:center">F3</td><td style="text-align:center">114</td><td style="text-align:center">F9</td><td style="text-align:center">120</td></tr><tr><td style="text-align:center">F4</td><td style="text-align:center">115</td><td style="text-align:center">F10</td><td style="text-align:center">121</td></tr><tr><td style="text-align:center">F5</td><td style="text-align:center">116</td><td style="text-align:center">F11</td><td style="text-align:center">122</td></tr><tr><td style="text-align:center">F6</td><td style="text-align:center">117</td><td style="text-align:center">F12</td><td style="text-align:center">123</td></tr></tbody></table></div><h2 id="控制键键码值-keyCode"><a href="#控制键键码值-keyCode" class="headerlink" title="控制键键码值(keyCode)"></a>控制键键码值(keyCode)</h2><div class="table-container"><table><thead><tr><th style="text-align:center">按键</th><th style="text-align:center">键码</th><th style="text-align:center">按键</th><th style="text-align:center">键码</th><th style="text-align:center">按键</th><th style="text-align:center">键码</th><th style="text-align:center">按键</th><th style="text-align:center">键码</th></tr></thead><tbody><tr><td style="text-align:center">BackSpace</td><td style="text-align:center">8</td><td style="text-align:center">Esc</td><td style="text-align:center">27</td><td style="text-align:center">Right Arrow</td><td style="text-align:center">39</td><td style="text-align:center">-_</td><td style="text-align:center">189</td></tr><tr><td style="text-align:center">Tab</td><td style="text-align:center">9</td><td style="text-align:center">Spacebar</td><td style="text-align:center">32</td><td style="text-align:center">Dw Arrow</td><td style="text-align:center">40</td><td style="text-align:center">.&gt;</td><td style="text-align:center">190</td></tr><tr><td style="text-align:center">Clear</td><td style="text-align:center">12</td><td style="text-align:center">Page Up</td><td style="text-align:center">33</td><td style="text-align:center">Insert</td><td style="text-align:center">45</td><td style="text-align:center">/?</td><td style="text-align:center">191</td></tr><tr><td style="text-align:center">Enter</td><td style="text-align:center">13</td><td style="text-align:center">Page Down</td><td style="text-align:center">34</td><td style="text-align:center">Delete</td><td style="text-align:center">46</td><td style="text-align:center">`~</td><td style="text-align:center">192</td></tr><tr><td style="text-align:center">Shift</td><td style="text-align:center">16</td><td style="text-align:center">End</td><td style="text-align:center">35</td><td style="text-align:center">Num Lock</td><td style="text-align:center">144</td><td style="text-align:center">[{</td><td style="text-align:center">219</td></tr><tr><td style="text-align:center">Control</td><td style="text-align:center">17</td><td style="text-align:center">Home</td><td style="text-align:center">36</td><td style="text-align:center">;:</td><td style="text-align:center">186</td><td style="text-align:center"></td><td style="text-align:center">220</td></tr><tr><td style="text-align:center">Alt</td><td style="text-align:center">18</td><td style="text-align:center">Left Arrow</td><td style="text-align:center">37</td><td style="text-align:center">=+</td><td style="text-align:center">187</td><td style="text-align:center">]}</td><td style="text-align:center">221</td></tr><tr><td style="text-align:center">Cape Lock</td><td style="text-align:center">20</td><td style="text-align:center">Up Arrow</td><td style="text-align:center">38</td><td style="text-align:center">,&lt;</td><td style="text-align:center">188</td><td style="text-align:center">‘“</td><td style="text-align:center">222</td></tr></tbody></table></div>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;键盘事件包含onkeypress onkeydown和onkeyup事件，其中onkeypress事件是在键盘上的某个键被按下并且释放时触发此事件的处理程序，一般用于 键盘上的单键操作。onkeydown事件是在键盘上的某个键被按下时触发此事件的处理程序，一般用于快捷键的操作。onkeyup事件是在键盘上的某个键被按下后松开时触发此事件的处理程序，一般用于快捷键的操作。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="深入浅出js" scheme="https://www.wjnba.top/categories/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAjs/"/>
    
    
    <category term="javascript" scheme="https://www.wjnba.top/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Typescript基础之泛型</title>
    <link href="https://www.wjnba.top/articles/202208247dee70e2a1ef.html"/>
    <id>https://www.wjnba.top/articles/202208247dee70e2a1ef.html</id>
    <published>2022-08-24T01:25:17.000Z</published>
    <updated>2023-09-04T05:53:25.485Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TypeSprict-—-泛型"><a href="#TypeSprict-—-泛型" class="headerlink" title="TypeSprict — 泛型"></a>TypeSprict — 泛型</h1><h2 id="TS-—-泛型"><a href="#TS-—-泛型" class="headerlink" title="TS — 泛型"></a><code>TS</code> — 泛型</h2><h3 id="什么是泛型"><a href="#什么是泛型" class="headerlink" title="什么是泛型"></a>什么是泛型</h3><blockquote><p>1.泛型（Generics）是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。</p><p>2.我们不仅要创建一致的定义良好的API，同时也要考虑可重用性。组件不仅能够支持当前的数据类型，同时也能支持未来的数据类型，这在创建大型系统时为你提供了十分灵活的功能。  在像c#和java这样的语言中，可以使用泛型来创建可重用的组件，一个组件可以支持多种类型的数据。这样用户就可以以自己的数据类型来使用组件。  </p></blockquote><span id="more"></span><h3 id="ts函数定义"><a href="#ts函数定义" class="headerlink" title="ts函数定义"></a><code>ts</code>函数定义</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先看一下ts函数的定义</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">value: <span class="built_in">string</span></span>): <span class="title">string</span> </span>&#123; <span class="comment">// 传入值和返回值都限制了string类型</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;str&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当需要同时支持多个数类型的时候 这时怎么解决呢？</p><ul><li>用<code>any</code>类型</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span> (<span class="params">value: <span class="built_in">any</span></span>):<span class="title">any</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用了any就代表着放弃了类型的检查，一般我们都提倡严格限制类型，这时我们可以利用泛型来解决</span></span><br></pre></td></tr></table></figure><h3 id="泛型的写法"><a href="#泛型的写法" class="headerlink" title="泛型的写法"></a>泛型的写法</h3><blockquote><p>1.我们在函数名后添加了 <T>，其中 T 用来指代任意输入的类型，在后面的输入 value: T 和输出 Array<T> 中即可使用了。<br>2.T表示泛型（也可以取其他名字），具体什么类型是调用这个方法的时候决定的</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例子</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createArray</span>&lt;<span class="title">T</span>&gt;(<span class="params">length: <span class="built_in">number</span>, value: T</span>): <span class="title">Array</span>&lt;<span class="title">T</span>&gt; </span>&#123; </span><br><span class="line">    <span class="keyword">let</span> result: T[] = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        result[i] = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createArray&lt;<span class="built_in">string</span>&gt;(<span class="number">3</span>, <span class="string">&#x27;x&#x27;</span>); <span class="comment">// [&#x27;x&#x27;, &#x27;x&#x27;, &#x27;x&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="多个类型参数"><a href="#多个类型参数" class="headerlink" title="多个类型参数"></a>多个类型参数</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">泛型可以定义多个不同类型参数</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>&lt;<span class="title">T</span>, <span class="title">U</span>&gt;(<span class="params">tuple: [T, U]</span>): [<span class="title">U</span>, <span class="title">T</span>] </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [tuple[<span class="number">1</span>], tuple[<span class="number">0</span>]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">swap&lt;<span class="built_in">number</span>, <span class="built_in">string</span>&gt;([<span class="number">7</span>, <span class="string">&#x27;seven&#x27;</span>]); <span class="comment">// [&#x27;seven&#x27;, 7]</span></span><br></pre></td></tr></table></figure><h3 id="函数表达式-函数别名-接口-—配合泛型写法"><a href="#函数表达式-函数别名-接口-—配合泛型写法" class="headerlink" title="函数表达式/函数别名/接口 —配合泛型写法"></a>函数表达式/函数别名/接口 —配合泛型写法</h3><ul><li>函数表达式的定义方式</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> getArray: &lt;T&gt;<span class="function">(<span class="params">arg: T, times: <span class="built_in">number</span></span>) =&gt;</span> T[]</span><br><span class="line">getArray = <span class="function">(<span class="params">arg: <span class="built_in">any</span>, times: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Array</span>(times).fill(arg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>接口类型</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> GetArray&lt;T&gt; &#123;</span><br><span class="line">    (arg: T, <span class="attr">times</span>: <span class="built_in">number</span>): T[],</span><br><span class="line">    <span class="attr">array</span>: T[]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 与泛型接口类型，泛型也可以定义在类的类型定义中</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericNumber</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="attr">zeroValue</span>: T;</span><br><span class="line">    add: <span class="function">(<span class="params">x: T, y: T</span>) =&gt;</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myGenericNumber = <span class="keyword">new</span> GenericNumber&lt;<span class="built_in">number</span>&gt;();</span><br><span class="line">myGenericNumber.zeroValue = <span class="number">0</span>;</span><br><span class="line">myGenericNumber.add = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123; <span class="keyword">return</span> x + y; &#125;;</span><br></pre></td></tr></table></figure><blockquote><p> 需要注意的是：类有两部分： 静态部分和实例部分。泛型类值的是实例部分的类型，所以类的静态属性不能使用这个泛型类型</p></blockquote><p>案例：比如有最小堆算法，需要同时支持返回数字和字符串两种类型。通过类的泛型来实现</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myClass</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> list:T[] = [];</span><br><span class="line">    add (value: T): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.list.push(value)</span><br><span class="line">    &#125;</span><br><span class="line">    min () : <span class="built_in">number</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> min=arr[<span class="number">0</span>];</span><br><span class="line">        list.forEach(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(value&lt;min)&#123;</span><br><span class="line">                min=value</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> min</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> myClass&lt;<span class="built_in">number</span>&gt;() <span class="comment">//实例化，并且指定了泛型T的类型为number</span></span><br><span class="line">m.add(<span class="number">2</span>);</span><br><span class="line">m.add(<span class="number">3</span>);</span><br><span class="line">m.add(<span class="number">5</span>);</span><br><span class="line">m.add(<span class="number">5</span>);</span><br><span class="line">m.add(<span class="number">7</span>);</span><br><span class="line">m.add(<span class="number">8</span>);</span><br><span class="line">alert(m.min()) <span class="comment">//输出了最大值</span></span><br></pre></td></tr></table></figure><h3 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h3><blockquote><p>1.有时候我们想对泛型传入的参数加以约束，这时候使用泛型约束<br>2.思路就是让泛型类型去继承接口或者一些类，让在编译过程去检测传入的泛型是具有当前指定的属性</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Lengthwise &#123;</span><br><span class="line">    <span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">Lengthwise</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg.length);</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loggingIdentity(<span class="number">7</span>);<span class="comment">// 传入数字会报错 arg不包含length</span></span><br></pre></td></tr></table></figure><h3 id="泛型参数的默认类型"><a href="#泛型参数的默认类型" class="headerlink" title="泛型参数的默认类型"></a>泛型参数的默认类型</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createArray</span>&lt;<span class="title">T</span> = <span class="title">string</span>&gt;(<span class="params">length: <span class="built_in">number</span>, value: T</span>): <span class="title">Array</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result: T[] = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        result[i] = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;TypeSprict-—-泛型&quot;&gt;&lt;a href=&quot;#TypeSprict-—-泛型&quot; class=&quot;headerlink&quot; title=&quot;TypeSprict — 泛型&quot;&gt;&lt;/a&gt;TypeSprict — 泛型&lt;/h1&gt;&lt;h2 id=&quot;TS-—-泛型&quot;&gt;&lt;a href=&quot;#TS-—-泛型&quot; class=&quot;headerlink&quot; title=&quot;TS — 泛型&quot;&gt;&lt;/a&gt;&lt;code&gt;TS&lt;/code&gt; — 泛型&lt;/h2&gt;&lt;h3 id=&quot;什么是泛型&quot;&gt;&lt;a href=&quot;#什么是泛型&quot; class=&quot;headerlink&quot; title=&quot;什么是泛型&quot;&gt;&lt;/a&gt;什么是泛型&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;1.泛型（Generics）是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。&lt;/p&gt;
&lt;p&gt;2.我们不仅要创建一致的定义良好的API，同时也要考虑可重用性。组件不仅能够支持当前的数据类型，同时也能支持未来的数据类型，这在创建大型系统时为你提供了十分灵活的功能。  在像c#和java这样的语言中，可以使用泛型来创建可重用的组件，一个组件可以支持多种类型的数据。这样用户就可以以自己的数据类型来使用组件。  &lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Typescript基础" scheme="https://www.wjnba.top/categories/Typescript%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Typescript" scheme="https://www.wjnba.top/tags/Typescript/"/>
    
  </entry>
  
  <entry>
    <title>Typescript基础之函数</title>
    <link href="https://www.wjnba.top/articles/20220824ce2fc93679c8.html"/>
    <id>https://www.wjnba.top/articles/20220824ce2fc93679c8.html</id>
    <published>2022-08-24T01:25:05.000Z</published>
    <updated>2023-09-04T05:53:25.485Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TypeSprict-—-函数"><a href="#TypeSprict-—-函数" class="headerlink" title="TypeSprict — 函数"></a>TypeSprict — 函数</h1><h2 id="JS-—-函数的两种表现形式"><a href="#JS-—-函数的两种表现形式" class="headerlink" title="JS — 函数的两种表现形式"></a><code>JS</code> — 函数的两种表现形式</h2><blockquote><p>我们熟知<code>js</code>有两种函数表现形式’函数声明’和’函数表达式’</p></blockquote><h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><span id="more"></span><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数声明（Function Declaration）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数的表达式"><a href="#函数的表达式" class="headerlink" title="函数的表达式"></a>函数的表达式</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数表达式（Function Expression）</span></span><br><span class="line"><span class="keyword">let</span> mySum = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="es6-箭头函数"><a href="#es6-箭头函数" class="headerlink" title="es6 箭头函数"></a><code>es6</code> 箭头函数</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> esExample = <span class="function">(<span class="params">name</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TS-—-定义一个函数"><a href="#TS-—-定义一个函数" class="headerlink" title="TS — 定义一个函数"></a><code>TS</code> — 定义一个函数</h2><blockquote><p>将上面的三种写法依次推导成’<code>ts</code>‘的写法</p></blockquote><h3 id="TS-—-函数声明"><a href="#TS-—-函数声明" class="headerlink" title="TS — 函数声明"></a><code>TS</code> — 函数声明</h3><blockquote><p>1.<code>TS</code>以函数的声明的形式，需要定义函数参数中的类型，以及返回类型。 ‘<code>function</code> 函数名(参数:类型):函数返回的类型{}’<br>2.如果函数没有返回类型就是 <code>void</code></p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回number类型的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">arg1:<span class="built_in">number</span>, arg2:<span class="built_in">number</span></span>): <span class="title">number</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg1 + arg2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sub</span>(<span class="params">arg1: <span class="built_in">number</span></span>): <span class="title">void</span></span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg1）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>TS</code> — 函数函数的表达式/ 箭头函数（定义）</p><blockquote><p>下面两种写法最后编译成’<code>js</code>‘的结果不同，但是却在’<code>TS</code>‘ 表现形式略有区别</p><ul><li>第一个案例只对等号右侧的匿名函数进行了类型定义，在把这个重新被定义的类型函数赋值给了’<code>add</code>‘。</li><li>第二个案例就比较遵循’<code>ts</code>‘ 规则，先定义了一个函数类型，这个类型参数指定的类型，以及函数返回的类型，然后使用的时候在按照定义规范去用</li></ul></blockquote><ul><li>第一种写法</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">arg1:<span class="built_in">number</span>,arg2:<span class="built_in">number</span></span>) =&gt;</span> arg1 + arg2</span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><ul><li>第二种写法</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个函数类型包括参数类型和返回类型， ts 箭头函数左面是函数参数，右面是函数返回类型</span></span><br><span class="line"><span class="keyword">let</span> add:<span class="function">(<span class="params">x:<span class="built_in">number</span>,y:<span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用的时候具体函数使用</span></span><br><span class="line">add = <span class="function">(<span class="params">arg1:<span class="built_in">number</span>,arg2:<span class="built_in">number</span></span>) =&gt;</span>&#123; <span class="keyword">return</span> arg1+arg2&#125;</span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h3 id="使用接口-定义"><a href="#使用接口-定义" class="headerlink" title="使用接口(定义)"></a>使用接口(定义)</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Add &#123;</span><br><span class="line">    (x:<span class="built_in">number</span>,<span class="attr">y</span>:<span class="built_in">number</span>):<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照接口格式 规范实现我们的myAdd方法</span></span><br><span class="line"><span class="keyword">let</span> myAdd: Add</span><br><span class="line">myAdd = <span class="function">(<span class="params">x:<span class="built_in">number</span>,y:<span class="built_in">number</span></span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="built_in">console</span>.log(myAdd(<span class="number">1</span>,<span class="number">2</span>)) <span class="comment">//3</span></span><br></pre></td></tr></table></figure><h3 id="ts-定义参数可选参数写法-—-‘-’的使用"><a href="#ts-定义参数可选参数写法-—-‘-’的使用" class="headerlink" title="ts 定义参数可选参数写法 — ‘?’的使用"></a><code>ts</code> 定义参数可选参数写法 — ‘?’的使用</h3><blockquote><p>1.<code>JavaScript</code>里，每个参数都是可选的，可传可不传。但’TS’不同每个函数参数都是必须的，可以理解定义则必须使用</p><p>2.但是有时候不想将每一个定义的参数都传值使用，这时候就可以用’?’ 的形式来将参数变成可选的和接口中使用的方式相似</p><p>3.需要注意的是，可选参数必须接在必需参数最后面。</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> AddFun: <span class="function">(<span class="params">x:<span class="built_in">number</span>,y:<span class="built_in">number</span>,z?:<span class="built_in">any</span></span>) =&gt;</span> <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> add:AddFun</span><br><span class="line">add = <span class="function">(<span class="params">x:<span class="built_in">number</span>,y:<span class="built_in">number</span></span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加了一个z参数</span></span><br><span class="line">add = <span class="function">(<span class="params">x:<span class="built_in">number</span>,y:<span class="built_in">number</span>,z:<span class="built_in">number</span></span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y+z</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>官方给的案例</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, lastName?: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lastName)</span><br><span class="line">        <span class="keyword">return</span> firstName + <span class="string">&quot; &quot;</span> + lastName;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> firstName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result1 = buildName(<span class="string">&quot;Bob&quot;</span>);  <span class="comment">// works correctly now</span></span><br><span class="line"><span class="keyword">let</span> result2 = buildName(<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Adams&quot;</span>, <span class="string">&quot;Sr.&quot;</span>);  <span class="comment">// error, too many parameters</span></span><br><span class="line"><span class="keyword">let</span> result3 = buildName(<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Adams&quot;</span>);  <span class="comment">// ah, just right</span></span><br></pre></td></tr></table></figure><p><code>TS</code>函数 — 设置函数参数默认值</p><blockquote><p>1.和<code>es6</code> 一样直接在参数中给要增加的参数赋值默认参数即可<br>2.当有默认参数的时候，默认参数会自动变成一个可选参数,不填就用默认参数，填就用填写参数，但是’?’形式的可选参数依然必须在末尾</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, lastName: <span class="built_in">string</span> = <span class="string">&#x27;Cat&#x27;</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> firstName + <span class="string">&#x27; &#x27;</span> + lastName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> tomcat = buildName(<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Cat&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> tom = buildName(<span class="string">&#x27;Tom&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>案例二</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName = <span class="string">&quot;Will&quot;</span>, lastName: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> firstName + <span class="string">&quot; &quot;</span> + lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result1 = buildName(<span class="string">&quot;Bob&quot;</span>);                  <span class="comment">// 错误，少了个参数</span></span><br><span class="line"><span class="keyword">let</span> result2 = buildName(<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Adams&quot;</span>, <span class="string">&quot;Sr.&quot;</span>);  <span class="comment">// 错误，多了个参数</span></span><br><span class="line"><span class="keyword">let</span> result3 = buildName(<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Adams&quot;</span>);         <span class="comment">//  Bob Adams</span></span><br><span class="line"><span class="keyword">let</span> result4 = buildName(<span class="literal">undefined</span>, <span class="string">&quot;Adams&quot;</span>);     <span class="comment">// Will Adams</span></span><br></pre></td></tr></table></figure><h3 id="TS函数-—-设置剩余参数"><a href="#TS函数-—-设置剩余参数" class="headerlink" title="TS函数 — 设置剩余参数"></a><code>TS</code>函数 — 设置剩余参数</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 使用的场景：同时操作多个参数，或者在不确定有多少个参数的时候</span><br><span class="line"><span class="number">2.</span> 对es6中的<span class="string">&#x27;...&#x27;</span> 简单讲解:</span><br><span class="line">    <span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">var</span> b = [...a]</span><br><span class="line">    <span class="built_in">console</span>.log(b) <span class="comment">//  [1, 2, 3] </span></span><br><span class="line">    <span class="comment">// 对象解构</span></span><br><span class="line">    <span class="keyword">var</span> aObj = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> bObj2 = &#123;...aObj,<span class="string">&quot;b&quot;</span>:<span class="number">2</span>&#125;</span><br><span class="line">    <span class="built_in">console</span>.log(bObj2 ) <span class="comment">// &#123;a: 1, b: 2&#125;</span></span><br><span class="line"><span class="number">4.</span> 在<span class="string">&#x27;ts&#x27;</span> 中也是<span class="string">&#x27;...&#x27;</span>但需要定义数组类型参数<span class="string">&#x27; ...args: number[]&#x27;</span></span><br><span class="line"><span class="number">5.</span> 需要注意的是，剩余参数必须接在必需参数最后面。</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> handleData = <span class="function">(<span class="params">arg1: <span class="built_in">number</span>, ...args: <span class="built_in">number</span>[]</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg1, arg2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h3><blockquote><p>1.有时候函数会因为传递的参数不同，导致函数参数返回的时候类型值不同一种解决办法就是利用’联合类型’</p><p> 但是有个缺点，就是不能够精确的表达输入为数字的时候，输出也应该为数字 输入为字符串的时候，输出也应该为字符串另一种解决办法就是利用’重载’<br>2.官方文档的标准解释：重载允许一个函数接受不同数量或类型的参数时，作出不同的处理。</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">x: <span class="built_in">number</span> | <span class="built_in">string</span></span>): <span class="title">number</span> | <span class="title">string</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">Number</span>(x.toString().split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line">     &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> x.split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>用重载定义多个 <code>reverse</code> 的函数类型</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">x: <span class="built_in">number</span></span>): <span class="title">number</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">x: <span class="built_in">string</span></span>): <span class="title">string</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">x: <span class="built_in">number</span> | <span class="built_in">string</span></span>): <span class="title">number</span> | <span class="title">string</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Number</span>(x.toString().split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x.split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意，<code>TypeScript</code> 会优先从最前面的函数定义开始匹配，所以多个函数定义如果有包含关系，需要优先把精确的定义写在前面。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;TypeSprict-—-函数&quot;&gt;&lt;a href=&quot;#TypeSprict-—-函数&quot; class=&quot;headerlink&quot; title=&quot;TypeSprict — 函数&quot;&gt;&lt;/a&gt;TypeSprict — 函数&lt;/h1&gt;&lt;h2 id=&quot;JS-—-函数的两种表现形式&quot;&gt;&lt;a href=&quot;#JS-—-函数的两种表现形式&quot; class=&quot;headerlink&quot; title=&quot;JS — 函数的两种表现形式&quot;&gt;&lt;/a&gt;&lt;code&gt;JS&lt;/code&gt; — 函数的两种表现形式&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;我们熟知&lt;code&gt;js&lt;/code&gt;有两种函数表现形式’函数声明’和’函数表达式’&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;函数声明&quot;&gt;&lt;a href=&quot;#函数声明&quot; class=&quot;headerlink&quot; title=&quot;函数声明&quot;&gt;&lt;/a&gt;函数声明&lt;/h3&gt;</summary>
    
    
    
    <category term="Typescript基础" scheme="https://www.wjnba.top/categories/Typescript%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Typescript" scheme="https://www.wjnba.top/tags/Typescript/"/>
    
  </entry>
  
  <entry>
    <title>Typescript基础之类</title>
    <link href="https://www.wjnba.top/articles/2022082491102b34e243.html"/>
    <id>https://www.wjnba.top/articles/2022082491102b34e243.html</id>
    <published>2022-08-24T01:24:46.000Z</published>
    <updated>2023-09-04T05:53:25.485Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TypeSprict-—-类"><a href="#TypeSprict-—-类" class="headerlink" title="TypeSprict — 类"></a>TypeSprict — 类</h2><blockquote><p><code>JavaScript</code> 通过构造函数实现类的概念，通过原型链实现继承。而在 <code>ES6</code> 中，我们终于迎来了 <code>class</code>。<br><code>TypeScript</code> 除了实现了所有 <code>ES6</code> 中的类的功能以外，还添加了一些新的用法。</p></blockquote><span id="more"></span><h3 id="TS-—-类的概念"><a href="#TS-—-类的概念" class="headerlink" title="TS — 类的概念"></a><code>TS</code> — 类的概念</h3><blockquote><ol><li>类(<code>Class</code>)：定义了一件事物的抽象特点，包含它的属性和方法</li><li>对象（<code>Object</code>）：类的实例，通过 <code>new</code> 生成</li><li><p>面向对象（<code>OOP</code>）的三大特性：封装、继承、多态</p><ul><li>封装（<code>Encapsulation</code>）：将对数据的操作细节隐藏起来，只暴露对外的接口。</li><li>继承（<code>Inheritance</code>）：子类继承父类，子类除了拥有父类的所有特性外，还有一些更具体的特性。</li><li>多态（<code>Polymorphism</code>）：由继承而产生了相关的不同的类，对同一个方法可以有不同的响应。</li></ul></li><li><p>存取器（<code>getter</code> &amp; <code>setter</code>）：用以改变属性的读取和赋值行为</p></li><li>修饰符（<code>Modifiers</code>）：修饰符是一些关键字，用于限定成员或类型的性质。比如 public 表示公有属性或方法</li><li>抽象类（<code>Abstract Class</code>）：抽象类是供其他类继承的基类，抽象类不允许被实例化。<br>抽象类中的抽象方法必须在子类中被实现</li><li>接口（<code>Interfaces</code>）：不同类之间公有的属性或方法，可以抽象成一个接口。<br>接口可以被类实现（<code>implements</code>）。一个类只能继承自另一个类，但是可以实现多个接口</li></ol></blockquote><h4 id="创建一个简单的-ts-类"><a href="#创建一个简单的-ts-类" class="headerlink" title="创建一个简单的 ts 类"></a>创建一个简单的 ts 类</h4><blockquote><p><code>class</code> 定义类，使用 <code>constructor</code> 定义构造函数。通过 <code>new</code> 生成新实例的时候，会自动调用构造函数。</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`My name is <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> Animal(<span class="string">&quot;Jack&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a.sayHi()); <span class="comment">// My name is Jack</span></span><br></pre></td></tr></table></figure><h5 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h5><blockquote><p>使用 <code>extends</code> 关键字实现继承，子类中使用 <code>super</code> 关键字来调用父类的构造函数和方法。</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`My name is <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(name); <span class="comment">// 调用父类的 constructor(name)</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Meow, &quot;</span> + <span class="built_in">super</span>.sayHi(); <span class="comment">// 调用父类的 sayHi()</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="public-private-protected—-公共-私有-受保护的"><a href="#public-private-protected—-公共-私有-受保护的" class="headerlink" title="public / private / protected— 公共/私有/受保护的"></a><code>public</code> / <code>private</code> / <code>protected</code>— 公共/私有/受保护的</h3><h4 id="public-—-公共"><a href="#public-—-公共" class="headerlink" title="public — 公共"></a><code>public</code> — 公共</h4><blockquote><p>‘<code>public</code>‘修饰的属性或方法是公有的，可以在任何地方被访问到，默认所有的属性和方法都是 ‘<code>public</code>‘的</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> name;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> Animal(<span class="string">&quot;Jack&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a.name); <span class="comment">// Jack</span></span><br><span class="line">a.name = <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.name); <span class="comment">// Tom</span></span><br></pre></td></tr></table></figure><h4 id="private-—-私有的"><a href="#private-—-私有的" class="headerlink" title="private — 私有的"></a><code>private</code> — 私有的</h4><blockquote><p>当成员被标记成<code>private</code>时，它就不能在声明它的类的外部访问，简单的说，只有自己的<code>class</code>内部可以访问，即使是自己的’实例’，’继承的子类’ 都无法访问被’<code>private</code>‘修饰的内容</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name; <span class="comment">// 能调用private修饰的</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`我的名字<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>; <span class="comment">// 能调用private修饰的</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">getTest</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name); <span class="comment">// 错误提示：属性“name”为私有属性，只能在类“Animal ”中访问。</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Animal(<span class="string">&quot;dog&quot;</span>);</span><br><span class="line"><span class="comment">// dog.name = &quot;Anne&quot; // 提示错误：属性“name”为私有属性，只能在类“Animal”中访问。</span></span><br><span class="line"><span class="built_in">console</span>.log(dog.getName()); <span class="comment">// 可以访问，打印结果：我的名字Anne</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cat = <span class="keyword">new</span> Cat(<span class="string">&quot;cat&quot;</span>);</span><br><span class="line"><span class="comment">// cat.getTest() // 这里是错误的 因为Cat 类也无法使用继承父类的私有属性或者方法</span></span><br></pre></td></tr></table></figure><h4 id="protected-—-受保护的"><a href="#protected-—-受保护的" class="headerlink" title="protected — 受保护的"></a><code>protected</code> — 受保护的</h4><blockquote><p>1.修饰的属性或方法是受保护的，它和 <code>private</code> 类似，区别是它在子类中也是允许被访问的，简单的 说’子类是可以访问 <code>protected</code> 修饰的’ 实例是不可以的</p><p> 2.修饰的是’<code>constructor</code>‘ 则当前类不能创建实例</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">protected</span> <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">protected</span> <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//protected 修饰constructor不能创建实例 报错提示：类“Animal”的构造函数是受保护的，仅可在类声明中访问。</span></span><br><span class="line"><span class="comment">// const cat = new Animal (18)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">super</span>.getName()); <span class="comment">// 可以访问父类中的protected方法</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Dog(<span class="string">&quot;Laura&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="其他特性"><a href="#其他特性" class="headerlink" title="其他特性"></a>其他特性</h3><h4 id="readonly-—-只读属性"><a href="#readonly-—-只读属性" class="headerlink" title="readonly — 只读属性"></a><code>readonly</code> — 只读属性</h4><blockquote><p>可以使用 <code>readonly</code> 关键字将属性设置为只读的。</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">readonly</span> name;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> Animal(<span class="string">&quot;Jack&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a.name); <span class="comment">// Jack</span></span><br><span class="line">a.name = <span class="string">&quot;Tom&quot;</span>; <span class="comment">// 错误 name是只读的</span></span><br></pre></td></tr></table></figure><h4 id="静态属性-—-static-修饰"><a href="#静态属性-—-static-修饰" class="headerlink" title="静态属性 — static 修饰"></a>静态属性 — <code>static</code> 修饰</h4><blockquote><p>1.’<code>ts</code>‘ 提供了 静态属性，属性和方法都是’<code>static</code>‘ 修饰 </p><p>2.静态方法没法直接调用类里面的属性，当想要调用类里面的属性的时候需要声明静态的属性</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Animal.name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> name: <span class="built_in">string</span> = <span class="number">18</span>;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Animal();</span><br><span class="line"><span class="comment">// console.log(p.age) // age 是静态的属性 所以实例是不能访问的</span></span><br><span class="line"><span class="comment">// console.log(Animal.age) // 虽然有了类但是也是不能访问的，因为用了private修饰用public可以访问</span></span><br></pre></td></tr></table></figure><h4 id="ts-的-getter-setter"><a href="#ts-的-getter-setter" class="headerlink" title="ts 的 getter /setter"></a><code>ts</code> 的 <code>getter</code> /<code>setter</code></h4><blockquote><p>使用 <code>getter</code> 和 <code>setter</code> 来改变属性的赋值和读取行为</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title">name</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Jack&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title">name</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;setter: &quot;</span> + value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> Animal(<span class="string">&quot;Kitty&quot;</span>); <span class="comment">// setter: Kitty</span></span><br><span class="line">a.name = <span class="string">&quot;Tom&quot;</span>; <span class="comment">// setter: Tom</span></span><br><span class="line"><span class="built_in">console</span>.log(a.name); <span class="comment">// Jack</span></span><br></pre></td></tr></table></figure><h4 id="抽象类-abstract"><a href="#抽象类-abstract" class="headerlink" title="抽象类 abstract"></a>抽象类 <code>abstract</code></h4><blockquote><ol><li>抽象类是不允许被实例化的</li><li>继承抽象类的类必须去实现实例中的抽象类中的’抽象方法’和’抽象属性’</li></ol></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> name;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> sayHi();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 实现抽象类的抽象方法</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Meow, My name is <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> cat = <span class="keyword">new</span> Cat(<span class="string">&quot;Tom&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;TypeSprict-—-类&quot;&gt;&lt;a href=&quot;#TypeSprict-—-类&quot; class=&quot;headerlink&quot; title=&quot;TypeSprict — 类&quot;&gt;&lt;/a&gt;TypeSprict — 类&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;JavaScript&lt;/code&gt; 通过构造函数实现类的概念，通过原型链实现继承。而在 &lt;code&gt;ES6&lt;/code&gt; 中，我们终于迎来了 &lt;code&gt;class&lt;/code&gt;。&lt;br&gt;&lt;code&gt;TypeScript&lt;/code&gt; 除了实现了所有 &lt;code&gt;ES6&lt;/code&gt; 中的类的功能以外，还添加了一些新的用法。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Typescript基础" scheme="https://www.wjnba.top/categories/Typescript%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Typescript" scheme="https://www.wjnba.top/tags/Typescript/"/>
    
  </entry>
  
  <entry>
    <title>Typescript基础之接口</title>
    <link href="https://www.wjnba.top/articles/2022082457f1a956bd41.html"/>
    <id>https://www.wjnba.top/articles/2022082457f1a956bd41.html</id>
    <published>2022-08-24T01:24:33.000Z</published>
    <updated>2023-09-04T05:53:25.485Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>接口：是一种类型，是一种规范，是一种规则，是一个能力，是一种约束。<br> TypeScript 的核心原则之一是对值所具有的结构进行类型检查。我们使用接口（<code>interface</code>）来定义对象的类型。<code>接口是对象的状态(属性)和行为(方法)的抽象(描述)</code></p><span id="more"></span><h2 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h2><p>接口里的属性不全都是必需的。 有些是只在某些条件下存在，或者根本不存在。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Idata &#123;</span><br><span class="line"> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line"> age: <span class="built_in">number</span>; </span><br><span class="line"> email?: <span class="built_in">string</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>带有可选属性的接口与普通的接口定义差不多，只是在可选属性名字定义的后面加一个 <code>?</code> 符号。</p><p>可选属性的好处之一是可以对可能存在的属性进行预定义，好处之二是可以捕获引用了不存在的属性时的错误。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data: Idata = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">23</span>,</span><br><span class="line">  <span class="comment">// email: &#x27;111@qq.com&#x27; // 可以没有</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="只读属性"><a href="#只读属性" class="headerlink" title="只读属性"></a>只读属性</h2><p>一些对象属性只能在对象刚刚创建的时候修改其值。 你可以在属性名前用 <code>readonly</code> 来指定只读属性。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Idata &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">readonly</span> age: <span class="built_in">number</span>; <span class="comment">// 只读属性</span></span><br><span class="line">  email?: <span class="built_in">string</span>; <span class="comment">// 可选属性 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一旦赋值后再也不能被改变。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data: Idata = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">23</span>,</span><br><span class="line">  <span class="comment">// email: &#x27;111@qq.com&#x27; // 可以没有</span></span><br><span class="line">&#125;</span><br><span class="line">data.age = <span class="number">20</span> <span class="comment">// Error</span></span><br></pre></td></tr></table></figure><p><strong><code>readonly</code> vs <code>const</code></strong></p><p>最简单判断该用<code>readonly</code>还是<code>const</code>的方法是看要把它做为变量使用还是做为一个属性。 做为变量使用的话用 <code>const</code>，若做为属性则使用<code>readonly</code>。</p><h3 id="对class类的约束"><a href="#对class类的约束" class="headerlink" title="对class类的约束"></a>对class类的约束</h3><p>1、定义接口的时候，只定义声明即可，不包含具体内容</p><p>2、实现接口，要实现里面的内容</p><p><strong>接口的定义</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Iprinter &#123;</span><br><span class="line">  printing(msg: <span class="built_in">string</span>): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Imessage &#123;</span><br><span class="line">  getMsg(): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现接口</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorPrinter</span> <span class="title">implements</span> <span class="title">Iprinter</span> </span>&#123;</span><br><span class="line">  printing(msg: <span class="built_in">string</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`打印<span class="subst">$&#123;msg&#125;</span>成功！`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现多个接口</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorPrinter</span> <span class="title">implements</span> <span class="title">Iprinter</span>, <span class="title">Imessage</span> </span>&#123;</span><br><span class="line">  printing(msg: <span class="built_in">string</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`打印<span class="subst">$&#123;msg&#125;</span>成功！`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  getMsg(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;惠普HP10000&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对函数的约束"><a href="#对函数的约束" class="headerlink" title="对函数的约束"></a>对函数的约束</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> ImaFunction &#123;</span><br><span class="line">  (a: <span class="built_in">string</span>, <span class="attr">b</span>: <span class="built_in">number</span>): <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fun1: ImaFunction;</span><br><span class="line">fun1 = <span class="function"><span class="keyword">function</span> (<span class="params">a: <span class="built_in">string</span>, b: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="对数组的约束"><a href="#对数组的约束" class="headerlink" title="对数组的约束"></a>对数组的约束</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IStuArr &#123;</span><br><span class="line">  [index: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr: IStuArr;</span><br><span class="line">arr = [<span class="string">&quot;ssss&quot;</span>, <span class="string">&quot;bbbb&quot;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><h3 id="对json的约束"><a href="#对json的约束" class="headerlink" title="对json的约束"></a>对json的约束</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Idata &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">readonly</span> age: <span class="built_in">number</span>; <span class="comment">// 只读属性 readonly</span></span><br><span class="line">  email?: <span class="built_in">string</span>; <span class="comment">// 可选属性 ?</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showData</span>(<span class="params">n: Idata</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// n.age = 12;</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(n));</span><br><span class="line">&#125;</span><br><span class="line">showData(&#123; <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>: <span class="number">19</span> &#125;);</span><br></pre></td></tr></table></figure><h2 id="接口的继承"><a href="#接口的继承" class="headerlink" title="接口的继承"></a>接口的继承</h2><p>和类一样，接口也可以相互继承。 这让我们能够从一个接口里复制成员到另一个接口里，可以更灵活地将接口分割到可重用的模块里。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IprinterMessage <span class="keyword">extends</span> Iprinter, Imessage &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;接口：是一种类型，是一种规范，是一种规则，是一个能力，是一种约束。&lt;br&gt; TypeScript 的核心原则之一是对值所具有的结构进行类型检查。我们使用接口（&lt;code&gt;interface&lt;/code&gt;）来定义对象的类型。&lt;code&gt;接口是对象的状态(属性)和行为(方法)的抽象(描述)&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Typescript基础" scheme="https://www.wjnba.top/categories/Typescript%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Typescript" scheme="https://www.wjnba.top/tags/Typescript/"/>
    
  </entry>
  
  <entry>
    <title>Typescript基础之基本类型</title>
    <link href="https://www.wjnba.top/articles/202208249e6debc43818.html"/>
    <id>https://www.wjnba.top/articles/202208249e6debc43818.html</id>
    <published>2022-08-24T01:24:21.000Z</published>
    <updated>2023-09-04T05:53:25.485Z</updated>
    
    <content type="html"><![CDATA[<h2 id="类型声明"><a href="#类型声明" class="headerlink" title="类型声明"></a>类型声明</h2><ul><li><p>类型声明是<code>TS</code>非常重要的一个特点。</p></li><li><p>通过类型声明可以指定<code>TS</code>中变量（参数、形参）的类型。</p></li><li><p>指定类型后，当为变量赋值时，<code>TS</code>编译器会自动检查是否复核类型声明，复核则赋值，否则报错。</p></li><li><p>简而言之，类型声明给变量设置了类型，使得变量只能存储某种类型的值。</p></li><li><p>语法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 变量: 类型;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> 变量: 类型 = 值;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">参数: 类型, 参数: 类型</span>): 类型</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><h3 id="1、字符串-string"><a href="#1、字符串-string" class="headerlink" title="1、字符串: string"></a>1、字符串: <code>string</code></h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str:<span class="built_in">string</span> = <span class="string">&#x27;hello word&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="2、布尔值-boolean"><a href="#2、布尔值-boolean" class="headerlink" title="2、布尔值: boolean"></a>2、布尔值: <code>boolean</code></h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isShow:<span class="built_in">boolean</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="3、数字-number"><a href="#3、数字-number" class="headerlink" title="3、数字: number"></a>3、数字: <code>number</code></h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age: <span class="built_in">number</span> = <span class="number">23</span>;</span><br></pre></td></tr></table></figure><h3 id="4、数组-array"><a href="#4、数组-array" class="headerlink" title="4、数组: array"></a>4、数组: <code>array</code></h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><h3 id="5、元组-tuple"><a href="#5、元组-tuple" class="headerlink" title="5、元组: tuple"></a>5、元组: <code>tuple</code></h3><p>元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同, 对应位置的类型需要相同。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line"></span><br><span class="line">arr = [<span class="string">&quot;aaa&quot;</span>, <span class="number">12</span>]; <span class="comment">// Ok</span></span><br><span class="line"></span><br><span class="line">arr = [<span class="number">12</span>, <span class="string">&quot;222&quot;</span>]; <span class="comment">// Error</span></span><br></pre></td></tr></table></figure><h3 id="6、枚举-enum"><a href="#6、枚举-enum" class="headerlink" title="6、枚举: enum"></a>6、枚举: <code>enum</code></h3><p>对<code>JavaScript</code>标准数据类型的一个补充,使用枚举类型可以为一组数值赋予友好的名字。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">enum</span> weeks &#123;</span><br><span class="line"></span><br><span class="line"> Mon,</span><br><span class="line"></span><br><span class="line"> Tue,</span><br><span class="line"></span><br><span class="line"> Wed,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> day: weeks = weeks.Mon;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(day); <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(weeks[<span class="number">0</span>]); <span class="comment">// Mon</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(weeks[<span class="string">&quot;Mon&quot;</span>]); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h3 id="7、any"><a href="#7、any" class="headerlink" title="7、any"></a>7、<code>any</code></h3><p><code>any</code>, 为不清楚类型的变量指定一个类型, 不通过类型检查器检测。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x: <span class="built_in">any</span> = <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line"></span><br><span class="line">x = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line">x = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h3 id="8、void"><a href="#8、void" class="headerlink" title="8、void"></a>8、<code>void</code></h3><p><code>void</code>类型像是与<code>any</code>类型相反，表示没有任何类型。当一个函数没有返回值时,其返回值类型通常是 <code>void</code>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&quot;11111&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明一个void类型的变量没有什么大用，因为你只能为它赋予<code>undefined</code>和<code>null</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> unusable: <span class="built_in">void</span> = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure><h3 id="9、undefined-null"><a href="#9、undefined-null" class="headerlink" title="9、undefined null"></a>9、<code>undefined</code> <code>null</code></h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x1: <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure><h2 id="10、object"><a href="#10、object" class="headerlink" title="10、object"></a>10、<code>object</code></h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj: <span class="built_in">object</span> = &#123; <span class="attr">a</span>: <span class="string">&quot;1&quot;</span> &#125;;</span><br></pre></td></tr></table></figure><h2 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x2: <span class="built_in">number</span> | <span class="built_in">string</span> | <span class="built_in">boolean</span>;</span><br><span class="line"></span><br><span class="line">x2 = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">x2 = <span class="string">&quot;22&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="类型推论"><a href="#类型推论" class="headerlink" title="类型推论"></a>类型推论</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x3 = <span class="number">3</span>; <span class="comment">// 推论x3为number类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x4;</span><br></pre></td></tr></table></figure><h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x5: <span class="built_in">number</span> | <span class="built_in">string</span> | <span class="built_in">boolean</span> = <span class="string">&quot;this is a string&quot;</span>;</span><br><span class="line"><span class="comment">// 尖括号方法</span></span><br><span class="line"><span class="keyword">let</span> strLen: <span class="built_in">number</span> = (&lt;<span class="built_in">string</span>&gt;x5).length;</span><br><span class="line"><span class="comment">// as语法</span></span><br><span class="line"><span class="keyword">let</span> strLen1: <span class="built_in">number</span> = (x5 <span class="keyword">as</span> <span class="built_in">string</span>).length;</span><br></pre></td></tr></table></figure><blockquote><p>*注：可凭个人喜好用以上方法,但当你在<code>TypeScript</code>里使用<code>JSX</code>时，只有<code>as</code>语法断言是被允许的。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;类型声明&quot;&gt;&lt;a href=&quot;#类型声明&quot; class=&quot;headerlink&quot; title=&quot;类型声明&quot;&gt;&lt;/a&gt;类型声明&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;类型声明是&lt;code&gt;TS&lt;/code&gt;非常重要的一个特点。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过类型声</summary>
      
    
    
    
    <category term="Typescript基础" scheme="https://www.wjnba.top/categories/Typescript%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Typescript" scheme="https://www.wjnba.top/tags/Typescript/"/>
    
  </entry>
  
  <entry>
    <title>Typescript基础之介绍</title>
    <link href="https://www.wjnba.top/articles/2022082440cd5be30b97.html"/>
    <id>https://www.wjnba.top/articles/2022082440cd5be30b97.html</id>
    <published>2022-08-24T01:23:48.000Z</published>
    <updated>2023-09-04T05:53:25.484Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是TypeScript"><a href="#什么是TypeScript" class="headerlink" title="什么是TypeScript"></a>什么是TypeScript</h2><p><code>TypeScript</code> 是 <code>JavaScript</code> 的类型的超集，它可以编译成纯 <code>JavaScript</code>，主要提供了类型系统和对 <code>ES6</code> 的支持。编译出来的 <code>JavaScript</code> 可以运行在任何浏览器上。<code>TypeScript</code> 编译工具可以运行在任何服务器和任何系统上。<code>TypeScript</code> 是开源的。</p><span id="more"></span><h2 id="TypeScript的特点"><a href="#TypeScript的特点" class="headerlink" title="TypeScript的特点"></a>TypeScript的特点</h2><h3 id="1、编译型语言"><a href="#1、编译型语言" class="headerlink" title="1、编译型语言"></a>1、编译型语言</h3><p>直接编写的内容无法执行，需要通过编译工具编译成<code>JavaScript</code>。</p><h3 id="2、强类型的语言"><a href="#2、强类型的语言" class="headerlink" title="2、强类型的语言"></a>2、强类型的语言</h3><p><code>JavaScript</code>是动态类型的编程语言，所谓的动态类型，就是在编译时候时候才知道其数据类型是<code>Number</code> 还是<code>String</code>，它是弱类型语言；而<code>TypeScript</code>是静态类型的编程语言，所谓的静态类型就是编写的时候就知道其数据类型是什么，它是强类型语言。例如：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str:<span class="built_in">string</span> = <span class="string">&#x27;hello word&#x27;</span></span><br></pre></td></tr></table></figure><p><code>str</code>这个变量从头到尾只能是<code>string</code>类型，如果将其他类型的值赋值给他就会抛出异常。</p><h3 id="3、真正面向对象的语言"><a href="#3、真正面向对象的语言" class="headerlink" title="3、真正面向对象的语言"></a>3、真正面向对象的语言</h3><p>面向对象：<strong>想进行执行某个事件，就去找事件对应的对象，把事情落实到对象身上</strong></p><p>在程序中一切皆是对象，对象包含<strong>属性</strong>和<strong>方法</strong></p><p>面向对象三大特征：<strong>封装、继承、多态</strong></p><ul><li>要想面向对象，操作对象，首先便要拥有对象</li><li>要创建对象，必须要先定义类，所谓的类可以理解为对象的模型，对象的种类</li><li>程序中可以根据类创建指定类型的对象</li><li>不同的类可以用来创建不同的对象</li></ul><h2 id="TypeScript的优势"><a href="#TypeScript的优势" class="headerlink" title="TypeScript的优势"></a>TypeScript的优势</h2><p>1、在开发过程中，就可以定位的错误的地方，方便我们检查错误。</p><p>2、<code>TypeScript</code>属于渐进式的编程语言，如果不懂其语法可以完全将其当做<code>JavaScript</code>来用。</p><p>3、减少了我们在开发过程中的不必要的类型检查。</p><p>4、静态类型的代码提示是要优于动态类型代码提示的。</p><p>5、在进行项目重构的时候会更加简单。</p><p>6、静态类型的代码语义化比动态类型更好，可读性更好。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;什么是TypeScript&quot;&gt;&lt;a href=&quot;#什么是TypeScript&quot; class=&quot;headerlink&quot; title=&quot;什么是TypeScript&quot;&gt;&lt;/a&gt;什么是TypeScript&lt;/h2&gt;&lt;p&gt;&lt;code&gt;TypeScript&lt;/code&gt; 是 &lt;code&gt;JavaScript&lt;/code&gt; 的类型的超集，它可以编译成纯 &lt;code&gt;JavaScript&lt;/code&gt;，主要提供了类型系统和对 &lt;code&gt;ES6&lt;/code&gt; 的支持。编译出来的 &lt;code&gt;JavaScript&lt;/code&gt; 可以运行在任何浏览器上。&lt;code&gt;TypeScript&lt;/code&gt; 编译工具可以运行在任何服务器和任何系统上。&lt;code&gt;TypeScript&lt;/code&gt; 是开源的。&lt;/p&gt;</summary>
    
    
    
    <category term="Typescript基础" scheme="https://www.wjnba.top/categories/Typescript%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Typescript" scheme="https://www.wjnba.top/tags/Typescript/"/>
    
  </entry>
  
  <entry>
    <title>vue中使用wangeditor富文本编辑器</title>
    <link href="https://www.wjnba.top/articles/202206294713919edbe3.html"/>
    <id>https://www.wjnba.top/articles/202206294713919edbe3.html</id>
    <published>2022-06-29T05:37:12.000Z</published>
    <updated>2023-09-04T05:53:25.487Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><code>wangEditor4</code> —— 轻量级 web 富文本编辑器，配置方便，使用简单。</p><ul><li>官网：<a href="https://www.wangeditor.com/">www.wangeditor.com</a></li><li>文档：<a href="https://www.wangeditor.com/v4/">www.wangeditor.com/v4</a></li><li>源码：<a href="https://github.com/wangeditor-team/wangeditor">github.com/wangeditor-team/wangEditor</a> </li></ul><span id="more"></span><h2 id="浏览器兼容性"><a href="#浏览器兼容性" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h2><p>兼容常见的 <code>PC</code> 浏览器：Chrome，Firefox，Safari，Edge，QQ 浏览器，IE11。</p><p>不支持移动端。</p><h2 id="封装wangEditor组件"><a href="#封装wangEditor组件" class="headerlink" title="封装wangEditor组件"></a>封装wangEditor组件</h2><h3 id="一、引入wangeditor"><a href="#一、引入wangeditor" class="headerlink" title="一、引入wangeditor"></a>一、引入<code>wangeditor</code></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i wangeditor@<span class="number">4.7</span><span class="number">.15</span> --save</span><br></pre></td></tr></table></figure><h3 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h3><h4 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h4><p>在<code>components</code>文件夹下新建文件夹<code>WangEditor</code>，再在<code>WangEditor</code>文件夹下新建<code>config.js</code>文件，用来存放默认配置，写入以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> defaultConfig = &#123;</span><br><span class="line">  <span class="attr">menus</span>: [</span><br><span class="line">    <span class="string">&#x27;head&#x27;</span>, <span class="comment">// 标题</span></span><br><span class="line">    <span class="string">&#x27;bold&#x27;</span>, <span class="comment">// 加粗</span></span><br><span class="line">    <span class="string">&#x27;fontSize&#x27;</span>, <span class="comment">// 字号</span></span><br><span class="line">    <span class="string">&#x27;fontName&#x27;</span>, <span class="comment">// 字体</span></span><br><span class="line">    <span class="string">&#x27;italic&#x27;</span>, <span class="comment">// 斜体</span></span><br><span class="line">    <span class="string">&#x27;underline&#x27;</span>, <span class="comment">// 下划线</span></span><br><span class="line">    <span class="string">&#x27;strikeThrough&#x27;</span>, <span class="comment">// 删除线</span></span><br><span class="line">    <span class="string">&#x27;indent&#x27;</span>, <span class="comment">// 缩进</span></span><br><span class="line">    <span class="string">&#x27;lineHeight&#x27;</span>, <span class="comment">// 行高</span></span><br><span class="line">    <span class="string">&#x27;foreColor&#x27;</span>, <span class="comment">// 字体颜色</span></span><br><span class="line">    <span class="string">&#x27;backColor&#x27;</span>, <span class="comment">// 背景色</span></span><br><span class="line">    <span class="string">&#x27;link&#x27;</span>, <span class="comment">// 链接</span></span><br><span class="line">    <span class="string">&#x27;list&#x27;</span>, <span class="comment">// 序列</span></span><br><span class="line">    <span class="comment">// &#x27;todo&#x27;, // 待办事项</span></span><br><span class="line">    <span class="string">&#x27;justify&#x27;</span>, <span class="comment">// 对齐</span></span><br><span class="line">    <span class="string">&#x27;quote&#x27;</span>, <span class="comment">// 引用</span></span><br><span class="line">    <span class="comment">// &#x27;emoticon&#x27;, // 表情</span></span><br><span class="line">    <span class="string">&#x27;image&#x27;</span>, <span class="comment">// 图片</span></span><br><span class="line">    <span class="string">&#x27;video&#x27;</span>, <span class="comment">// 视频</span></span><br><span class="line">    <span class="comment">// &#x27;table&#x27;, // 表格</span></span><br><span class="line">    <span class="comment">// &#x27;code&#x27;, // 代码</span></span><br><span class="line">    <span class="string">&#x27;splitLine&#x27;</span>, <span class="comment">// 分割线</span></span><br><span class="line">    <span class="string">&#x27;undo&#x27;</span>, <span class="comment">// 撤销</span></span><br><span class="line">    <span class="string">&#x27;redo&#x27;</span> <span class="comment">// 恢复</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">fontNames</span>: [</span><br><span class="line">    <span class="string">&#x27;黑体&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;仿宋&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;楷体&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;宋体&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;微软雅黑&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Arial&#x27;</span></span><br><span class="line">  ], <span class="comment">// 常用字体</span></span><br><span class="line">  <span class="attr">lineHeights</span>: [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1.15&#x27;</span>, <span class="string">&#x27;1.6&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;2.5&#x27;</span>, <span class="string">&#x27;3&#x27;</span>],</span><br><span class="line">  <span class="attr">uploadImgAccept</span>: [<span class="string">&#x27;jpg&#x27;</span>, <span class="string">&#x27;jpeg&#x27;</span>, <span class="string">&#x27;png&#x27;</span>, <span class="string">&#x27;gif&#x27;</span>, <span class="string">&#x27;bmp&#x27;</span>, <span class="string">&#x27;webp&#x27;</span>], <span class="comment">// 限制图片类型</span></span><br><span class="line">  <span class="attr">uploadVideoAccept</span>: [<span class="string">&#x27;mp4&#x27;</span>] <span class="comment">// 限制视频类型</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  defaultConfig</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在<code>WangEditor</code>文件夹下新建<code>index.vue</code>文件，写入以下代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;editor&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> WangEditor <span class="keyword">from</span> <span class="string">&#x27;wangeditor&#x27;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">&#x27;./config&#x27;</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>: <span class="string">&#x27;WangEditor&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">editorE</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 编辑器的对象</span></span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">value</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">type</span>: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 编辑器高度</span></span></span><br><span class="line"><span class="javascript">      <span class="attr">height</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">type</span>: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">default</span>: <span class="number">200</span></span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 限制图片大小 M</span></span></span><br><span class="line"><span class="javascript">      <span class="attr">uploadImgMaxSize</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">type</span>: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">default</span>: <span class="number">5</span></span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 限制视频大小 M</span></span></span><br><span class="line"><span class="javascript">      <span class="attr">uploadVideoMaxSize</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">type</span>: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">default</span>: <span class="number">500</span></span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="attr">placeholder</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">type</span>: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">default</span>: <span class="string">&#x27;请输入内容...&#x27;</span></span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="attr">config</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">default</span>: <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> &#123;&#125;;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">needConfig</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123; ...config.defaultConfig, ...this.config &#125;;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">value</span>(<span class="params">val</span>)</span> &#123; <span class="comment">// 普通的watch监听</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (val !== <span class="built_in">this</span>.editorE.txt.html()) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.editorE.txt.html(val);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> that = <span class="built_in">this</span>;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 初始化编辑框</span></span></span><br><span class="line"><span class="javascript">      that.init();</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 窗口发生变化，重新初始化编辑器，这里做节流操作</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;resize&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        that.editorE.destroy(); <span class="comment">// 销毁</span></span></span><br><span class="line"><span class="javascript">        that.editorE = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">        that.init();</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">beforeDestroy</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 销毁编辑器</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.editorE.destroy();</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.editorE = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">init</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> that = <span class="built_in">this</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">/* 实例化 */</span></span></span><br><span class="line"><span class="javascript">        that.editorE = <span class="keyword">new</span> WangEditor(that.$refs.editor);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 设置富文本的高度</span></span></span><br><span class="line"><span class="javascript">        that.editorE.config.height = that.height;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 取消自动 focus</span></span></span><br><span class="line"><span class="javascript">        that.editorE.config.focus = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 配置菜单</span></span></span><br><span class="line"><span class="javascript">        that.editorE.config.menus = that.needConfig.menus;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 配置字体</span></span></span><br><span class="line"><span class="javascript">        that.editorE.config.fontNames = that.needConfig.fontNames;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 默认提示</span></span></span><br><span class="line"><span class="javascript">        that.editorE.config.placeholder = that.placeholder;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 配置全屏功能 默认全屏</span></span></span><br><span class="line"><span class="javascript">        that.editorE.config.showFullScreen = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//  配置行高</span></span></span><br><span class="line"><span class="javascript">        that.editorE.config.lineHeights = that.needConfig.lineHeights;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 设置菜单栏提示为上标还是下标</span></span></span><br><span class="line"><span class="javascript">        that.editorE.config.menuTooltipPosition = <span class="string">&#x27;down&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 配置element ui message提示</span></span></span><br><span class="line"><span class="javascript">        that.editorE.config.customAlert = <span class="function">(<span class="params">s, t</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">switch</span> (t) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">case</span> <span class="string">&#x27;success&#x27;</span>:</span></span><br><span class="line"><span class="javascript">              that.$message.success(s);</span></span><br><span class="line"><span class="javascript">              <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">case</span> <span class="string">&#x27;info&#x27;</span>:</span></span><br><span class="line"><span class="javascript">              that.$message.info(s);</span></span><br><span class="line"><span class="javascript">              <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">case</span> <span class="string">&#x27;warning&#x27;</span>:</span></span><br><span class="line"><span class="javascript">              that.$message.warning(s);</span></span><br><span class="line"><span class="javascript">              <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">case</span> <span class="string">&#x27;error&#x27;</span>:</span></span><br><span class="line"><span class="javascript">              that.$message.error(s);</span></span><br><span class="line"><span class="javascript">              <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">default</span>:</span></span><br><span class="line"><span class="javascript">              that.$message.info(s);</span></span><br><span class="line"><span class="javascript">              <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">          &#125;</span></span><br><span class="line"><span class="javascript">        &#125;;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 创建编辑器</span></span></span><br><span class="line"><span class="javascript">        that.editorE.create();</span></span><br><span class="line"><span class="javascript">        that.$nextTick(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 绑定值</span></span></span><br><span class="line"><span class="javascript">          that.editorE.txt.html(<span class="built_in">this</span>.value);</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 监控编辑器内容变化，同步更新到文本 向上传递更新</span></span></span><br><span class="line"><span class="javascript">        that.editorE.config.onchange = <span class="function"><span class="keyword">function</span>(<span class="params">html</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          that.$emit(<span class="string">&#x27;input&#x27;</span>, html);</span></span><br><span class="line"><span class="javascript">        &#125;;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  ::v-deep .w-e-toolbar &#123;</span></span><br><span class="line"><span class="css">    border-color: <span class="number">#d4d4d4</span> <span class="meta">!important</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  ::v-deep .w-e-text-container &#123;</span></span><br><span class="line"><span class="css">    border-color: <span class="number">#d4d4d4</span> <span class="meta">!important</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h4><h5 id="①-使用wangeditor实现的上传方式"><a href="#①-使用wangeditor实现的上传方式" class="headerlink" title="① 使用wangeditor实现的上传方式"></a>① 使用<code>wangeditor</code>实现的上传方式</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 图片上传</span></span><br><span class="line"><span class="comment">// 隐藏插入网络图片功能</span></span><br><span class="line">that.editorE.config.showLinkImg = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 配置 server 接口地址</span></span><br><span class="line">that.editorE.config.uploadImgServer = <span class="string">&#x27;xxx&#x27;</span>;</span><br><span class="line"><span class="comment">// 默认限制图片大小是 5M</span></span><br><span class="line">that.editorE.config.uploadImgMaxSize = that.uploadImgMaxSize * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"><span class="comment">// 限制图片类型</span></span><br><span class="line">that.editorE.config.uploadImgAccept = that.needConfig.uploadImgAccept;</span><br><span class="line"><span class="comment">// 自定义上传的参数</span></span><br><span class="line">that.editorE.config.uploadFileName = <span class="string">&#x27;file&#x27;</span>;</span><br><span class="line"><span class="comment">// 自定义头部token信息</span></span><br><span class="line">that.editorE.config.uploadImgHeaders = &#123;&#125;;</span><br><span class="line"><span class="comment">// 限制一次最多能传几张图片</span></span><br><span class="line">that.editorE.config.uploadImgMaxLength = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 设置请求参数</span></span><br><span class="line">that.editorE.config.uploadImgParams = &#123;&#125;;</span><br><span class="line"><span class="comment">// timeout 即上传接口等待的最大时间，默认是 10 秒钟，可以自己修改</span></span><br><span class="line">that.editorE.config.uploadImgTimeout = <span class="number">10</span> * <span class="number">1000</span>;</span><br><span class="line"><span class="comment">// 回调函数</span></span><br><span class="line">that.editorE.config.uploadImgHooks = &#123;</span><br><span class="line">  <span class="comment">// 上传图片之前</span></span><br><span class="line">  <span class="function"><span class="title">before</span>(<span class="params">xhr</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(xhr);</span><br><span class="line">    <span class="comment">// 可阻止图片上传</span></span><br><span class="line">    <span class="comment">// return &#123;</span></span><br><span class="line">    <span class="comment">//   prevent: true,</span></span><br><span class="line">    <span class="comment">//   msg: &#x27;需要提示给用户的错误信息&#x27;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 图片上传并返回了结果，图片插入已成功</span></span><br><span class="line">  <span class="function"><span class="title">success</span>(<span class="params">xhr</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;success&#x27;</span>, xhr);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 图片上传并返回了结果，但图片插入时出错了</span></span><br><span class="line">  <span class="function"><span class="title">fail</span>(<span class="params">xhr, editor, resData</span>)</span> &#123;</span><br><span class="line">    that.$message.error(<span class="string">&#x27;插入图片失败&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;fail&#x27;</span>, resData);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 上传图片出错，一般为 http 请求的错误</span></span><br><span class="line">  <span class="function"><span class="title">error</span>(<span class="params">xhr, editor, resData</span>)</span> &#123;</span><br><span class="line">    that.$message.error(<span class="string">&#x27;上传图片出错&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;error&#x27;</span>, xhr, resData);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 上传图片超时</span></span><br><span class="line">  <span class="function"><span class="title">timeout</span>(<span class="params">xhr</span>)</span> &#123;</span><br><span class="line">    that.$message.error(<span class="string">&#x27;上传图片超时&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;timeout&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 图片上传并返回了结果，想要自己把图片插入到编辑器中</span></span><br><span class="line">  <span class="comment">// 例如服务器端返回的不是 &#123; errno: 0, data: [...] &#125; 这种格式，可使用 customInsert</span></span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">customInsert</span>(<span class="params">insertImgFn, result</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// result 即服务端返回的接口</span></span><br><span class="line">    <span class="keyword">const</span> imgUrl = result.url;</span><br><span class="line">    <span class="comment">// insertImgFn 可把图片插入到编辑器，传入图片 src ，执行函数即可</span></span><br><span class="line">    insertImgFn(imgUrl);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="②自己实现图片上传，如上传图片到某个云服务器"><a href="#②自己实现图片上传，如上传图片到某个云服务器" class="headerlink" title="②自己实现图片上传，如上传图片到某个云服务器"></a>②自己实现图片上传，如上传图片到某个云服务器</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">that.editorE.config.customUploadImg = <span class="function"><span class="keyword">function</span> (<span class="params">resultFiles, insertImgFn</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// resultFiles 是 input 中选中的文件列表</span></span><br><span class="line">    <span class="comment">// insertImgFn 是获取图片 url 后，插入到编辑器的方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上传图片，返回结果，将图片插入到编辑器中</span></span><br><span class="line">    insertImgFn(imgUrl)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="视频上传"><a href="#视频上传" class="headerlink" title="视频上传"></a>视频上传</h4><p>视频上传建议不要使用<code>wangeditor</code>自带的上传方式，改用自定义上传。因为视频文件普遍较大，且自带的上传回调函数里面，没有上传中阶段的信息反馈，让用户等得很焦虑。所以这里自定义视频上传，给用户一个上传进度反馈。代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;position: relative&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;editor&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;dataUploading&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tips-progress&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- el-ui进度条组件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-progress</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;width: 60%&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:text-inside</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:stroke-width</span>=<span class="string">&quot;18&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:percentage</span>=<span class="string">&quot;uploadProgress&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:color</span>=<span class="string">&quot;customColors&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">status</span>=<span class="string">&quot;success&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-progress</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  ......</span></span><br><span class="line"><span class="javascript">  </span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">editorE</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 编辑器的对象</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">dataUploading</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">uploadProgress</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">customColors</span>: [</span></span><br><span class="line"><span class="javascript">          &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">color</span>: <span class="string">&#x27;#f56c6c&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">percentage</span>: <span class="number">20</span></span></span><br><span class="line"><span class="javascript">          &#125;,</span></span><br><span class="line"><span class="javascript">          &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">color</span>: <span class="string">&#x27;#e6a23c&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">percentage</span>: <span class="number">40</span></span></span><br><span class="line"><span class="javascript">          &#125;,</span></span><br><span class="line"><span class="javascript">          &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">color</span>: <span class="string">&#x27;#5cb87a&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">percentage</span>: <span class="number">60</span></span></span><br><span class="line"><span class="javascript">          &#125;,</span></span><br><span class="line"><span class="javascript">          &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">color</span>: <span class="string">&#x27;#1989fa&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">percentage</span>: <span class="number">80</span></span></span><br><span class="line"><span class="javascript">          &#125;,</span></span><br><span class="line"><span class="javascript">          &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">color</span>: <span class="string">&#x27;#6f7ad3&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">percentage</span>: <span class="number">100</span></span></span><br><span class="line"><span class="javascript">          &#125;</span></span><br><span class="line"><span class="javascript">        ] </span></span><br><span class="line"><span class="javascript">        ......  </span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">      </span></span><br><span class="line"><span class="javascript">    ......</span></span><br><span class="line"><span class="javascript">      </span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">init</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        ......</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 视频上传</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 隐藏插入网络视频功能</span></span></span><br><span class="line"><span class="javascript">        that.editorE.config.showLinkVideo = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 限制视频大小</span></span></span><br><span class="line"><span class="javascript">        that.editorE.config.uploadVideoMaxSize = that.uploadVideoMaxSize * <span class="number">1024</span> * <span class="number">1024</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 限制视频类型</span></span></span><br><span class="line"><span class="javascript">        that.editorE.config.uploadVideoAccept = that.needConfig.uploadVideoAccept;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 自定义视频上传</span></span></span><br><span class="line"><span class="javascript">        that.editorE.config.customUploadVideo = <span class="function"><span class="keyword">function</span>(<span class="params">resultFiles, insertVideoFn</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          that.uploadProgress = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 显示进度条</span></span></span><br><span class="line"><span class="javascript">          that.dataUploading = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">const</span> file = resultFiles[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">          axios.post(<span class="string">&#x27;xxxx&#x27;</span>, file, &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">onUploadProgress</span>: <span class="function"><span class="params">progressEvent</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">              <span class="comment">// 视频上传进度</span></span></span><br><span class="line"><span class="javascript">              <span class="keyword">const</span> percent = (progressEvent.loaded / progressEvent.total * <span class="number">100</span>) | <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">              that.uploadProgress = percent</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">          &#125;)</span></span><br><span class="line"><span class="javascript">            .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">const</span> &#123; status, data &#125; = res;</span></span><br><span class="line"><span class="javascript">              <span class="comment">// 不管上没上传成功都关闭进度条</span></span></span><br><span class="line"><span class="javascript">              that.dataUploading = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">               <span class="keyword">if</span>(status === <span class="number">201</span>)&#123;</span></span><br><span class="line"><span class="javascript">                   insertVideoFn(data.url);</span></span><br><span class="line"><span class="javascript">               &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                   that.$message.error(<span class="string">&#x27;视频上传失败&#x27;</span>);</span></span><br><span class="line"><span class="javascript">               &#125;</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript">        &#125;;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.tips-progress</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">    <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">line-height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span></span><br><span class="line"><span class="css">    <span class="attribute">z-index</span>: <span class="number">100000</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">    <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="css">    <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  ::v-deep .w-e-toolbar &#123;</span></span><br><span class="line"><span class="css">    border-color: <span class="number">#d4d4d4</span> <span class="meta">!important</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  ::v-deep .w-e-text-container &#123;</span></span><br><span class="line"><span class="css">    border-color: <span class="number">#d4d4d4</span> <span class="meta">!important</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="自定义菜单-一键排版"><a href="#自定义菜单-一键排版" class="headerlink" title="自定义菜单-一键排版"></a>自定义菜单-一键排版</h4><p>怎么自定义菜单可以看官方文档，这里不多说，在<code>WangEditor</code>文件夹下新建<code>wLayoutMenu.js</code>文件，写入以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> E <span class="keyword">from</span> <span class="string">&#x27;wangeditor&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; $, BtnMenu &#125; = E;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置默认样式</span></span><br><span class="line"><span class="keyword">const</span> initPStyle = <span class="string">&#x27;text-indent: 2em; font-size: 20px !important; line-height: 1.5; font-family: 仿宋&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">wLayoutMenu</span> <span class="keyword">extends</span> <span class="title">BtnMenu</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">editor</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// data-title属性表示当鼠标悬停在该按钮上时提示该按钮的功能简述</span></span><br><span class="line">    <span class="keyword">const</span> $elem = $(<span class="string">&#x27;&lt;div class=&quot;w-e-menu&quot; style=&quot;width: 80px;font-weight: bold;color: #999&quot; data-title=&quot;一键排版&quot;&gt;一键排版&lt;/div&gt;&#x27;</span>);</span><br><span class="line">    <span class="built_in">super</span>($elem, editor);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">clickHandler</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取富文本编辑区的DOM</span></span><br><span class="line">    <span class="keyword">const</span> childDomArr = <span class="built_in">this</span>.editor.$textElem.elems[<span class="number">0</span>].childNodes;</span><br><span class="line">    <span class="keyword">if</span> (childDomArr.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      childDomArr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 富文本编辑的内容默认外层都是由p标签包容，所以直接在p标签上进行设置默认排版的样式</span></span><br><span class="line">        <span class="keyword">if</span> (item.nodeName === <span class="string">&#x27;P&#x27;</span>) &#123;</span><br><span class="line">          item.style.cssText = initPStyle;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (item.childNodes.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="comment">// 遍历找到子元素中存在img标签的内容进行设置默认样式</span></span><br><span class="line">          item.childNodes.forEach(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (child.localName === <span class="string">&#x27;img&#x27;</span>) &#123;</span><br><span class="line">              <span class="comment">// 获取原图width、height</span></span><br><span class="line">              <span class="keyword">const</span> width = child.width;</span><br><span class="line">              <span class="keyword">const</span> height = child.height;</span><br><span class="line">              <span class="keyword">const</span> ratio = width / height;</span><br><span class="line">              <span class="keyword">const</span> setW = <span class="number">600</span>;</span><br><span class="line">              <span class="keyword">let</span> setH = <span class="number">0</span>; <span class="comment">// 等比计算</span></span><br><span class="line">              <span class="keyword">if</span> (setW / setH !== ratio) &#123;</span><br><span class="line">                setH = setW / ratio;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment">// 给img标签设置行内样式</span></span><br><span class="line">              child.setAttribute(<span class="string">&#x27;width&#x27;</span>, setW);</span><br><span class="line">              child.setAttribute(<span class="string">&#x27;height&#x27;</span>, setH);</span><br><span class="line">              child.style.cssText = <span class="string">&#x27;text-align: center&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 菜单是否被激活（如果不需要，这个函数可以空着）</span></span><br><span class="line">  <span class="function"><span class="title">tryChangeActive</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>index.vue</code>引入使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wLayoutMenu <span class="keyword">from</span> <span class="string">&#x27;./wLayoutMenu&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">init() &#123;</span><br><span class="line">......</span><br><span class="line">// 注册菜单</span><br><span class="line">    that.editorE.menus.extend(&#x27;shortcutLayout&#x27;, wLayoutMenu);</span><br><span class="line">    // 配置菜单</span><br><span class="line">    that.editorE.config.menus = that.needConfig.menus;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>config.js</code> 中配置一键排版的位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">menus: [</span><br><span class="line">  <span class="string">&#x27;head&#x27;</span>, <span class="comment">// 标题</span></span><br><span class="line">  <span class="string">&#x27;bold&#x27;</span>, <span class="comment">// 加粗</span></span><br><span class="line">  <span class="string">&#x27;fontSize&#x27;</span>, <span class="comment">// 字号</span></span><br><span class="line">  <span class="string">&#x27;fontName&#x27;</span>, <span class="comment">// 字体</span></span><br><span class="line">  <span class="string">&#x27;italic&#x27;</span>, <span class="comment">// 斜体</span></span><br><span class="line">  <span class="string">&#x27;underline&#x27;</span>, <span class="comment">// 下划线</span></span><br><span class="line">  <span class="string">&#x27;strikeThrough&#x27;</span>, <span class="comment">// 删除线</span></span><br><span class="line">  <span class="string">&#x27;indent&#x27;</span>, <span class="comment">// 缩进</span></span><br><span class="line">  <span class="string">&#x27;lineHeight&#x27;</span>, <span class="comment">// 行高</span></span><br><span class="line">  <span class="string">&#x27;foreColor&#x27;</span>, <span class="comment">// 字体颜色</span></span><br><span class="line">  <span class="string">&#x27;backColor&#x27;</span>, <span class="comment">// 背景色</span></span><br><span class="line">  <span class="string">&#x27;link&#x27;</span>, <span class="comment">// 链接</span></span><br><span class="line">  <span class="string">&#x27;list&#x27;</span>, <span class="comment">// 序列</span></span><br><span class="line">  <span class="comment">// &#x27;todo&#x27;, // 待办事项</span></span><br><span class="line">  <span class="string">&#x27;justify&#x27;</span>, <span class="comment">// 对齐</span></span><br><span class="line">  <span class="string">&#x27;quote&#x27;</span>, <span class="comment">// 引用</span></span><br><span class="line">  <span class="comment">// &#x27;emoticon&#x27;, // 表情</span></span><br><span class="line">  <span class="string">&#x27;image&#x27;</span>, <span class="comment">// 图片</span></span><br><span class="line">  <span class="string">&#x27;video&#x27;</span>, <span class="comment">// 视频</span></span><br><span class="line">  <span class="comment">// &#x27;table&#x27;, // 表格</span></span><br><span class="line">  <span class="comment">// &#x27;code&#x27;, // 代码</span></span><br><span class="line">  <span class="string">&#x27;splitLine&#x27;</span>, <span class="comment">// 分割线</span></span><br><span class="line">  <span class="string">&#x27;undo&#x27;</span>, <span class="comment">// 撤销</span></span><br><span class="line">  <span class="string">&#x27;redo&#x27;</span> <span class="comment">// 恢复</span></span><br><span class="line">  <span class="string">&#x27;shortcutLayout&#x27;</span> <span class="comment">// 一键排版  放在最后面，也可以放在其他位置</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure><h4 id="粘贴处理"><a href="#粘贴处理" class="headerlink" title="粘贴处理"></a>粘贴处理</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关闭粘贴样式的过滤</span></span><br><span class="line">that.editorE.config.pasteFilterStyle = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 自定义处理粘贴的文本内容</span></span><br><span class="line">that.editorE.config.pasteTextHandle = <span class="function"><span class="keyword">function</span>(<span class="params">pasteStr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 对粘贴的文本进行处理，然后返回处理后的结果</span></span><br><span class="line">  <span class="comment">// 这里处理图片，给粘贴的图片宽度设置一个最大宽度100%，视频同理  </span></span><br><span class="line">  <span class="keyword">const</span> htmlDom = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">  htmlDom.innerHTML = pasteStr;</span><br><span class="line">  <span class="keyword">const</span> imgDomArr = htmlDom.querySelectorAll(<span class="string">&#x27;img[src]&#x27;</span>);</span><br><span class="line">  imgDomArr.forEach(<span class="function"><span class="params">img</span> =&gt;</span> &#123;</span><br><span class="line">    img.style.maxWidth = <span class="string">&#x27;100%&#x27;</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> result = htmlDom.innerHTML;</span><br><span class="line">  htmlDom.remove();</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="el-ui-form表单内容验证"><a href="#el-ui-form表单内容验证" class="headerlink" title="el-ui form表单内容验证"></a><code>el-ui</code> <code>form</code>表单内容验证</h4><p>参考<code>el-input</code>组件，当输入框失去焦点的时候要触发表单验证，怎么触发我们这个自定义组件的表单验证呢？我们可以写入以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt; script &gt;</span><br><span class="line">    <span class="keyword">import</span> emitter <span class="keyword">from</span> <span class="string">&#x27;element-ui/src/mixins/emitter&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">mixins</span>: [emitter],</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            ......</span><br><span class="line">            <span class="attr">focused</span>: <span class="literal">false</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="function"><span class="title">init</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            .......</span><br><span class="line">            <span class="comment">// 失去焦点处理</span></span><br><span class="line">            that.editorE.config.onblur = <span class="function"><span class="keyword">function</span> (<span class="params">newHtml</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 用于el-form表单验证，具体参考el-input</span></span><br><span class="line">                <span class="keyword">if</span> (that.focused) &#123;</span><br><span class="line">                    that.focused = <span class="literal">false</span>;</span><br><span class="line">                    that.dispatch(<span class="string">&#x27;ElFormItem&#x27;</span>, <span class="string">&#x27;el.form.blur&#x27;</span>, [newHtml]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">// 聚焦处理</span></span><br><span class="line">            that.editorE.config.onfocus = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                that.focused = <span class="literal">true</span>;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; &lt;</span><br><span class="line">/script&gt;</span><br></pre></td></tr></table></figure><p>三、完整代码</p><h4 id="config-js"><a href="#config-js" class="headerlink" title="config.js"></a><code>config.js</code></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> defaultConfig = &#123;</span><br><span class="line">  <span class="attr">menus</span>: [</span><br><span class="line">    <span class="string">&#x27;head&#x27;</span>, <span class="comment">// 标题</span></span><br><span class="line">    <span class="string">&#x27;bold&#x27;</span>, <span class="comment">// 加粗</span></span><br><span class="line">    <span class="string">&#x27;fontSize&#x27;</span>, <span class="comment">// 字号</span></span><br><span class="line">    <span class="string">&#x27;fontName&#x27;</span>, <span class="comment">// 字体</span></span><br><span class="line">    <span class="string">&#x27;italic&#x27;</span>, <span class="comment">// 斜体</span></span><br><span class="line">    <span class="string">&#x27;underline&#x27;</span>, <span class="comment">// 下划线</span></span><br><span class="line">    <span class="string">&#x27;strikeThrough&#x27;</span>, <span class="comment">// 删除线</span></span><br><span class="line">    <span class="string">&#x27;indent&#x27;</span>, <span class="comment">// 缩进</span></span><br><span class="line">    <span class="string">&#x27;lineHeight&#x27;</span>, <span class="comment">// 行高</span></span><br><span class="line">    <span class="string">&#x27;foreColor&#x27;</span>, <span class="comment">// 字体颜色</span></span><br><span class="line">    <span class="string">&#x27;backColor&#x27;</span>, <span class="comment">// 背景色</span></span><br><span class="line">    <span class="string">&#x27;link&#x27;</span>, <span class="comment">// 链接</span></span><br><span class="line">    <span class="string">&#x27;list&#x27;</span>, <span class="comment">// 序列</span></span><br><span class="line">    <span class="comment">// &#x27;todo&#x27;, // 待办事项</span></span><br><span class="line">    <span class="string">&#x27;justify&#x27;</span>, <span class="comment">// 对齐</span></span><br><span class="line">    <span class="string">&#x27;quote&#x27;</span>, <span class="comment">// 引用</span></span><br><span class="line">    <span class="comment">// &#x27;emoticon&#x27;, // 表情</span></span><br><span class="line">    <span class="string">&#x27;image&#x27;</span>, <span class="comment">// 图片</span></span><br><span class="line">    <span class="string">&#x27;video&#x27;</span>, <span class="comment">// 视频</span></span><br><span class="line">    <span class="comment">// &#x27;table&#x27;, // 表格</span></span><br><span class="line">    <span class="comment">// &#x27;code&#x27;, // 代码</span></span><br><span class="line">    <span class="string">&#x27;splitLine&#x27;</span>, <span class="comment">// 分割线</span></span><br><span class="line">    <span class="string">&#x27;undo&#x27;</span>, <span class="comment">// 撤销</span></span><br><span class="line">    <span class="string">&#x27;redo&#x27;</span> <span class="comment">// 恢复</span></span><br><span class="line">    <span class="comment">// &#x27;shortcutLayout&#x27; // 一键排版</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">fontNames</span>: [</span><br><span class="line">    <span class="string">&#x27;黑体&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;仿宋&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;楷体&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;宋体&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;微软雅黑&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Arial&#x27;</span></span><br><span class="line">  ], <span class="comment">// 字体</span></span><br><span class="line">  <span class="attr">lineHeights</span>: [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1.15&#x27;</span>, <span class="string">&#x27;1.6&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;2.5&#x27;</span>, <span class="string">&#x27;3&#x27;</span>],</span><br><span class="line">  <span class="attr">uploadImgAccept</span>: [<span class="string">&#x27;jpg&#x27;</span>, <span class="string">&#x27;jpeg&#x27;</span>, <span class="string">&#x27;png&#x27;</span>, <span class="string">&#x27;gif&#x27;</span>, <span class="string">&#x27;bmp&#x27;</span>, <span class="string">&#x27;webp&#x27;</span>], <span class="comment">// 限制图片类型</span></span><br><span class="line">  <span class="attr">uploadVideoAccept</span>: [<span class="string">&#x27;mp4&#x27;</span>] <span class="comment">// 限制视频类型</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  defaultConfig</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="wLayoutMenu-js"><a href="#wLayoutMenu-js" class="headerlink" title="wLayoutMenu.js"></a><code>wLayoutMenu.js</code></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> E <span class="keyword">from</span> <span class="string">&#x27;wangeditor&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; $, BtnMenu &#125; = E;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置默认样式</span></span><br><span class="line"><span class="keyword">const</span> initPStyle = <span class="string">&#x27;text-indent: 2em; font-size: 20px !important; line-height: 1.5; font-family: 仿宋&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">wLayoutMenu</span> <span class="keyword">extends</span> <span class="title">BtnMenu</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">editor</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// data-title属性表示当鼠标悬停在该按钮上时提示该按钮的功能简述</span></span><br><span class="line">    <span class="keyword">const</span> $elem = $(<span class="string">&#x27;&lt;div class=&quot;w-e-menu&quot; style=&quot;width: 80px;font-weight: bold;color: #999&quot; data-title=&quot;一键排版&quot;&gt;一键排版&lt;/div&gt;&#x27;</span>);</span><br><span class="line">    <span class="built_in">super</span>($elem, editor);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">clickHandler</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取富文本编辑区的DOM</span></span><br><span class="line">    <span class="keyword">const</span> childDomArr = <span class="built_in">this</span>.editor.$textElem.elems[<span class="number">0</span>].childNodes;</span><br><span class="line">    <span class="keyword">if</span> (childDomArr.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      childDomArr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 富文本编辑的内容默认外层都是由p标签包容，所以直接在p标签上进行设置默认排版的样式</span></span><br><span class="line">        <span class="keyword">if</span> (item.nodeName === <span class="string">&#x27;P&#x27;</span>) &#123;</span><br><span class="line">          item.style.cssText = initPStyle;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (item.childNodes.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="comment">// 遍历找到子元素中存在img标签的内容进行设置默认样式</span></span><br><span class="line">          item.childNodes.forEach(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (child.localName === <span class="string">&#x27;img&#x27;</span>) &#123;</span><br><span class="line">              <span class="comment">// 获取原图width、height</span></span><br><span class="line">              <span class="keyword">const</span> width = child.width;</span><br><span class="line">              <span class="keyword">const</span> height = child.height;</span><br><span class="line">              <span class="keyword">const</span> ratio = width / height;</span><br><span class="line">              <span class="keyword">const</span> setW = <span class="number">600</span>;</span><br><span class="line">              <span class="keyword">let</span> setH = <span class="number">0</span>; <span class="comment">// 等比计算</span></span><br><span class="line">              <span class="keyword">if</span> (setW / setH !== ratio) &#123;</span><br><span class="line">                setH = setW / ratio;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment">// 给img标签设置行内样式</span></span><br><span class="line">              child.setAttribute(<span class="string">&#x27;width&#x27;</span>, setW);</span><br><span class="line">              child.setAttribute(<span class="string">&#x27;height&#x27;</span>, setH);</span><br><span class="line">              child.style.cssText = <span class="string">&#x27;text-align: center&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 菜单是否被激活（如果不需要，这个函数可以空着）</span></span><br><span class="line">  <span class="function"><span class="title">tryChangeActive</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="index-vue"><a href="#index-vue" class="headerlink" title="index.vue"></a><code>index.vue</code></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;position: relative&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;pareStyle&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;editor&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;dataUploading&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tips-progress&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">el-progress</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">style</span>=<span class="string">&quot;width: 60%&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">:text-inside</span>=<span class="string">&quot;true&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">:stroke-width</span>=<span class="string">&quot;$px(18)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">:percentage</span>=<span class="string">&quot;uploadProgress&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">:color</span>=<span class="string">&quot;customColors&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">status</span>=<span class="string">&quot;success&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">el-progress</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">import</span> WangEditor <span class="keyword">from</span> <span class="string">&#x27;wangeditor&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">&#x27;./config&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">import</span> wLayoutMenu <span class="keyword">from</span> <span class="string">&#x27;./wLayoutMenu&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">import</span> emitter <span class="keyword">from</span> <span class="string">&#x27;element-ui/src/mixins/emitter&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">name</span>: <span class="string">&#x27;WangEditor&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">mixins</span>: [emitter],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">editorE</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 编辑器的对象</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">dataUploading</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">uploadProgress</span>: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">pareStyle</span>: &#123;&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">focused</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">customColors</span>: [</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">color</span>: <span class="string">&#x27;#f56c6c&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">percentage</span>: <span class="number">20</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">color</span>: <span class="string">&#x27;#e6a23c&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">percentage</span>: <span class="number">40</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">color</span>: <span class="string">&#x27;#5cb87a&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">percentage</span>: <span class="number">60</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">color</span>: <span class="string">&#x27;#1989fa&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">percentage</span>: <span class="number">80</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">color</span>: <span class="string">&#x27;#6f7ad3&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">percentage</span>: <span class="number">100</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        ]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">value</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">type</span>: <span class="built_in">String</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">height</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">type</span>: <span class="built_in">Number</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">default</span>: <span class="number">200</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// M</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">uploadImgMaxSize</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">type</span>: <span class="built_in">Number</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">default</span>: <span class="number">5</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// M</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">uploadVideoMaxSize</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">type</span>: <span class="built_in">Number</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">default</span>: <span class="number">500</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">placeholder</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">type</span>: <span class="built_in">String</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">default</span>: <span class="string">&#x27;请输入内容...&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">config</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">default</span>: <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="keyword">return</span> &#123;&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="function"><span class="title">needConfig</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">return</span> &#123; ...config.defaultConfig, ...this.config &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">watch</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="function"><span class="title">value</span>(<span class="params">val</span>)</span> &#123; <span class="comment">// 普通的watch监听</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">if</span> (val !== <span class="built_in">this</span>.editorE.txt.html()) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="built_in">this</span>.editorE.txt.html(val);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">const</span> that = <span class="built_in">this</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// 初始化编辑框</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      that.init();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;resize&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.destroy();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE = <span class="literal">null</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.pareStyle = &#123;&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.init();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">beforeDestroy</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// 销毁编辑器</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.editorE.destroy();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.editorE = <span class="literal">null</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="function"><span class="title">init</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">const</span> that = <span class="built_in">this</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">/* 实例化 */</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE = <span class="keyword">new</span> WangEditor(that.$refs.editor);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 设置富文本的高度</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.config.height = that.height;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 取消自动 focus</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.config.focus = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 注册菜单</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.menus.extend(<span class="string">&#x27;shortcutLayout&#x27;</span>, wLayoutMenu);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 配置菜单</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.config.menus = that.needConfig.menus;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 配置字体</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.config.fontNames = that.needConfig.fontNames;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 默认提示</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.config.placeholder = that.placeholder;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 配置全屏功能 默认全屏</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.config.showFullScreen = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//  配置行高</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.config.lineHeights = that.needConfig.lineHeights;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 设置菜单栏提示为上标还是下标</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.config.menuTooltipPosition = <span class="string">&#x27;down&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 配置element ui message提示</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.config.customAlert = <span class="function">(<span class="params">s, t</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="keyword">switch</span> (t) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">case</span> <span class="string">&#x27;success&#x27;</span>:</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              that.$message.success(s);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="keyword">break</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">case</span> <span class="string">&#x27;info&#x27;</span>:</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              that.$message.info(s);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="keyword">break</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">case</span> <span class="string">&#x27;warning&#x27;</span>:</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              that.$message.warning(s);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="keyword">break</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">case</span> <span class="string">&#x27;error&#x27;</span>:</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              that.$message.error(s);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="keyword">break</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">default</span>:</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              that.$message.info(s);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="keyword">break</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 图片上传</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 隐藏插入网络图片功能</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.config.showLinkImg = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 默认限制图片大小是 5M</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.config.uploadImgMaxSize = that.uploadImgMaxSize * <span class="number">1024</span> * <span class="number">1024</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 限制图片类型</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.config.uploadImgAccept = that.needConfig.uploadImgAccept;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 限制一次最多能传几张图片</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.config.uploadImgMaxLength = <span class="number">1</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.config.customUploadImg = <span class="function"><span class="keyword">function</span>(<span class="params">resultFiles, insertImgFn</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          that.uploadProgress = <span class="number">0</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          that.dataUploading = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="keyword">const</span> file = resultFiles[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          axios.post(<span class="string">&#x27;xxxx&#x27;</span>, file, &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">onUploadProgress</span>: <span class="function"><span class="params">progressEvent</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="comment">// 图片上传进度</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="keyword">const</span> percent = (progressEvent.loaded / progressEvent.total * <span class="number">100</span>) | <span class="number">0</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              that.uploadProgress = percent</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="keyword">const</span> &#123; status, data &#125; = res;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="comment">// 不管上没上传成功都关闭进度条</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">              that.dataUploading = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">               <span class="keyword">if</span>(status === <span class="number">201</span>)&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                   insertImgFn(data.url);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">               &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                   that.$message.error(<span class="string">&#x27;图片上传失败&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">               &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;);  </span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 视频上传</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 隐藏插入网络视频功能</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.config.showLinkVideo = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 限制视频大小</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.config.uploadVideoMaxSize = that.uploadVideoMaxSize * <span class="number">1024</span> * <span class="number">1024</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 限制视频类型</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.config.uploadVideoAccept = that.needConfig.uploadVideoAccept;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 自定义视频上传，由于视频一般较大，需要显示进度，就不用编辑器定义的上传了</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.config.customUploadVideo = <span class="function"><span class="keyword">function</span>(<span class="params">resultFiles, insertVideoFn</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          that.uploadProgress = <span class="number">0</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          that.dataUploading = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="keyword">const</span> file = resultFiles[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          axios.post(<span class="string">&#x27;xxxx&#x27;</span>, file, &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">onUploadProgress</span>: <span class="function"><span class="params">progressEvent</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="comment">// 视频上传进度</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="keyword">const</span> percent = (progressEvent.loaded / progressEvent.total * <span class="number">100</span>) | <span class="number">0</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              that.uploadProgress = percent</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="keyword">const</span> &#123; status, data &#125; = res;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="comment">// 不管上没上传成功都关闭进度条</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">              that.dataUploading = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">               <span class="keyword">if</span>(status === <span class="number">201</span>)&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                   insertVideoFn(data.url);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">               &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                   that.$message.error(<span class="string">&#x27;视频上传失败&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">               &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;);  </span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 粘贴处理</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 关闭粘贴样式的过滤</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.config.pasteFilterStyle = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 自定义处理粘贴的文本内容</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.config.pasteTextHandle = <span class="function"><span class="keyword">function</span>(<span class="params">pasteStr</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="comment">// 对粘贴的文本进行处理，然后返回处理后的结果</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="keyword">const</span> htmlDom = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          htmlDom.innerHTML = pasteStr;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="keyword">const</span> imgDomArr = htmlDom.querySelectorAll(<span class="string">&#x27;img[src]&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          imgDomArr.forEach(<span class="function"><span class="params">img</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            img.style.maxWidth = <span class="string">&#x27;100%&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="keyword">const</span> result = htmlDom.innerHTML;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          htmlDom.remove();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="keyword">return</span> result;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 创建编辑器</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.create();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.$nextTick(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="keyword">const</span> offsetHeight = that.$refs.editor.offsetHeight;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="keyword">const</span> offsetWidth = that.$refs.editor.offsetWidth;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          that.pareStyle = &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">height</span>: <span class="string">`<span class="subst">$&#123;offsetHeight&#125;</span>px`</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">width</span>: <span class="string">`<span class="subst">$&#123;offsetWidth&#125;</span>px`</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          that.editorE.txt.html(<span class="built_in">this</span>.value);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 监控变化，同步更新到文本 向上传递更新</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.config.onchange = <span class="function"><span class="keyword">function</span>(<span class="params">html</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          that.$emit(<span class="string">&#x27;input&#x27;</span>, html);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 失去焦点处理</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.config.onblur = <span class="function"><span class="keyword">function</span>(<span class="params">newHtml</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="comment">// 用于el-form表单验证，具体参考el-input</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="keyword">if</span> (that.focused) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            that.focused = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            that.dispatch(<span class="string">&#x27;ElFormItem&#x27;</span>, <span class="string">&#x27;el.form.blur&#x27;</span>, [newHtml]);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 聚焦处理</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.config.onfocus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          that.focused = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="selector-class">.tips-progress</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">position</span>: absolute;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">left</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">top</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">height</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">line-height</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">z-index</span>: <span class="number">100000</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">display</span>: flex;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">align-items</span>: center;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">justify-content</span>: center;</span></span></span><br><span class="line"><span class="css"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">  ::v-deep .w-e-toolbar &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">    border-color: <span class="number">#d4d4d4</span> <span class="meta">!important</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">  ::v-deep .w-e-text-container &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">    border-color: <span class="number">#d4d4d4</span> <span class="meta">!important</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;&lt;code&gt;wangEditor4&lt;/code&gt; —— 轻量级 web 富文本编辑器，配置方便，使用简单。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;官网：&lt;a href=&quot;https://www.wangeditor.com/&quot;&gt;www.wangeditor.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;文档：&lt;a href=&quot;https://www.wangeditor.com/v4/&quot;&gt;www.wangeditor.com/v4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;源码：&lt;a href=&quot;https://github.com/wangeditor-team/wangeditor&quot;&gt;github.com/wangeditor-team/wangEditor&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="vue插件" scheme="https://www.wjnba.top/categories/vue%E6%8F%92%E4%BB%B6/"/>
    
    
    <category term="vue" scheme="https://www.wjnba.top/tags/vue/"/>
    
    <category term="wangeditor" scheme="https://www.wjnba.top/tags/wangeditor/"/>
    
  </entry>
  
  <entry>
    <title>node版本管理工具-nvm</title>
    <link href="https://www.wjnba.top/articles/20220607dd3496e5f8bd.html"/>
    <id>https://www.wjnba.top/articles/20220607dd3496e5f8bd.html</id>
    <published>2022-06-07T03:40:40.000Z</published>
    <updated>2023-09-04T05:53:25.486Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很多情况下，为了适应工作、学习我们需要在一个电脑里使用不同版本的<code>node</code>，在切换使用频繁的情况下，就会陷入卸载 ↔ 安装的怪圈，这时候你需要一个趁手的版本管理工具。</p><span id="more"></span><h2 id="安装nvm"><a href="#安装nvm" class="headerlink" title="安装nvm"></a>安装nvm</h2><ol><li><p>首先需要卸载已安装的<code>node.js</code>，卸载完成后，请检查环境变量，如果还有<code>node.js</code>，请去掉，保证系统已经无任何<code>node.js</code>残留。</p></li><li><p>下载地址： <a href="https://github.com/coreybutler/nvm-windows/releases">https://github.com/coreybutler/nvm-windows/releases</a></p><p><img src="https://pic.wjnba.top/img/202206071244482.png" alt="image-20220607123427502"></p></li></ol><p><strong>nvm-setup.zip：安装版（推荐），傻瓜式安装</strong></p><blockquote><p>安装时有两个路径选择（尽量不要出现中文）：</p></blockquote><p><strong>nvm-noinstall.zip：绿色免安装，但需要环境变量配置</strong></p><h2 id="nvm-基本命令使用"><a href="#nvm-基本命令使用" class="headerlink" title="nvm 基本命令使用"></a>nvm 基本命令使用</h2><blockquote><p>命令行工具输入命令即可</p></blockquote><h4 id="版本查看，安装完成后，执行该命令，查看安装版本"><a href="#版本查看，安装完成后，执行该命令，查看安装版本" class="headerlink" title="版本查看，安装完成后，执行该命令，查看安装版本"></a>版本查看，安装完成后，执行该命令，查看安装版本</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nvm v</span><br><span class="line"><span class="comment">//或</span></span><br><span class="line">nvm version </span><br></pre></td></tr></table></figure><h4 id="查看所有可安装-Node-版本号"><a href="#查看所有可安装-Node-版本号" class="headerlink" title="查看所有可安装 Node 版本号"></a>查看所有可安装 <code>Node</code> 版本号</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm list available</span><br></pre></td></tr></table></figure><h4 id="node-安装"><a href="#node-安装" class="headerlink" title="node 安装"></a><code>node</code> 安装</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装最新版本</span></span><br><span class="line">nvm install node</span><br><span class="line"></span><br><span class="line"><span class="comment">//安装指定版本（推荐）</span></span><br><span class="line">nvm install <span class="number">14.8</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//安装指定版本，指定操作系统位数（32/64），不指定使用系统默认</span></span><br><span class="line">nvm install <span class="number">14.8</span><span class="number">.0</span> <span class="number">64</span></span><br></pre></td></tr></table></figure><h4 id="查看已安装node版本"><a href="#查看已安装node版本" class="headerlink" title="查看已安装node版本"></a>查看已安装<code>node</code>版本</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nvm ls</span><br><span class="line"><span class="comment">//或</span></span><br><span class="line">nvm list</span><br></pre></td></tr></table></figure><h4 id="使用指定版本node"><a href="#使用指定版本node" class="headerlink" title="使用指定版本node"></a>使用指定版本<code>node</code></h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 14.17.4 是版本号</span></span><br><span class="line">nvm <span class="keyword">use</span> <span class="number">14.17</span>.<span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定操作系统位数（32/64），不指定使用系统默认</span></span><br><span class="line">nvm <span class="keyword">use</span> <span class="number">14.17</span>.<span class="number">4</span> <span class="number">64</span></span><br></pre></td></tr></table></figure><p><img src="https://pic.wjnba.top/img/202206071244933.png" alt="image-20220607124132696"></p><p>已安装<code>node</code>列表</p><h4 id="卸载已安装node"><a href="#卸载已安装node" class="headerlink" title="卸载已安装node"></a>卸载已安装<code>node</code></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 16.12.0 是版本号</span></span><br><span class="line">nvm uninstall <span class="number">16.12</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是，不同版本的node所使用的全局模块需要分别进行安装</p></blockquote><h4 id="其它命令"><a href="#其它命令" class="headerlink" title="其它命令"></a>其它命令</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//显示node是运行在32位还是64位</span></span><br><span class="line">nvm arch</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启nvm，并设置使用最新node 版本</span></span><br><span class="line">nvm <span class="keyword">on</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭nvm，node 命令不可使用，执行此命令后在执行 use 会重新开起</span></span><br><span class="line">nvm off </span><br><span class="line"></span><br><span class="line"><span class="comment">//设置下载代理，不加可选参数url，显示当前代理，将url设置为none则移除代理</span></span><br><span class="line">nvm proxy [url]</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置node镜像，默认是https://nodejs.org/dist/，可在nvm安装目录→settings.txt中查看</span></span><br><span class="line">nvm node_mirror [url] </span><br><span class="line"></span><br><span class="line"><span class="comment">//设置npm镜像，https://github.com/npm/cli/archive/，可在nvm安装目录→settings.txt中查看</span></span><br><span class="line">nvm npm_mirror [url] </span><br><span class="line"></span><br><span class="line"><span class="comment">//设置不同版本node存储目录，不写path查看当前node存储目录</span></span><br><span class="line">nvm root [path] </span><br></pre></td></tr></table></figure><h4 id="nvm-install-下载安装过慢"><a href="#nvm-install-下载安装过慢" class="headerlink" title="nvm install 下载安装过慢"></a><code>nvm install</code> 下载安装过慢</h4><p>可以使用命令（上边提到的），配置镜像，也可以直接打开<code>nvm</code>安装目录→<code>settings.txt</code> 添加下边代码：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">node_mirror:</span> <span class="symbol">https:</span>/<span class="regexp">/npm.taobao.org/mirrors</span><span class="regexp">/node/</span></span><br><span class="line"><span class="symbol">npm_mirror:</span> <span class="symbol">https:</span>/<span class="regexp">/npm.taobao.org/mirrors</span><span class="regexp">/npm/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;很多情况下，为了适应工作、学习我们需要在一个电脑里使用不同版本的&lt;code&gt;node&lt;/code&gt;，在切换使用频繁的情况下，就会陷入卸载 ↔ 安装的怪圈，这时候你需要一个趁手的版本管理工具。&lt;/p&gt;</summary>
    
    
    
    <category term="node" scheme="https://www.wjnba.top/categories/node/"/>
    
    
    <category term="node" scheme="https://www.wjnba.top/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>图片懒加载</title>
    <link href="https://www.wjnba.top/articles/20220530043ea0d0d7dd.html"/>
    <id>https://www.wjnba.top/articles/20220530043ea0d0d7dd.html</id>
    <published>2022-05-30T03:37:21.000Z</published>
    <updated>2023-09-04T05:53:25.488Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h2><p>懒加载是一种网页性能优化的方式，它能极大的提升用户体验。图片一直是影响网页性能的主要元凶，现在一张图片超过几兆已经是很经常的事了。如果每次进入页面就请求所有的图片资源，那么可能等图片加载出来用户也早就走了。所以进入页面的时候，只请求可视区域的图片资源。</p><span id="more"></span><p>总结出来就是：</p><ul><li>减少资源的加载，页面启动只加载首屏的图片，这样能明显减少了服务器的压力和流量，也能够减小浏览器的负担。</li><li>防止并发加载的资源过多而阻塞 <code>js</code> 的加载，影响整个网站的启动，影响用户体验</li><li>浪费用户的流量，有些用户并不想全部看完，全部加载会耗费大量流量。</li></ul><p><strong>原理</strong></p><p>图片懒加载的原理就是暂时不设置图片的 <code>src</code> 属性，而是将图片的 <code>url</code> 隐藏起来，比如先写在 <code>src</code> 里面，等当前图片是否到了可视区域再将图片真实的 <code>url</code> 放进 <code>src</code> 属性里面，从而实现图片的延迟加载。</p><h3 id="通过监听-scroll-事件实现懒加载"><a href="#通过监听-scroll-事件实现懒加载" class="headerlink" title="通过监听 scroll 事件实现懒加载"></a>通过监听 <code>scroll</code> 事件实现懒加载</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lazyload</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> viewHeight = <span class="built_in">document</span>.body.clientHeight <span class="comment">//获取可视区高度</span></span><br><span class="line">  <span class="keyword">let</span> imgs = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;img[src]&#x27;</span>)</span><br><span class="line">  imgs.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (item.dataset.src === <span class="string">&#x27;&#x27;</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于获得页面中某个元素的左，上，右和下分别相对浏览器视窗的位置</span></span><br><span class="line">    <span class="keyword">let</span> rect = item.getBoundingClientRect()</span><br><span class="line">    <span class="keyword">if</span> (rect.bottom &gt;= <span class="number">0</span> &amp;&amp; rect.top &lt; viewHeight) &#123;</span><br><span class="line">      item.src = item.dataset.src</span><br><span class="line">      item.removeAttribute(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以使用节流优化一下</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;scroll&#x27;</span>, lazyload)</span><br></pre></td></tr></table></figure><p>通过上面例子的实现，我们要实现懒加载都需要去监听 <code>scroll</code> 事件，尽管我们可以通过函数节流的方式来阻止高频率的执行函数,但是我们还是需要去计算 <code>scrollTop</code>,<code>offsetHeight</code> 等属性，有没有简单的不需要计算这些属性的方式呢，答案是有的—-<code>IntersectionObserver</code></p><h3 id="IntersectionObserver实现懒加载"><a href="#IntersectionObserver实现懒加载" class="headerlink" title="IntersectionObserver实现懒加载"></a><code>IntersectionObserver</code>实现懒加载</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> imgs = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;img[src]&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">rootMargin</span>: <span class="string">&#x27;0px&#x27;</span>,</span><br><span class="line">  <span class="attr">threshold</span>: <span class="number">0</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> observer = <span class="keyword">new</span> IntersectionObserver(<span class="function">(<span class="params">entries, self</span>) =&gt;</span> &#123;</span><br><span class="line">  entries.forEach(<span class="function">(<span class="params">entry</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (entry.isIntersecting) &#123;</span><br><span class="line">      <span class="keyword">let</span> img = entry.target</span><br><span class="line">      <span class="keyword">let</span> src = img.dataset.src</span><br><span class="line">      <span class="keyword">if</span> (src) &#123;</span><br><span class="line">        img.src = src</span><br><span class="line">        img.removeAttribute(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 解除观察</span></span><br><span class="line">      self.unobserve(entry.target)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;, config)</span><br><span class="line"></span><br><span class="line">imgs.forEach(<span class="function">(<span class="params">image</span>) =&gt;</span> &#123;</span><br><span class="line">  observer.observe(image)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="在vue中使用IntersectionObserver实现图片懒加载指令"><a href="#在vue中使用IntersectionObserver实现图片懒加载指令" class="headerlink" title="在vue中使用IntersectionObserver实现图片懒加载指令"></a>在<code>vue</code>中使用<code>IntersectionObserver</code>实现图片懒加载指令</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(<span class="string">&#x27;img-lazy&#x27;</span>, &#123;</span><br><span class="line"><span class="function"><span class="title">inserted</span>(<span class="params">el, binding</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 观察当前元素</span></span><br><span class="line">    el.src = <span class="built_in">require</span>(<span class="string">&#x27;~/assets/image/public/placeholder-graphic.png&#x27;</span>); <span class="comment">// 默认图片（占位图）</span></span><br><span class="line">    <span class="keyword">const</span> defaultImg = <span class="built_in">require</span>(<span class="string">&#x27;~/assets/image/public/load-error-img.png&#x27;</span>); <span class="comment">// 图片加载失败图片</span></span><br><span class="line">    <span class="keyword">const</span> observer = <span class="keyword">new</span> IntersectionObserver(<span class="function">(<span class="params">[&#123; isIntersecting &#125;]</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (isIntersecting) &#123;</span><br><span class="line">        <span class="comment">// 停止观察</span></span><br><span class="line">        observer.unobserve(el);</span><br><span class="line">        <span class="comment">// 若图片加载失败，使用该默认图片</span></span><br><span class="line">        el.onerror = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">          el.src = defaultImg;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 组件使用指令传来的值进行操作，赋值于src</span></span><br><span class="line">        el.src = binding.value;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      <span class="comment">// 进入区域立即观察</span></span><br><span class="line">      <span class="attr">threshold</span>: <span class="number">0</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 挂载元素，只进行一次观察：开始观察</span></span><br><span class="line">    observer.observe(el);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>在<code>vue</code>中调用</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-img-lazy</span>=<span class="string">&quot;src&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;图片懒加载&quot;&gt;&lt;a href=&quot;#图片懒加载&quot; class=&quot;headerlink&quot; title=&quot;图片懒加载&quot;&gt;&lt;/a&gt;图片懒加载&lt;/h2&gt;&lt;p&gt;懒加载是一种网页性能优化的方式，它能极大的提升用户体验。图片一直是影响网页性能的主要元凶，现在一张图片超过几兆已经是很经常的事了。如果每次进入页面就请求所有的图片资源，那么可能等图片加载出来用户也早就走了。所以进入页面的时候，只请求可视区域的图片资源。&lt;/p&gt;</summary>
    
    
    
    <category term="深入浅出js" scheme="https://www.wjnba.top/categories/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAjs/"/>
    
    
    <category term="vue" scheme="https://www.wjnba.top/tags/vue/"/>
    
    <category term="性能优化" scheme="https://www.wjnba.top/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>javascript数组去重</title>
    <link href="https://www.wjnba.top/articles/20220527c46d680b5322.html"/>
    <id>https://www.wjnba.top/articles/20220527c46d680b5322.html</id>
    <published>2022-05-27T08:45:41.000Z</published>
    <updated>2023-09-04T05:53:25.486Z</updated>
    
    <content type="html"><![CDATA[<h2 id="双层循环"><a href="#双层循环" class="headerlink" title="双层循环"></a>双层循环</h2><p>使用双层嵌套循环是最原始的方法：</p><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// res用来存储结果</span></span><br><span class="line">    <span class="keyword">var</span> res = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, arrayLen = array.length; i &lt; arrayLen; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>, resLen = res.length; j &lt; resLen; j++ ) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array[i] === res[j]) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果array[i]是唯一的，那么执行完循环，j等于resLen</span></span><br><span class="line">        <span class="keyword">if</span> (j === resLen) &#123;</span><br><span class="line">            res.push(array[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(unique(array)); <span class="comment">// [&#x27;a&#x27;,&#x27;b&#x27;]</span></span><br></pre></td></tr></table></figure><p>外层循环 <code>array</code> 内层循环 <code>res</code>, 当 <code>array[i]</code> 和 <code>res[j]</code> 相等时，跳出循环。否则说明元素唯一，这时 <code>j === resLen</code> 成立，将此元素添加到 <code>res</code> 中。</p><h2 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h2><p>使用 <code>indexOf</code> 可以返回某个元素在数组中的索引，不存在则返回 <code>-1</code>，可以用来判断某个值在数组中是否存在。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> res = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = array.length; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> current = array[i];</span><br><span class="line">        <span class="keyword">if</span> (res.indexOf(current) === -<span class="number">1</span>) &#123;</span><br><span class="line">            res.push(current)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(unique(array));</span><br></pre></td></tr></table></figure><h2 id="排序后去重"><a href="#排序后去重" class="headerlink" title="排序后去重"></a>排序后去重</h2><p>试想我们先将要去重的数组使用 <code>sort</code> 方法排序后，相同的值就会被排在一起，然后我们就可以只判断当前元素与上一个元素是否相同，相同就说明重复，不相同就添加进 <code>res</code>，让我们写个 <code>demo</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;1&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> res = [];</span><br><span class="line">    <span class="keyword">var</span> sortedArray = array.concat().sort();</span><br><span class="line">    <span class="keyword">var</span> seen;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = sortedArray.length; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="comment">// 如果是第一个元素或者相邻的元素不相同</span></span><br><span class="line">        <span class="keyword">if</span> (!i || seen !== sortedArray[i]) &#123;</span><br><span class="line">            res.push(sortedArray[i])</span><br><span class="line">        &#125;</span><br><span class="line">        seen = sortedArray[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(unique(array));</span><br></pre></td></tr></table></figure><p>如果我们对一个已经排好序的数组去重，这种方法效率肯定高于使用 <code>indexOf</code>。</p><h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><p><code>ES5</code> 提供了 <code>filter</code> 方法，我们可以用来简化外层循环：</p><p>比如使用 <code>indexOf</code> 的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;1&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> res = array.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array.indexOf(item) === index;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(unique(array));</span><br></pre></td></tr></table></figure><p>排序去重的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;1&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> array.concat().sort().filter(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !index || item !== array[index - <span class="number">1</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(unique(array));</span><br></pre></td></tr></table></figure><h2 id="Object-键值对"><a href="#Object-键值对" class="headerlink" title="Object 键值对"></a>Object 键值对</h2><p>这种方法是利用一个空的 <code>Object</code> 对象，我们把数组的值存成 <code>Object</code> 的 <code>key</code> 值，比如 <code>Object[value1] = true</code>，在判断另一个值的时候，如果 <code>Object[value2]</code>存在的话，就说明该值是重复的。示例代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;1&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> array.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obj.hasOwnProperty(item) ? <span class="literal">false</span> : (obj[item] = <span class="literal">true</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(unique(array)); <span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure><p>我们可以发现，是有问题的，因为 1 和 ‘1’ 是不同的，但是这种方法会判断为同一个值，这是因为对象的键值只能是字符串，所以我们可以使用 <code>typeof item + item</code> 拼成字符串作为 <code>key</code> 值来避免这个问题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;1&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> array.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obj.hasOwnProperty(<span class="keyword">typeof</span> item + item) ? <span class="literal">false</span> : (obj[<span class="keyword">typeof</span> item + item] = <span class="literal">true</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(unique(array)); <span class="comment">// [1, 2, &quot;1&quot;]</span></span><br></pre></td></tr></table></figure><p>然而，即便如此，我们依然无法正确区分出两个对象，比如 <code>&#123;value: 1&#125;</code> 和 <code>&#123;value: 2&#125;</code>，因为 <code>typeof item + item</code> 的结果都会是 <code>object[object Object]</code>，不过我们可以使用 <code>JSON.stringify</code> 将对象序列化：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [&#123;<span class="attr">value</span>: <span class="number">1</span>&#125;, &#123;<span class="attr">value</span>: <span class="number">1</span>&#125;, &#123;<span class="attr">value</span>: <span class="number">2</span>&#125;];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> array.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> item + <span class="built_in">JSON</span>.stringify(item))</span><br><span class="line">        <span class="keyword">return</span> obj.hasOwnProperty(<span class="keyword">typeof</span> item + <span class="built_in">JSON</span>.stringify(item)) ? <span class="literal">false</span> : (obj[<span class="keyword">typeof</span> item + <span class="built_in">JSON</span>.stringify(item)] = <span class="literal">true</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(unique(array)); <span class="comment">// [&#123;value: 1&#125;, &#123;value: 2&#125;]</span></span><br></pre></td></tr></table></figure><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><p>随着 <code>ES6</code> 的到来，去重的方法又有了进展，比如我们可以使用 <code>Set</code> 和 <code>Map</code> 数据结构，以 <code>Set</code> 为例，<code>ES6</code> 提供了新的数据结构 <code>Set</code>。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p><p>是不是感觉就像是为去重而准备的？让我们来写一版：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;1&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(array));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(unique(array)); <span class="comment">// [1, 2, &quot;1&quot;]</span></span><br></pre></td></tr></table></figure><p>甚至可以再简化下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [...new <span class="built_in">Set</span>(array)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以再简化下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> unique = <span class="function">(<span class="params">a</span>) =&gt;</span> [...new <span class="built_in">Set</span>(a)]</span><br></pre></td></tr></table></figure><p>此外，如果用 Map 的话：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> seen = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">    <span class="keyword">return</span> arr.filter(<span class="function">(<span class="params">a</span>) =&gt;</span> !seen.has(a) &amp;&amp; seen.set(a, <span class="number">1</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="特殊类型比较"><a href="#特殊类型比较" class="headerlink" title="特殊类型比较"></a>特殊类型比较</h2><p>去重的方法就到此结束了，然而要去重的元素类型可能是多种多样，除了例子中简单的 1 和 ‘1’ 之外，其实还有 <code>null</code>、<code>undefined</code>、<code>NaN</code>、对象等，那么对于这些元素，之前的这些方法的去重结果又是怎样呢？</p><p>在此之前，先让我们先看几个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str1 == str2); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str1 === str2); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> == <span class="literal">null</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> === <span class="literal">null</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">undefined</span> == <span class="literal">undefined</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">undefined</span> === <span class="literal">undefined</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> == <span class="literal">NaN</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> === <span class="literal">NaN</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/a/</span> == <span class="regexp">/a/</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/a/</span> === <span class="regexp">/a/</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(&#123;&#125; == &#123;&#125;); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(&#123;&#125; === &#123;&#125;); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>那么，对于这样一个数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&#x27;1&#x27;</span>), <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&#x27;1&#x27;</span>), <span class="regexp">/a/</span>, <span class="regexp">/a/</span>, <span class="literal">NaN</span>, <span class="literal">NaN</span>];</span><br></pre></td></tr></table></figure><p>以上各种方法去重的结果到底是什么样的呢？</p><p>我特地整理了一个列表，我们重点关注下对象和 <code>NaN</code> 的去重情况：</p><div class="table-container"><table><thead><tr><th>方法</th><th>结果</th><th>说明</th></tr></thead><tbody><tr><td>for循环</td><td>[1, “1”, null, undefined, String, String, /a/, /a/, NaN, NaN]</td><td>对象和 NaN 不去重</td></tr><tr><td>indexOf</td><td>[1, “1”, null, undefined, String, String, /a/, /a/, NaN, NaN]</td><td>对象和 NaN 不去重</td></tr><tr><td>sort</td><td>[/a/, /a/, “1”, 1, String, 1, String, NaN, NaN, null, undefined]</td><td>对象和 NaN 不去重 数字 1 也不去重</td></tr><tr><td>filter + indexOf</td><td>[1, “1”, null, undefined, String, String, /a/, /a/]</td><td>对象不去重 NaN 会被忽略掉</td></tr><tr><td>filter + sort</td><td>[/a/, /a/, “1”, 1, String, 1, String, NaN, NaN, null, undefined]</td><td>对象和 NaN 不去重 数字 1 不去重</td></tr><tr><td>优化后的键值对方法</td><td>[1, “1”, null, undefined, String, /a/, NaN]</td><td>全部去重</td></tr><tr><td>Set</td><td>[1, “1”, null, undefined, String, String, /a/, /a/, NaN]</td><td>对象不去重 NaN 去重</td></tr></tbody></table></div><p>想了解为什么会出现以上的结果，看两个 <code>demo</code> 便能明白：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo1</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="literal">NaN</span>];</span><br><span class="line">arr.indexOf(<span class="literal">NaN</span>); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><p><code>indexOf</code> 底层还是使用 <code>===</code> 进行判断，因为 <code>NaN ==== NaN</code> 的结果为 <code>false</code>，所以使用 <code>indexOf</code> 查找不到 <code>NaN</code> 元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(array));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(unique([<span class="literal">NaN</span>, <span class="literal">NaN</span>])) <span class="comment">// [NaN]</span></span><br></pre></td></tr></table></figure><p><code>Set</code> 认为尽管 <code>NaN === NaN</code> 为 <code>false</code>，但是这两个元素是重复的。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;双层循环&quot;&gt;&lt;a href=&quot;#双层循环&quot; class=&quot;headerlink&quot; title=&quot;双层循环&quot;&gt;&lt;/a&gt;双层循环&lt;/h2&gt;&lt;p&gt;使用双层嵌套循环是最原始的方法：&lt;/p&gt;</summary>
    
    
    
    <category term="深入浅出js" scheme="https://www.wjnba.top/categories/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAjs/"/>
    
    
    <category term="javascript" scheme="https://www.wjnba.top/tags/javascript/"/>
    
    <category term="数据类型" scheme="https://www.wjnba.top/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>节流与防抖</title>
    <link href="https://www.wjnba.top/articles/20220523205e2283eab8.html"/>
    <id>https://www.wjnba.top/articles/20220523205e2283eab8.html</id>
    <published>2022-05-23T03:01:21.000Z</published>
    <updated>2023-09-04T05:53:25.488Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h2><blockquote><p>防抖是延迟执行，而节流是间隔执行，函数节流即每隔一段时间就执行一次，实现原理为 设置一个定时器，约定XX毫秒后执行事件，如果时间到了，那么执行函数并重置定时器，和防抖的区别在于，防抖每次触发事件都重置定时器，而节流在定时器到时间后再清空定时器。函数防抖的情况下，函数将一直推迟执行，造成不会被执行的效果；函数节流的情况下，函数将每个 <code>n</code> 秒执行一次。</p></blockquote><span id="more"></span><h2 id="一、防抖"><a href="#一、防抖" class="headerlink" title="一、防抖"></a>一、防抖</h2><p>在src目录下创建一个名为<code>utils</code>的文件夹，在文件夹下新建一个名为<code>util.js</code>的文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 防抖：一定时间内，只有最后一次操作，再过wait毫秒后才执行函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>func 要执行的回调函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>wait 延时的时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>immediate 是否立即执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> timeout = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait = <span class="number">500</span>, immediate = <span class="literal">false</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 清除定时器</span></span><br><span class="line">  <span class="keyword">if</span> (timeout !== <span class="literal">null</span>) <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">  <span class="comment">// 立即执行，此类情况一般用不到</span></span><br><span class="line">  <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">    <span class="keyword">const</span> callNow = !timeout;</span><br><span class="line">    timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      timeout = <span class="literal">null</span>;</span><br><span class="line">    &#125;, wait);</span><br><span class="line">    <span class="keyword">if</span> (callNow) <span class="keyword">typeof</span> func === <span class="string">&#x27;function&#x27;</span> &amp;&amp; func();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 设置定时器，当最后一次操作后，timeout不会再被清除，所以在延时wait毫秒后执行func回调方法</span></span><br><span class="line">    timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">typeof</span> func === <span class="string">&#x27;function&#x27;</span> &amp;&amp; func();</span><br><span class="line">    &#125;, wait);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、节流"><a href="#二、节流" class="headerlink" title="二、节流"></a>二、节流</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 节流：在一定时间内，只能触发一次</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>func 要执行的回调函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>wait 延时的时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>immediate 是否立即执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> timer,</span><br><span class="line">  flag;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait = <span class="number">500</span>, immediate = <span class="literal">true</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">      flag = <span class="literal">true</span>;</span><br><span class="line">      <span class="comment">// 如果是立即执行，则在wait毫秒内开始时执行</span></span><br><span class="line">      <span class="keyword">typeof</span> func === <span class="string">&#x27;function&#x27;</span> &amp;&amp; func();</span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">      &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">      flag = <span class="literal">true</span>;</span><br><span class="line">      <span class="comment">// 如果是非立即执行，则在wait毫秒内的结束处执行</span></span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">typeof</span> func === <span class="string">&#x27;function&#x27;</span> &amp;&amp; func();</span><br><span class="line">      &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、在vue中使用"><a href="#三、在vue中使用" class="headerlink" title="三、在vue中使用"></a>三、在vue中使用</h2><p>我们可以在<code>main.js</code>通过<code>mixin</code>全局混入来避免在每个<code>vue</code>文件里重复引入防抖、节流方法，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    debounce,</span><br><span class="line">    throttle</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/util&#x27;</span>;</span><br><span class="line"></span><br><span class="line">Vue.mixin(&#123;</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="comment">/** 防抖：一定时间内，只有最后一次操作，再过wait毫秒后才执行函数</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param </span>func 要执行的回调函数</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param </span>wait 延时的时间</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param </span>immediate 是否立即执行</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="title">fixDebounce</span>(<span class="params">func, wait = <span class="number">500</span>, immediate = <span class="literal">false</span></span>)</span> &#123;</span><br><span class="line">            debounce(func, wait, immediate);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">/** 节流：在一定时间内，只能触发一次</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param </span>func 要执行的回调函数</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param </span>wait 延时的时间</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param </span>immediate 是否立即执行</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="title">fixThrottle</span>(<span class="params">func, wait = <span class="number">500</span>, immediate = <span class="literal">true</span></span>)</span> &#123;</span><br><span class="line">            throttle(func, wait, immediate);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    router,</span><br><span class="line">    store,</span><br><span class="line">    <span class="attr">render</span>: <span class="function">(<span class="params">h</span>) =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="调用"><a href="#调用" class="headerlink" title="调用:"></a>调用:</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">&quot;searchKey&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">prefix-icon</span>=<span class="string">&quot;el-icon-search&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">input</span>=<span class="string">&quot;fixDebounce(fun,1000)&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">placeholder</span>=<span class="string">&quot;写字楼/小区/学校等&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>fixDebounce(fun,1000)</code>中，<code>fun</code>后面不能加<code>()</code></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;概念：&quot;&gt;&lt;a href=&quot;#概念：&quot; class=&quot;headerlink&quot; title=&quot;概念：&quot;&gt;&lt;/a&gt;概念：&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;防抖是延迟执行，而节流是间隔执行，函数节流即每隔一段时间就执行一次，实现原理为 设置一个定时器，约定XX毫秒后执行事件，如果时间到了，那么执行函数并重置定时器，和防抖的区别在于，防抖每次触发事件都重置定时器，而节流在定时器到时间后再清空定时器。函数防抖的情况下，函数将一直推迟执行，造成不会被执行的效果；函数节流的情况下，函数将每个 &lt;code&gt;n&lt;/code&gt; 秒执行一次。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="深入浅出js" scheme="https://www.wjnba.top/categories/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAjs/"/>
    
    
    <category term="javascript" scheme="https://www.wjnba.top/tags/javascript/"/>
    
    <category term="vue" scheme="https://www.wjnba.top/tags/vue/"/>
    
  </entry>
  
</feed>
