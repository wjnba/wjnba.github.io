<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>uniapp安卓手机无线真机调试</title>
      <link href="/articles/2023083076b3a1d0ac73.html"/>
      <url>/articles/2023083076b3a1d0ac73.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://pic.wjnba.top/img/202308301602929.png" alt="202308301432378"></p><p>从 <code>Android 11</code> 开始USB调试新增了无线调试功能，需要搭配 <code>adb 30.0.0</code> 及以上版本使用，请确认你的系统和<code>adb</code>是否符合要求。</p><h2 id="一、下载adb"><a href="#一、下载adb" class="headerlink" title="一、下载adb"></a>一、下载<code>adb</code></h2><p><code>adb</code>下载地址： <a href="https://developer.android.google.cn/studio/releases/platform-tools">SDK Platform Tools版本说明</a></p><p>选择对应的系统版本，我是windows系统，所以选择如下：</p><p><img src="https://pic.wjnba.top/img/202308301457052.png" alt="image-20230830145726373"></p><p>下载解压完之后放到<code>HBuilderX</code>的<code>adbs</code>文件夹里 重命名为<code>34.0.0</code> </p><p><img src="https://pic.wjnba.top/img/202308301503762.png" alt="image-20230830150354324"></p><h2 id="二、在手机上打开无线调试"><a href="#二、在手机上打开无线调试" class="headerlink" title="二、在手机上打开无线调试"></a>二、在手机上打开无线调试</h2><p>手机连上<code>wifi</code>，保证手机和电脑在同一局域网，进入开发者选项开启无线调试</p><p><img src="https://pic.wjnba.top/img/202308301513412.png" alt="image-20230830151126101" style="zoom:50%;" /></p><p><img src="https://pic.wjnba.top/img/202308301541876.png" alt="image-20230830151243039" style="zoom:50%;" /></p><h2 id="三、使用配对码配对"><a href="#三、使用配对码配对" class="headerlink" title="三、使用配对码配对"></a>三、使用配对码配对</h2><h3 id="1、手机上点击使用配对码配对设备，查看配对码和ip地址："><a href="#1、手机上点击使用配对码配对设备，查看配对码和ip地址：" class="headerlink" title="1、手机上点击使用配对码配对设备，查看配对码和ip地址："></a>1、手机上点击使用配对码配对设备，查看配对码和ip地址：</h3><p><img src="https://pic.wjnba.top/img/202308301540471.png" alt="image-20230830152317568" style="zoom:50%;" /></p><h3 id="2、进入34-0-0-文件夹，并打开cmd窗口："><a href="#2、进入34-0-0-文件夹，并打开cmd窗口：" class="headerlink" title="2、进入34.0.0 文件夹，并打开cmd窗口："></a>2、进入<code>34.0.0</code> 文件夹，并打开<code>cmd</code>窗口：</h3><ul><li><p>使用adb pair命令和手机配对</p><p><img src="https://pic.wjnba.top/img/202308301540608.png" alt="image-20230830153230621"></p></li></ul><ul><li><p>继续使用adb connect命令连接设备</p><p><img src="https://pic.wjnba.top/img/202308301540436.png" alt="image-20230830153742605"></p></li></ul><h2 id="四、验证"><a href="#四、验证" class="headerlink" title="四、验证"></a>四、验证</h2><p><img src="https://pic.wjnba.top/img/202308301540175.png" alt="image-20230830154040142"></p>]]></content>
      
      
      <categories>
          
          <category> uniapp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uniapp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客butterfly主题cdn加载失败？那就换</title>
      <link href="/articles/202305238604b7796c2d.html"/>
      <url>/articles/202305238604b7796c2d.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>前段时间因为jsdelivr挂掉，无法访问第三方文件，导致我的博客长时间出现资源加载问题，后面更换了cdn，但有时候还是会无法加载，未从根本上解决问题。</p></blockquote><p><img src="https://pic.wjnba.top/img/202305231724882.png" alt="image-20230523172407947"></p><p>于是今天决定，把第三方文件放在本地加载，查看<a href="https://butterfly.js.org/posts/ceeb73f/?highlight=hexo+butterfly+extjs#CDN">butterfly</a>官网，看到了两种方案可供选择。</p><h2 id="1、修改third-party-provider"><a href="#1、修改third-party-provider" class="headerlink" title="1、修改third_party_provider"></a>1、修改third_party_provider</h2><p>①.找到<code>/butterfly/_comfig.yml</code>文件，找到下面部分，把标注的部分改为<code>local</code></p><p><img src="https://pic.wjnba.top/img/202305231736947.png" alt="image-20230523173623522"></p><p>②.安装<code>hexo-butterfly-extjs</code>依赖，执行</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-butterfly-extjs@1.3.4</span></span><br></pre></td></tr></table></figure><p>*注意：<code>hexo-butterfly-extjs</code>的版本要和<code>butterfly</code>对应，如果版本不对应的话，可能会导致这个主题需要的第三方依赖无法完全下载到<code>node_modules</code>，导致后面出错。当然也可以直接执行<code>npm i  依赖@版本号</code>，第三方依赖和版本号在<code>/butterfly/plugins.yml</code>。</p><p><img src="https://pic.wjnba.top/img/202305231749290.png" alt="image-20230523174943933"></p><h2 id="2、下载第三方文件到本地，修改option文件地址，覆盖原有的配置"><a href="#2、下载第三方文件到本地，修改option文件地址，覆盖原有的配置" class="headerlink" title="2、下载第三方文件到本地，修改option文件地址，覆盖原有的配置"></a>2、下载第三方文件到本地，修改option文件地址，覆盖原有的配置</h2><p><img src="https://pic.wjnba.top/img/202305231743345.png" alt="image-20230523174345684"></p><div class="table-container"><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>internal_provider</td><td>主题内部文件可选<br /> local/jsdelivr/unpkg/cdnjs/custom<br/>lcoal 为本地加载，custom 为自定义格式，需配置 custom_format<br/>注意: 如果使用的是 Dev 版，只能设置为 local</td></tr><tr><td>third_party_provider</td><td>第三方文件<br/>可选 local/jsdelivr/unpkg/cdnjs/custom<br/>lcoal 为本地加载，custom 为自定义格式，需配置 custom_format<br/>注意: 如果你选择 local 需要安装 hexo-butterfly-extjs插件</td></tr><tr><td>version</td><td>true/false 为 cdn 加上指定版本号</td></tr><tr><td>custom_format</td><td>自定义格式</td></tr><tr><td>option</td><td>你可以在这里更换部分文件,会覆盖原有的配置</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> Hexo+Gitee </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人博客 </tag>
            
            <tag> Hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现五种CSS经典布局</title>
      <link href="/articles/20230523844402ea9656.html"/>
      <url>/articles/20230523844402ea9656.html</url>
      
        <content type="html"><![CDATA[<p>页面布局是样式开发的第一步，也是 CSS 最重要的功能之一。</p><p><img src="https://pic.wjnba.top/img/202305231513264.jpg" alt="img"></p><p>常用的页面布局，其实就那么几个。下面我会介绍5个经典布局，只要掌握了它们，就能应对绝大多数常规页面。</p><h2 id="一、空间居中布局"><a href="#一、空间居中布局" class="headerlink" title="一、空间居中布局"></a>一、空间居中布局</h2><p>空间居中布局指的是，不管容器的大小，项目总是占据中心点。</p><p><img src="https://pic.wjnba.top/img/202305231515153.jpg" alt="img"></p><p>CSS 代码如下。</p><blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    place-items: center;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></blockquote><p>上面代码需要写在容器上，指定为 Grid 布局。核心代码是<code>place-items</code>属性那一行，它是一个简写形式。</p><blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">place-items: &lt;align-items&gt; &lt;justify-items&gt;;</span><br></pre></td></tr></table></figure></blockquote><p><code>align-items</code>属性控制垂直位置，<code>justify-items</code>属性控制水平位置。这两个属性的值一致时，就可以合并写成一个值。所以，<code>place-items: center;</code>等同于<code>place-items: center center;</code>。</p><p>同理，左上角布局可以写成下面这样。</p><blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">place-items: start;</span><br></pre></td></tr></table></figure></blockquote><p><img src="https://pic.wjnba.top/img/202305231513286.jpg" alt="img"></p><p>右下角布局。</p><blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">place-items: end;</span><br></pre></td></tr></table></figure></blockquote><p><img src="https://pic.wjnba.top/img/202305231513339.jpg" alt="img"></p><h2 id="二、并列式布局"><a href="#二、并列式布局" class="headerlink" title="二、并列式布局"></a>二、并列式布局</h2><p>并列式布局就是多个项目并列。</p><p><img src="https://pic.wjnba.top/img/202305231513737.jpg" alt="img"></p><p>如果宽度不够，放不下的项目就自动折行。</p><p><img src="https://pic.wjnba.top/img/202305231513563.jpg" alt="img"></p><p><img src="https://pic.wjnba.top/img/202305231515110.jpg" alt="img"></p><p>它的实现也很简单。首先，容器设置成 Flex 布局，内容居中（<code>justify-content</code>）可换行（<code>flex-wrap</code>）。</p><blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>然后，项目上面只用一行<code>flex</code>属性就够了。</p><blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">   <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">1</span> <span class="number">150px</span>;</span><br><span class="line">   <span class="attribute">margin</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p><code>flex</code>属性是<code>flex-grow</code>、<code>flex-shrink</code>、<code>flex-basis</code>这三个属性的简写形式。</p><blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flex</span>: &lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;;</span><br></pre></td></tr></table></figure></blockquote><ul><li><code>flex-basis</code>：项目的初始宽度。</li><li><code>flex-grow</code>：指定如果有多余宽度，项目是否可以扩大。</li><li><code>flex-shrink</code>：指定如果宽度不足，项目是否可以缩小。</li></ul><p><code>flex: 0 1 150px;</code>的意思就是，项目的初始宽度是150px，且不可以扩大，但是当容器宽度不足150px时，项目可以缩小。</p><p>如果写成<code>flex: 1 1 150px;</code>，就表示项目始终会占满所有宽度。</p><p><img src="https://pic.wjnba.top/img/202305231513042.jpg" alt="img"></p><p><img src="https://pic.wjnba.top/img/202305231515740.jpg" alt="img"></p><p><img src="https://pic.wjnba.top/img/202305231513940.jpg" alt="img"></p><h2 id="三、两栏式布局"><a href="#三、两栏式布局" class="headerlink" title="三、两栏式布局"></a>三、两栏式布局</h2><p>两栏式布局就是一个边栏，一个主栏。</p><p><img src="https://pic.wjnba.top/img/202305231513525.jpg" alt="img"></p><p>下面的实现是，边栏始终存在，主栏根据设备宽度，变宽或者变窄。如果希望主栏自动换到下一行，可以参考上面的”并列式布局”。</p><p><img src="https://pic.wjnba.top/img/202305231514216.jpg" alt="img"></p><p>使用 Grid，实现很容易。</p><blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid-template-<span class="attribute">columns</span>: <span class="built_in">minmax</span>(<span class="number">150px</span>, <span class="number">25%</span>) <span class="number">1</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>上面代码中，<code>grid-template-columns</code>指定页面分成两列。第一列的宽度是<code>minmax(150px, 25%)</code>，即最小宽度为<code>150px</code>，最大宽度为总宽度的25%；第二列为<code>1fr</code>，即所有剩余宽度。</p><h2 id="四、三明治布局"><a href="#四、三明治布局" class="headerlink" title="四、三明治布局"></a>四、三明治布局</h2><p>三明治布局指的是，页面在垂直方向上，分成三部分：页眉、内容区、页脚。</p><p><img src="https://pic.wjnba.top/img/202305231514618.jpg" alt="img"></p><p>这个布局会根据设备宽度，自动适应，并且不管内容区有多少内容，页脚始终在容器底部（粘性页脚）。也就是说，这个布局总是会占满整个页面高度。</p><p><img src="https://pic.wjnba.top/img/202305231514404.jpg" alt="img"></p><p>CSS 代码如下。</p><blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid-template-rows: auto <span class="number">1</span>fr auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>上面代码写在容器上面，指定采用 Grid 布局。核心代码是<code>grid-template-rows</code>那一行，指定垂直高度怎么划分，这里是从上到下分成三部分。第一部分（页眉）和第三部分（页脚）的高度都为<code>auto</code>，即本来的内容高度；第二部分（内容区）的高度为<code>1fr</code>，即剩余的所有高度，这可以保证页脚始终在容器的底部。</p><h2 id="五、圣杯布局"><a href="#五、圣杯布局" class="headerlink" title="五、圣杯布局"></a>五、圣杯布局</h2><p>圣杯布局是最常用的布局，所以被比喻为圣杯。它将页面分成五个部分，除了页眉和页脚，内容区分成左边栏、主栏、右边栏。</p><p><img src="https://pic.wjnba.top/img/202305231514073.jpg" alt="img"></p><p>这里的实现是，不管页面宽度，内容区始终分成三栏。如果宽度太窄，主栏和右边栏会看不到。如果想将这三栏改成小屏幕自动堆叠，可以参考并列式布局。</p><p><img src="https://pic.wjnba.top/img/202305231514857.jpg" alt="img"></p><p>HTML 代码如下。</p><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">main</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><p>CSS 代码如下。</p><blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid-template: auto <span class="number">1</span>fr auto / auto <span class="number">1</span>fr auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>上面代码要写在容器上面，指定采用 Grid 布局。核心代码是<code>grid-template</code>属性那一行，它是两个属性<code>grid-template-rows</code>（垂直方向）和<code>grid-template-columns</code>（水平方向）的简写形式。</p><blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grid-template: &lt;grid-template-rows&gt; / &lt;grid-template-columns&gt;</span><br></pre></td></tr></table></figure></blockquote><p><code>grid-template-rows</code>和<code>grid-template-columns</code>都是<code>auto 1fr auto</code>，就表示页面在垂直方向和水平方向上，都分成三个部分。第一部分（页眉和左边栏）和第三部分（页脚和右边栏）都是本来的内容高度（或宽度），第二部分（内容区和主栏）占满剩余的高度（或宽度）。</p>]]></content>
      
      
      <categories>
          
          <category> 深入浅出 css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谷歌浏览器书签同步到码云</title>
      <link href="/articles/2022120111ffaf80a31b.html"/>
      <url>/articles/2022120111ffaf80a31b.html</url>
      
        <content type="html"><![CDATA[<p>在我们更换电脑、或者重新安装谷歌浏览器的情况下，如果书签没有备份，原来收藏的网页就找不到了，我们需要一种手段来保存、同步书签，这时我们可以通过浏览器扩展程序配合码云来实现这个功能。</p><span id="more"></span><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h4 id="一、在码云上创建一个仓库，用来保存书签。"><a href="#一、在码云上创建一个仓库，用来保存书签。" class="headerlink" title="一、在码云上创建一个仓库，用来保存书签。"></a>一、在<a href="https://gitee.com/">码云</a>上创建一个仓库，用来保存书签。</h4><p><img src="https://pic.wjnba.top/img/202212011446255.png" alt=""></p><h4 id="二、在仓库里新建一个名为bookmarks-html的空文件。"><a href="#二、在仓库里新建一个名为bookmarks-html的空文件。" class="headerlink" title="二、在仓库里新建一个名为bookmarks.html的空文件。"></a>二、在仓库里新建一个名为<code>bookmarks.html</code>的空文件。</h4><blockquote><p>必须要创建<code>bookmarks.html</code>文件，不然推送到仓库的时候会失败。</p></blockquote><p><img src="https://pic.wjnba.top/img/202212011448166.png" alt="image-20221201144854987"></p><h4 id="三、创建私人令牌，用来推送书签文件到仓库。"><a href="#三、创建私人令牌，用来推送书签文件到仓库。" class="headerlink" title="三、创建私人令牌，用来推送书签文件到仓库。"></a>三、创建私人令牌，用来推送书签文件到仓库。</h4><p><img src="https://pic.wjnba.top/img/202212011457379.png" alt="image-20221201145712863"></p><h4 id="四、下载使用扩展程序。"><a href="#四、下载使用扩展程序。" class="headerlink" title="四、下载使用扩展程序。"></a>四、下载使用扩展程序。</h4><div class="btns rounded grid5">            <a class="button" href='https://pic.wjnba.top/file/%E8%B0%B7%E6%AD%8C%E5%90%8C%E6%AD%A5%E4%B9%A6%E7%AD%BE.zip' title='下载扩展程序'><i class='fas fa-download'></i>下载扩展程序</a>          </div><p>下载扩展程序后解压，导入到谷歌浏览器扩展程序里。</p><p><img src="https://pic.wjnba.top/img/202212011506216.png" alt="image-20221201150556766"></p><p>点击程序，向下依次填入私人令牌、用户名、仓库名、文件路径（<code>bookmarks.html</code>）、分支（<code>master</code>）,如下图所示：</p><p><img src="https://pic.wjnba.top/img/202212011509374.png" alt="image-20221201150923847"></p><p>填完后，我们就可以通过点击Upload按钮把书签同步到码云上，当更换电脑、重新安装浏览器后可通过点击Download按钮同步书签到本地了。</p>]]></content>
      
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 谷歌浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>patch-package的使用</title>
      <link href="/articles/202210170ca19cae2d60.html"/>
      <url>/articles/202210170ca19cae2d60.html</url>
      
        <content type="html"><![CDATA[<h2 id="patch-package的使用"><a href="#patch-package的使用" class="headerlink" title="patch-package的使用"></a>patch-package的使用</h2><p>在<code>vue</code>实际项目中,有时候会涉及到修改<code>node_modules</code>里面的代码，但是如果直接在本地修改<code>node_modules</code>里面的代码，会带来很大的麻烦，比如更换电脑拉取项目后，执行<code>npm install</code>安装项目依赖，会恢复到没改之前的代码，这时我们可以使用<code>patch-package</code>这个库来解决这类问题。</p><span id="more"></span><h4 id="1、安装patch-package"><a href="#1、安装patch-package" class="headerlink" title="1、安装patch-package"></a>1、安装<code>patch-package</code></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i patch-package --save-dev</span><br></pre></td></tr></table></figure><h4 id="2、修改完依赖后，运行patch-package创建patch文件"><a href="#2、修改完依赖后，运行patch-package创建patch文件" class="headerlink" title="2、修改完依赖后，运行patch-package创建patch文件"></a>2、修改完依赖后，运行<code>patch-package</code>创建<code>patch</code>文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npx patch-package 依赖名称</span><br><span class="line">例子： npx patch-package wangeditor</span><br></pre></td></tr></table></figure><p><img src="https://pic.wjnba.top/img/202210171736007.png" alt="image-20221017173642445"></p><h4 id="3、修改package-json的内容，在scripts中加入-quot-postinstall-quot-quot-patch-package-quot-，这个是为了npm-install的时候自动为依赖包打上我们改过的依赖"><a href="#3、修改package-json的内容，在scripts中加入-quot-postinstall-quot-quot-patch-package-quot-，这个是为了npm-install的时候自动为依赖包打上我们改过的依赖" class="headerlink" title="3、修改package.json的内容，在scripts中加入&quot;postinstall&quot;: &quot;patch-package&quot;，这个是为了npm install的时候自动为依赖包打上我们改过的依赖"></a>3、修改<code>package.json</code>的内容，在<code>scripts</code>中加入<code>&quot;postinstall&quot;: &quot;patch-package&quot;</code>，这个是为了<code>npm install</code>的时候自动为依赖包打上我们改过的依赖</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">　　...</span><br><span class="line">　　<span class="attr">&quot;postinstall&quot;</span>: <span class="string">&quot;patch-package&quot;</span></span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>npm install</code>命令发起后，根据工程定义决定是否执行<code>preinstall</code>，<code>install</code>、<code>postinstall</code> 是 <code>npm install</code>命令必然会执行的阶段</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> vue 插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly之主题页面</title>
      <link href="/articles/202209231b74b40eef30.html"/>
      <url>/articles/202209231b74b40eef30.html</url>
      
        <content type="html"><![CDATA[<h2 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h2><p><code>Front-matter</code> 是 <code>markdown</code> 文件最上方以 <strong>—-</strong> 分隔的区域，用于指定个别档案的变数。</p><p><code>Page Front-matter</code> 用于<strong>页面</strong>配置<br><code>Post Front-matter</code> 用于<strong>文章页</strong>配置</p><span id="more"></span><blockquote><p>如果标注可选的参数，可根据自己需要添加，不用全部都写在markdown里</p></blockquote><h3 id="Page-Front-matter"><a href="#Page-Front-matter" class="headerlink" title="Page Front-matter"></a>Page Front-matter</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line"><span class="built_in">type</span>:</span><br><span class="line">comments:</span><br><span class="line">description:</span><br><span class="line">keywords:</span><br><span class="line">top_img:</span><br><span class="line">mathjax:</span><br><span class="line">katex:</span><br><span class="line">aside:</span><br><span class="line">aplayer:</span><br><span class="line">highlight_shrink:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>写法</th><th>解释</th></tr></thead><tbody><tr><td>title</td><td>【必需】页面标题</td></tr><tr><td>date</td><td>【必需】页面创建日期</td></tr><tr><td>type</td><td>【必需】标籤、分类和友情链接三个页面需要配置</td></tr><tr><td>updated</td><td>【可选】页面更新日期</td></tr><tr><td>description</td><td>【可选】页面描述</td></tr><tr><td>keywords</td><td>【可选】页面关键字</td></tr><tr><td>comments</td><td>【可选】显示页面评论模块(默认 true)</td></tr><tr><td>top_img</td><td>【可选】页面顶部图片</td></tr><tr><td>mathjax</td><td>【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置)</td></tr></tbody></table></div><h3 id="Post-Front-matter"><a href="#Post-Front-matter" class="headerlink" title="Post Front-matter"></a>Post Front-matter</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">keywords:</span><br><span class="line">description:</span><br><span class="line">top_img:</span><br><span class="line">comments:</span><br><span class="line">cover:</span><br><span class="line">toc:</span><br><span class="line">toc_number:</span><br><span class="line">toc_style_simple:</span><br><span class="line">copyright:</span><br><span class="line">copyright_author:</span><br><span class="line">copyright_author_href:</span><br><span class="line">copyright_url:</span><br><span class="line">copyright_info:</span><br><span class="line">mathjax:</span><br><span class="line">katex:</span><br><span class="line">aplayer:</span><br><span class="line">highlight_shrink:</span><br><span class="line">aside:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>写法</th><th>解释</th></tr></thead><tbody><tr><td>title</td><td>【必需】文章标题</td></tr><tr><td>date</td><td>【必需】文章创建日期</td></tr><tr><td>updated</td><td>【可选】文章更新日期</td></tr><tr><td>tags</td><td>【可选】文章标籤</td></tr><tr><td>categories</td><td>【可选】文章分类</td></tr><tr><td>keywords</td><td>【可选】文章关键字</td></tr><tr><td>description</td><td>【可选】文章描述</td></tr><tr><td>top_img</td><td>【可选】文章顶部图片</td></tr><tr><td>cover</td><td>【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false/图片地址/留空)</td></tr><tr><td>comments</td><td>【可选】显示文章评论模块(默认 true)</td></tr><tr><td>toc</td><td>【可选】显示文章TOC(默认为设置中toc的enable配置)</td></tr><tr><td>toc_number</td><td>【可选】显示toc_number(默认为设置中toc的number配置)</td></tr><tr><td>toc_style_simple</td><td>【可选】显示 toc 简洁模式</td></tr><tr><td>copyright</td><td>【可选】显示文章版权模块(默认为设置中post_copyright的enable配置)</td></tr><tr><td>copyright_author</td><td>【可选】文章版权模块的文章作者</td></tr><tr><td>copyright_author_href</td><td>【可选】文章版权模块的文章作者链接</td></tr><tr><td>copyright_url</td><td>【可选】文章版权模块的文章连结链接</td></tr><tr><td>copyright_info</td><td>【【可选】文章版权模块的版权声明文字</td></tr><tr><td>mathjax</td><td>【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> Hexo+Gitee </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人博客 </tag>
            
            <tag> Hexo </tag>
            
            <tag> Gitee Pages </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>键盘按键键码值（keyCode）对照表</title>
      <link href="/articles/20220829cc1271ddc11d.html"/>
      <url>/articles/20220829cc1271ddc11d.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>键盘事件包含onkeypress onkeydown和onkeyup事件，其中onkeypress事件是在键盘上的某个键被按下并且释放时触发此事件的处理程序，一般用于 键盘上的单键操作。onkeydown事件是在键盘上的某个键被按下时触发此事件的处理程序，一般用于快捷键的操作。onkeyup事件是在键盘上的某个键被按下后松开时触发此事件的处理程序，一般用于快捷键的操作。</p></blockquote><span id="more"></span><h2 id="字母和数字键的键码值-keyCode"><a href="#字母和数字键的键码值-keyCode" class="headerlink" title="字母和数字键的键码值(keyCode)"></a>字母和数字键的键码值(keyCode)</h2><div class="table-container"><table><thead><tr><th style="text-align:center">按键</th><th style="text-align:center">键码</th><th style="text-align:center">按键</th><th style="text-align:center">键码</th><th style="text-align:center">按键</th><th style="text-align:center">键码</th><th style="text-align:center">按键</th><th style="text-align:center">键码</th></tr></thead><tbody><tr><td style="text-align:center">A</td><td style="text-align:center">65</td><td style="text-align:center">J</td><td style="text-align:center">74</td><td style="text-align:center">S</td><td style="text-align:center">83</td><td style="text-align:center">1</td><td style="text-align:center">49</td></tr><tr><td style="text-align:center">B</td><td style="text-align:center">66</td><td style="text-align:center">K</td><td style="text-align:center">75</td><td style="text-align:center">T</td><td style="text-align:center">84</td><td style="text-align:center">2</td><td style="text-align:center">50</td></tr><tr><td style="text-align:center">C</td><td style="text-align:center">67</td><td style="text-align:center">L</td><td style="text-align:center">76</td><td style="text-align:center">U</td><td style="text-align:center">85</td><td style="text-align:center">3</td><td style="text-align:center">51</td></tr><tr><td style="text-align:center">D</td><td style="text-align:center">68</td><td style="text-align:center">M</td><td style="text-align:center">77</td><td style="text-align:center">V</td><td style="text-align:center">86</td><td style="text-align:center">4</td><td style="text-align:center">52</td></tr><tr><td style="text-align:center">E</td><td style="text-align:center">69</td><td style="text-align:center">N</td><td style="text-align:center">78</td><td style="text-align:center">W</td><td style="text-align:center">87</td><td style="text-align:center">5</td><td style="text-align:center">53</td></tr><tr><td style="text-align:center">F</td><td style="text-align:center">70</td><td style="text-align:center">O</td><td style="text-align:center">79</td><td style="text-align:center">X</td><td style="text-align:center">88</td><td style="text-align:center">6</td><td style="text-align:center">54</td></tr><tr><td style="text-align:center">G</td><td style="text-align:center">71</td><td style="text-align:center">P</td><td style="text-align:center">80</td><td style="text-align:center">Y</td><td style="text-align:center">89</td><td style="text-align:center">7</td><td style="text-align:center">55</td></tr><tr><td style="text-align:center">H</td><td style="text-align:center">72</td><td style="text-align:center">Q</td><td style="text-align:center">81</td><td style="text-align:center">Z</td><td style="text-align:center">90</td><td style="text-align:center">8</td><td style="text-align:center">56</td></tr><tr><td style="text-align:center">I</td><td style="text-align:center">73</td><td style="text-align:center">R</td><td style="text-align:center">82</td><td style="text-align:center">0</td><td style="text-align:center">48</td><td style="text-align:center">9</td><td style="text-align:center">57</td></tr></tbody></table></div><h2 id="数字键盘上的键的键码值-keyCode"><a href="#数字键盘上的键的键码值-keyCode" class="headerlink" title="数字键盘上的键的键码值(keyCode)"></a>数字键盘上的键的键码值(keyCode)</h2><div class="table-container"><table><thead><tr><th style="text-align:center">按键</th><th style="text-align:center">键码</th><th style="text-align:center">按键</th><th style="text-align:center">键码</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">96</td><td style="text-align:center">8</td><td style="text-align:center">104</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">97</td><td style="text-align:center">9</td><td style="text-align:center">105</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">98</td><td style="text-align:center">*</td><td style="text-align:center">106</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">99</td><td style="text-align:center">+</td><td style="text-align:center">107</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">100</td><td style="text-align:center">Enter</td><td style="text-align:center">108</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">101</td><td style="text-align:center">–</td><td style="text-align:center">109</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">102</td><td style="text-align:center">.</td><td style="text-align:center">110</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">103</td><td style="text-align:center">/</td><td style="text-align:center">111</td></tr></tbody></table></div><h2 id="功能键键码值-keyCode"><a href="#功能键键码值-keyCode" class="headerlink" title="功能键键码值(keyCode)"></a>功能键键码值(keyCode)</h2><div class="table-container"><table><thead><tr><th style="text-align:center">按键</th><th style="text-align:center">键码</th><th style="text-align:center">按键</th><th style="text-align:center">键码</th></tr></thead><tbody><tr><td style="text-align:center">F1</td><td style="text-align:center">112</td><td style="text-align:center">F7</td><td style="text-align:center">118</td></tr><tr><td style="text-align:center">F2</td><td style="text-align:center">113</td><td style="text-align:center">F8</td><td style="text-align:center">119</td></tr><tr><td style="text-align:center">F3</td><td style="text-align:center">114</td><td style="text-align:center">F9</td><td style="text-align:center">120</td></tr><tr><td style="text-align:center">F4</td><td style="text-align:center">115</td><td style="text-align:center">F10</td><td style="text-align:center">121</td></tr><tr><td style="text-align:center">F5</td><td style="text-align:center">116</td><td style="text-align:center">F11</td><td style="text-align:center">122</td></tr><tr><td style="text-align:center">F6</td><td style="text-align:center">117</td><td style="text-align:center">F12</td><td style="text-align:center">123</td></tr></tbody></table></div><h2 id="控制键键码值-keyCode"><a href="#控制键键码值-keyCode" class="headerlink" title="控制键键码值(keyCode)"></a>控制键键码值(keyCode)</h2><div class="table-container"><table><thead><tr><th style="text-align:center">按键</th><th style="text-align:center">键码</th><th style="text-align:center">按键</th><th style="text-align:center">键码</th><th style="text-align:center">按键</th><th style="text-align:center">键码</th><th style="text-align:center">按键</th><th style="text-align:center">键码</th></tr></thead><tbody><tr><td style="text-align:center">BackSpace</td><td style="text-align:center">8</td><td style="text-align:center">Esc</td><td style="text-align:center">27</td><td style="text-align:center">Right Arrow</td><td style="text-align:center">39</td><td style="text-align:center">-_</td><td style="text-align:center">189</td></tr><tr><td style="text-align:center">Tab</td><td style="text-align:center">9</td><td style="text-align:center">Spacebar</td><td style="text-align:center">32</td><td style="text-align:center">Dw Arrow</td><td style="text-align:center">40</td><td style="text-align:center">.&gt;</td><td style="text-align:center">190</td></tr><tr><td style="text-align:center">Clear</td><td style="text-align:center">12</td><td style="text-align:center">Page Up</td><td style="text-align:center">33</td><td style="text-align:center">Insert</td><td style="text-align:center">45</td><td style="text-align:center">/?</td><td style="text-align:center">191</td></tr><tr><td style="text-align:center">Enter</td><td style="text-align:center">13</td><td style="text-align:center">Page Down</td><td style="text-align:center">34</td><td style="text-align:center">Delete</td><td style="text-align:center">46</td><td style="text-align:center">`~</td><td style="text-align:center">192</td></tr><tr><td style="text-align:center">Shift</td><td style="text-align:center">16</td><td style="text-align:center">End</td><td style="text-align:center">35</td><td style="text-align:center">Num Lock</td><td style="text-align:center">144</td><td style="text-align:center">[{</td><td style="text-align:center">219</td></tr><tr><td style="text-align:center">Control</td><td style="text-align:center">17</td><td style="text-align:center">Home</td><td style="text-align:center">36</td><td style="text-align:center">;:</td><td style="text-align:center">186</td><td style="text-align:center"></td><td style="text-align:center">220</td></tr><tr><td style="text-align:center">Alt</td><td style="text-align:center">18</td><td style="text-align:center">Left Arrow</td><td style="text-align:center">37</td><td style="text-align:center">=+</td><td style="text-align:center">187</td><td style="text-align:center">]}</td><td style="text-align:center">221</td></tr><tr><td style="text-align:center">Cape Lock</td><td style="text-align:center">20</td><td style="text-align:center">Up Arrow</td><td style="text-align:center">38</td><td style="text-align:center">,&lt;</td><td style="text-align:center">188</td><td style="text-align:center">‘“</td><td style="text-align:center">222</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> 深入浅出js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript基础之泛型</title>
      <link href="/articles/202208247dee70e2a1ef.html"/>
      <url>/articles/202208247dee70e2a1ef.html</url>
      
        <content type="html"><![CDATA[<h1 id="TypeSprict-—-泛型"><a href="#TypeSprict-—-泛型" class="headerlink" title="TypeSprict — 泛型"></a>TypeSprict — 泛型</h1><h2 id="TS-—-泛型"><a href="#TS-—-泛型" class="headerlink" title="TS — 泛型"></a><code>TS</code> — 泛型</h2><h3 id="什么是泛型"><a href="#什么是泛型" class="headerlink" title="什么是泛型"></a>什么是泛型</h3><blockquote><p>1.泛型（Generics）是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。</p><p>2.我们不仅要创建一致的定义良好的API，同时也要考虑可重用性。组件不仅能够支持当前的数据类型，同时也能支持未来的数据类型，这在创建大型系统时为你提供了十分灵活的功能。  在像c#和java这样的语言中，可以使用泛型来创建可重用的组件，一个组件可以支持多种类型的数据。这样用户就可以以自己的数据类型来使用组件。  </p></blockquote><span id="more"></span><h3 id="ts函数定义"><a href="#ts函数定义" class="headerlink" title="ts函数定义"></a><code>ts</code>函数定义</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先看一下ts函数的定义</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">value: <span class="built_in">string</span></span>): <span class="title">string</span> </span>&#123; <span class="comment">// 传入值和返回值都限制了string类型</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;str&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当需要同时支持多个数类型的时候 这时怎么解决呢？</p><ul><li>用<code>any</code>类型</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span> (<span class="params">value: <span class="built_in">any</span></span>):<span class="title">any</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用了any就代表着放弃了类型的检查，一般我们都提倡严格限制类型，这时我们可以利用泛型来解决</span></span><br></pre></td></tr></table></figure><h3 id="泛型的写法"><a href="#泛型的写法" class="headerlink" title="泛型的写法"></a>泛型的写法</h3><blockquote><p>1.我们在函数名后添加了 <T>，其中 T 用来指代任意输入的类型，在后面的输入 value: T 和输出 Array<T> 中即可使用了。<br>2.T表示泛型（也可以取其他名字），具体什么类型是调用这个方法的时候决定的</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例子</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createArray</span>&lt;<span class="title">T</span>&gt;(<span class="params">length: <span class="built_in">number</span>, value: T</span>): <span class="title">Array</span>&lt;<span class="title">T</span>&gt; </span>&#123; </span><br><span class="line">    <span class="keyword">let</span> result: T[] = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        result[i] = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createArray&lt;<span class="built_in">string</span>&gt;(<span class="number">3</span>, <span class="string">&#x27;x&#x27;</span>); <span class="comment">// [&#x27;x&#x27;, &#x27;x&#x27;, &#x27;x&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="多个类型参数"><a href="#多个类型参数" class="headerlink" title="多个类型参数"></a>多个类型参数</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">泛型可以定义多个不同类型参数</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>&lt;<span class="title">T</span>, <span class="title">U</span>&gt;(<span class="params">tuple: [T, U]</span>): [<span class="title">U</span>, <span class="title">T</span>] </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [tuple[<span class="number">1</span>], tuple[<span class="number">0</span>]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">swap&lt;<span class="built_in">number</span>, <span class="built_in">string</span>&gt;([<span class="number">7</span>, <span class="string">&#x27;seven&#x27;</span>]); <span class="comment">// [&#x27;seven&#x27;, 7]</span></span><br></pre></td></tr></table></figure><h3 id="函数表达式-函数别名-接口-—配合泛型写法"><a href="#函数表达式-函数别名-接口-—配合泛型写法" class="headerlink" title="函数表达式/函数别名/接口 —配合泛型写法"></a>函数表达式/函数别名/接口 —配合泛型写法</h3><ul><li>函数表达式的定义方式</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> getArray: &lt;T&gt;<span class="function">(<span class="params">arg: T, times: <span class="built_in">number</span></span>) =&gt;</span> T[]</span><br><span class="line">getArray = <span class="function">(<span class="params">arg: <span class="built_in">any</span>, times: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Array</span>(times).fill(arg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>接口类型</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> GetArray&lt;T&gt; &#123;</span><br><span class="line">    (arg: T, <span class="attr">times</span>: <span class="built_in">number</span>): T[],</span><br><span class="line">    <span class="attr">array</span>: T[]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 与泛型接口类型，泛型也可以定义在类的类型定义中</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericNumber</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="attr">zeroValue</span>: T;</span><br><span class="line">    add: <span class="function">(<span class="params">x: T, y: T</span>) =&gt;</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myGenericNumber = <span class="keyword">new</span> GenericNumber&lt;<span class="built_in">number</span>&gt;();</span><br><span class="line">myGenericNumber.zeroValue = <span class="number">0</span>;</span><br><span class="line">myGenericNumber.add = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123; <span class="keyword">return</span> x + y; &#125;;</span><br></pre></td></tr></table></figure><blockquote><p> 需要注意的是：类有两部分： 静态部分和实例部分。泛型类值的是实例部分的类型，所以类的静态属性不能使用这个泛型类型</p></blockquote><p>案例：比如有最小堆算法，需要同时支持返回数字和字符串两种类型。通过类的泛型来实现</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myClass</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> list:T[] = [];</span><br><span class="line">    add (value: T): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.list.push(value)</span><br><span class="line">    &#125;</span><br><span class="line">    min () : <span class="built_in">number</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> min=arr[<span class="number">0</span>];</span><br><span class="line">        list.forEach(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(value&lt;min)&#123;</span><br><span class="line">                min=value</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> min</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> myClass&lt;<span class="built_in">number</span>&gt;() <span class="comment">//实例化，并且指定了泛型T的类型为number</span></span><br><span class="line">m.add(<span class="number">2</span>);</span><br><span class="line">m.add(<span class="number">3</span>);</span><br><span class="line">m.add(<span class="number">5</span>);</span><br><span class="line">m.add(<span class="number">5</span>);</span><br><span class="line">m.add(<span class="number">7</span>);</span><br><span class="line">m.add(<span class="number">8</span>);</span><br><span class="line">alert(m.min()) <span class="comment">//输出了最大值</span></span><br></pre></td></tr></table></figure><h3 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h3><blockquote><p>1.有时候我们想对泛型传入的参数加以约束，这时候使用泛型约束<br>2.思路就是让泛型类型去继承接口或者一些类，让在编译过程去检测传入的泛型是具有当前指定的属性</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Lengthwise &#123;</span><br><span class="line">    <span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">Lengthwise</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg.length);</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loggingIdentity(<span class="number">7</span>);<span class="comment">// 传入数字会报错 arg不包含length</span></span><br></pre></td></tr></table></figure><h3 id="泛型参数的默认类型"><a href="#泛型参数的默认类型" class="headerlink" title="泛型参数的默认类型"></a>泛型参数的默认类型</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createArray</span>&lt;<span class="title">T</span> = <span class="title">string</span>&gt;(<span class="params">length: <span class="built_in">number</span>, value: T</span>): <span class="title">Array</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result: T[] = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        result[i] = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Typescript基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript基础之函数</title>
      <link href="/articles/20220824ce2fc93679c8.html"/>
      <url>/articles/20220824ce2fc93679c8.html</url>
      
        <content type="html"><![CDATA[<h1 id="TypeSprict-—-函数"><a href="#TypeSprict-—-函数" class="headerlink" title="TypeSprict — 函数"></a>TypeSprict — 函数</h1><h2 id="JS-—-函数的两种表现形式"><a href="#JS-—-函数的两种表现形式" class="headerlink" title="JS — 函数的两种表现形式"></a><code>JS</code> — 函数的两种表现形式</h2><blockquote><p>我们熟知<code>js</code>有两种函数表现形式’函数声明’和’函数表达式’</p></blockquote><h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><span id="more"></span><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数声明（Function Declaration）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数的表达式"><a href="#函数的表达式" class="headerlink" title="函数的表达式"></a>函数的表达式</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数表达式（Function Expression）</span></span><br><span class="line"><span class="keyword">let</span> mySum = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="es6-箭头函数"><a href="#es6-箭头函数" class="headerlink" title="es6 箭头函数"></a><code>es6</code> 箭头函数</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> esExample = <span class="function">(<span class="params">name</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TS-—-定义一个函数"><a href="#TS-—-定义一个函数" class="headerlink" title="TS — 定义一个函数"></a><code>TS</code> — 定义一个函数</h2><blockquote><p>将上面的三种写法依次推导成’<code>ts</code>‘的写法</p></blockquote><h3 id="TS-—-函数声明"><a href="#TS-—-函数声明" class="headerlink" title="TS — 函数声明"></a><code>TS</code> — 函数声明</h3><blockquote><p>1.<code>TS</code>以函数的声明的形式，需要定义函数参数中的类型，以及返回类型。 ‘<code>function</code> 函数名(参数:类型):函数返回的类型{}’<br>2.如果函数没有返回类型就是 <code>void</code></p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回number类型的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">arg1:<span class="built_in">number</span>, arg2:<span class="built_in">number</span></span>): <span class="title">number</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg1 + arg2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sub</span>(<span class="params">arg1: <span class="built_in">number</span></span>): <span class="title">void</span></span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg1）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>TS</code> — 函数函数的表达式/ 箭头函数（定义）</p><blockquote><p>下面两种写法最后编译成’<code>js</code>‘的结果不同，但是却在’<code>TS</code>‘ 表现形式略有区别</p><ul><li>第一个案例只对等号右侧的匿名函数进行了类型定义，在把这个重新被定义的类型函数赋值给了’<code>add</code>‘。</li><li>第二个案例就比较遵循’<code>ts</code>‘ 规则，先定义了一个函数类型，这个类型参数指定的类型，以及函数返回的类型，然后使用的时候在按照定义规范去用</li></ul></blockquote><ul><li>第一种写法</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">arg1:<span class="built_in">number</span>,arg2:<span class="built_in">number</span></span>) =&gt;</span> arg1 + arg2</span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><ul><li>第二种写法</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个函数类型包括参数类型和返回类型， ts 箭头函数左面是函数参数，右面是函数返回类型</span></span><br><span class="line"><span class="keyword">let</span> add:<span class="function">(<span class="params">x:<span class="built_in">number</span>,y:<span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用的时候具体函数使用</span></span><br><span class="line">add = <span class="function">(<span class="params">arg1:<span class="built_in">number</span>,arg2:<span class="built_in">number</span></span>) =&gt;</span>&#123; <span class="keyword">return</span> arg1+arg2&#125;</span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h3 id="使用接口-定义"><a href="#使用接口-定义" class="headerlink" title="使用接口(定义)"></a>使用接口(定义)</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Add &#123;</span><br><span class="line">    (x:<span class="built_in">number</span>,<span class="attr">y</span>:<span class="built_in">number</span>):<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照接口格式 规范实现我们的myAdd方法</span></span><br><span class="line"><span class="keyword">let</span> myAdd: Add</span><br><span class="line">myAdd = <span class="function">(<span class="params">x:<span class="built_in">number</span>,y:<span class="built_in">number</span></span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="built_in">console</span>.log(myAdd(<span class="number">1</span>,<span class="number">2</span>)) <span class="comment">//3</span></span><br></pre></td></tr></table></figure><h3 id="ts-定义参数可选参数写法-—-‘-’的使用"><a href="#ts-定义参数可选参数写法-—-‘-’的使用" class="headerlink" title="ts 定义参数可选参数写法 — ‘?’的使用"></a><code>ts</code> 定义参数可选参数写法 — ‘?’的使用</h3><blockquote><p>1.<code>JavaScript</code>里，每个参数都是可选的，可传可不传。但’TS’不同每个函数参数都是必须的，可以理解定义则必须使用</p><p>2.但是有时候不想将每一个定义的参数都传值使用，这时候就可以用’?’ 的形式来将参数变成可选的和接口中使用的方式相似</p><p>3.需要注意的是，可选参数必须接在必需参数最后面。</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> AddFun: <span class="function">(<span class="params">x:<span class="built_in">number</span>,y:<span class="built_in">number</span>,z?:<span class="built_in">any</span></span>) =&gt;</span> <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> add:AddFun</span><br><span class="line">add = <span class="function">(<span class="params">x:<span class="built_in">number</span>,y:<span class="built_in">number</span></span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加了一个z参数</span></span><br><span class="line">add = <span class="function">(<span class="params">x:<span class="built_in">number</span>,y:<span class="built_in">number</span>,z:<span class="built_in">number</span></span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y+z</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>官方给的案例</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, lastName?: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lastName)</span><br><span class="line">        <span class="keyword">return</span> firstName + <span class="string">&quot; &quot;</span> + lastName;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> firstName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result1 = buildName(<span class="string">&quot;Bob&quot;</span>);  <span class="comment">// works correctly now</span></span><br><span class="line"><span class="keyword">let</span> result2 = buildName(<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Adams&quot;</span>, <span class="string">&quot;Sr.&quot;</span>);  <span class="comment">// error, too many parameters</span></span><br><span class="line"><span class="keyword">let</span> result3 = buildName(<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Adams&quot;</span>);  <span class="comment">// ah, just right</span></span><br></pre></td></tr></table></figure><p><code>TS</code>函数 — 设置函数参数默认值</p><blockquote><p>1.和<code>es6</code> 一样直接在参数中给要增加的参数赋值默认参数即可<br>2.当有默认参数的时候，默认参数会自动变成一个可选参数,不填就用默认参数，填就用填写参数，但是’?’形式的可选参数依然必须在末尾</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, lastName: <span class="built_in">string</span> = <span class="string">&#x27;Cat&#x27;</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> firstName + <span class="string">&#x27; &#x27;</span> + lastName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> tomcat = buildName(<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Cat&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> tom = buildName(<span class="string">&#x27;Tom&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>案例二</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName = <span class="string">&quot;Will&quot;</span>, lastName: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> firstName + <span class="string">&quot; &quot;</span> + lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result1 = buildName(<span class="string">&quot;Bob&quot;</span>);                  <span class="comment">// 错误，少了个参数</span></span><br><span class="line"><span class="keyword">let</span> result2 = buildName(<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Adams&quot;</span>, <span class="string">&quot;Sr.&quot;</span>);  <span class="comment">// 错误，多了个参数</span></span><br><span class="line"><span class="keyword">let</span> result3 = buildName(<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Adams&quot;</span>);         <span class="comment">//  Bob Adams</span></span><br><span class="line"><span class="keyword">let</span> result4 = buildName(<span class="literal">undefined</span>, <span class="string">&quot;Adams&quot;</span>);     <span class="comment">// Will Adams</span></span><br></pre></td></tr></table></figure><h3 id="TS函数-—-设置剩余参数"><a href="#TS函数-—-设置剩余参数" class="headerlink" title="TS函数 — 设置剩余参数"></a><code>TS</code>函数 — 设置剩余参数</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 使用的场景：同时操作多个参数，或者在不确定有多少个参数的时候</span><br><span class="line"><span class="number">2.</span> 对es6中的<span class="string">&#x27;...&#x27;</span> 简单讲解:</span><br><span class="line">    <span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">var</span> b = [...a]</span><br><span class="line">    <span class="built_in">console</span>.log(b) <span class="comment">//  [1, 2, 3] </span></span><br><span class="line">    <span class="comment">// 对象解构</span></span><br><span class="line">    <span class="keyword">var</span> aObj = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> bObj2 = &#123;...aObj,<span class="string">&quot;b&quot;</span>:<span class="number">2</span>&#125;</span><br><span class="line">    <span class="built_in">console</span>.log(bObj2 ) <span class="comment">// &#123;a: 1, b: 2&#125;</span></span><br><span class="line"><span class="number">4.</span> 在<span class="string">&#x27;ts&#x27;</span> 中也是<span class="string">&#x27;...&#x27;</span>但需要定义数组类型参数<span class="string">&#x27; ...args: number[]&#x27;</span></span><br><span class="line"><span class="number">5.</span> 需要注意的是，剩余参数必须接在必需参数最后面。</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> handleData = <span class="function">(<span class="params">arg1: <span class="built_in">number</span>, ...args: <span class="built_in">number</span>[]</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg1, arg2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h3><blockquote><p>1.有时候函数会因为传递的参数不同，导致函数参数返回的时候类型值不同一种解决办法就是利用’联合类型’</p><p> 但是有个缺点，就是不能够精确的表达输入为数字的时候，输出也应该为数字 输入为字符串的时候，输出也应该为字符串另一种解决办法就是利用’重载’<br>2.官方文档的标准解释：重载允许一个函数接受不同数量或类型的参数时，作出不同的处理。</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">x: <span class="built_in">number</span> | <span class="built_in">string</span></span>): <span class="title">number</span> | <span class="title">string</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">Number</span>(x.toString().split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line">     &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> x.split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>用重载定义多个 <code>reverse</code> 的函数类型</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">x: <span class="built_in">number</span></span>): <span class="title">number</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">x: <span class="built_in">string</span></span>): <span class="title">string</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">x: <span class="built_in">number</span> | <span class="built_in">string</span></span>): <span class="title">number</span> | <span class="title">string</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Number</span>(x.toString().split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x.split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意，<code>TypeScript</code> 会优先从最前面的函数定义开始匹配，所以多个函数定义如果有包含关系，需要优先把精确的定义写在前面。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Typescript基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript基础之类</title>
      <link href="/articles/2022082491102b34e243.html"/>
      <url>/articles/2022082491102b34e243.html</url>
      
        <content type="html"><![CDATA[<h2 id="TypeSprict-—-类"><a href="#TypeSprict-—-类" class="headerlink" title="TypeSprict — 类"></a>TypeSprict — 类</h2><blockquote><p><code>JavaScript</code> 通过构造函数实现类的概念，通过原型链实现继承。而在 <code>ES6</code> 中，我们终于迎来了 <code>class</code>。<br><code>TypeScript</code> 除了实现了所有 <code>ES6</code> 中的类的功能以外，还添加了一些新的用法。</p></blockquote><span id="more"></span><h3 id="TS-—-类的概念"><a href="#TS-—-类的概念" class="headerlink" title="TS — 类的概念"></a><code>TS</code> — 类的概念</h3><blockquote><ol><li>类(<code>Class</code>)：定义了一件事物的抽象特点，包含它的属性和方法</li><li>对象（<code>Object</code>）：类的实例，通过 <code>new</code> 生成</li><li><p>面向对象（<code>OOP</code>）的三大特性：封装、继承、多态</p><ul><li>封装（<code>Encapsulation</code>）：将对数据的操作细节隐藏起来，只暴露对外的接口。</li><li>继承（<code>Inheritance</code>）：子类继承父类，子类除了拥有父类的所有特性外，还有一些更具体的特性。</li><li>多态（<code>Polymorphism</code>）：由继承而产生了相关的不同的类，对同一个方法可以有不同的响应。</li></ul></li><li><p>存取器（<code>getter</code> &amp; <code>setter</code>）：用以改变属性的读取和赋值行为</p></li><li>修饰符（<code>Modifiers</code>）：修饰符是一些关键字，用于限定成员或类型的性质。比如 public 表示公有属性或方法</li><li>抽象类（<code>Abstract Class</code>）：抽象类是供其他类继承的基类，抽象类不允许被实例化。<br>抽象类中的抽象方法必须在子类中被实现</li><li>接口（<code>Interfaces</code>）：不同类之间公有的属性或方法，可以抽象成一个接口。<br>接口可以被类实现（<code>implements</code>）。一个类只能继承自另一个类，但是可以实现多个接口</li></ol></blockquote><h4 id="创建一个简单的-ts-类"><a href="#创建一个简单的-ts-类" class="headerlink" title="创建一个简单的 ts 类"></a>创建一个简单的 ts 类</h4><blockquote><p><code>class</code> 定义类，使用 <code>constructor</code> 定义构造函数。通过 <code>new</code> 生成新实例的时候，会自动调用构造函数。</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`My name is <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> Animal(<span class="string">&quot;Jack&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a.sayHi()); <span class="comment">// My name is Jack</span></span><br></pre></td></tr></table></figure><h5 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h5><blockquote><p>使用 <code>extends</code> 关键字实现继承，子类中使用 <code>super</code> 关键字来调用父类的构造函数和方法。</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`My name is <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(name); <span class="comment">// 调用父类的 constructor(name)</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Meow, &quot;</span> + <span class="built_in">super</span>.sayHi(); <span class="comment">// 调用父类的 sayHi()</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="public-private-protected—-公共-私有-受保护的"><a href="#public-private-protected—-公共-私有-受保护的" class="headerlink" title="public / private / protected— 公共/私有/受保护的"></a><code>public</code> / <code>private</code> / <code>protected</code>— 公共/私有/受保护的</h3><h4 id="public-—-公共"><a href="#public-—-公共" class="headerlink" title="public — 公共"></a><code>public</code> — 公共</h4><blockquote><p>‘<code>public</code>‘修饰的属性或方法是公有的，可以在任何地方被访问到，默认所有的属性和方法都是 ‘<code>public</code>‘的</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> name;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> Animal(<span class="string">&quot;Jack&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a.name); <span class="comment">// Jack</span></span><br><span class="line">a.name = <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.name); <span class="comment">// Tom</span></span><br></pre></td></tr></table></figure><h4 id="private-—-私有的"><a href="#private-—-私有的" class="headerlink" title="private — 私有的"></a><code>private</code> — 私有的</h4><blockquote><p>当成员被标记成<code>private</code>时，它就不能在声明它的类的外部访问，简单的说，只有自己的<code>class</code>内部可以访问，即使是自己的’实例’，’继承的子类’ 都无法访问被’<code>private</code>‘修饰的内容</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name; <span class="comment">// 能调用private修饰的</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`我的名字<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>; <span class="comment">// 能调用private修饰的</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">getTest</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name); <span class="comment">// 错误提示：属性“name”为私有属性，只能在类“Animal ”中访问。</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Animal(<span class="string">&quot;dog&quot;</span>);</span><br><span class="line"><span class="comment">// dog.name = &quot;Anne&quot; // 提示错误：属性“name”为私有属性，只能在类“Animal”中访问。</span></span><br><span class="line"><span class="built_in">console</span>.log(dog.getName()); <span class="comment">// 可以访问，打印结果：我的名字Anne</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cat = <span class="keyword">new</span> Cat(<span class="string">&quot;cat&quot;</span>);</span><br><span class="line"><span class="comment">// cat.getTest() // 这里是错误的 因为Cat 类也无法使用继承父类的私有属性或者方法</span></span><br></pre></td></tr></table></figure><h4 id="protected-—-受保护的"><a href="#protected-—-受保护的" class="headerlink" title="protected — 受保护的"></a><code>protected</code> — 受保护的</h4><blockquote><p>1.修饰的属性或方法是受保护的，它和 <code>private</code> 类似，区别是它在子类中也是允许被访问的，简单的 说’子类是可以访问 <code>protected</code> 修饰的’ 实例是不可以的</p><p> 2.修饰的是’<code>constructor</code>‘ 则当前类不能创建实例</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">protected</span> <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">protected</span> <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//protected 修饰constructor不能创建实例 报错提示：类“Animal”的构造函数是受保护的，仅可在类声明中访问。</span></span><br><span class="line"><span class="comment">// const cat = new Animal (18)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">super</span>.getName()); <span class="comment">// 可以访问父类中的protected方法</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Dog(<span class="string">&quot;Laura&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="其他特性"><a href="#其他特性" class="headerlink" title="其他特性"></a>其他特性</h3><h4 id="readonly-—-只读属性"><a href="#readonly-—-只读属性" class="headerlink" title="readonly — 只读属性"></a><code>readonly</code> — 只读属性</h4><blockquote><p>可以使用 <code>readonly</code> 关键字将属性设置为只读的。</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">readonly</span> name;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> Animal(<span class="string">&quot;Jack&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a.name); <span class="comment">// Jack</span></span><br><span class="line">a.name = <span class="string">&quot;Tom&quot;</span>; <span class="comment">// 错误 name是只读的</span></span><br></pre></td></tr></table></figure><h4 id="静态属性-—-static-修饰"><a href="#静态属性-—-static-修饰" class="headerlink" title="静态属性 — static 修饰"></a>静态属性 — <code>static</code> 修饰</h4><blockquote><p>1.’<code>ts</code>‘ 提供了 静态属性，属性和方法都是’<code>static</code>‘ 修饰 </p><p>2.静态方法没法直接调用类里面的属性，当想要调用类里面的属性的时候需要声明静态的属性</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Animal.name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> name: <span class="built_in">string</span> = <span class="number">18</span>;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Animal();</span><br><span class="line"><span class="comment">// console.log(p.age) // age 是静态的属性 所以实例是不能访问的</span></span><br><span class="line"><span class="comment">// console.log(Animal.age) // 虽然有了类但是也是不能访问的，因为用了private修饰用public可以访问</span></span><br></pre></td></tr></table></figure><h4 id="ts-的-getter-setter"><a href="#ts-的-getter-setter" class="headerlink" title="ts 的 getter /setter"></a><code>ts</code> 的 <code>getter</code> /<code>setter</code></h4><blockquote><p>使用 <code>getter</code> 和 <code>setter</code> 来改变属性的赋值和读取行为</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title">name</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Jack&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title">name</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;setter: &quot;</span> + value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> Animal(<span class="string">&quot;Kitty&quot;</span>); <span class="comment">// setter: Kitty</span></span><br><span class="line">a.name = <span class="string">&quot;Tom&quot;</span>; <span class="comment">// setter: Tom</span></span><br><span class="line"><span class="built_in">console</span>.log(a.name); <span class="comment">// Jack</span></span><br></pre></td></tr></table></figure><h4 id="抽象类-abstract"><a href="#抽象类-abstract" class="headerlink" title="抽象类 abstract"></a>抽象类 <code>abstract</code></h4><blockquote><ol><li>抽象类是不允许被实例化的</li><li>继承抽象类的类必须去实现实例中的抽象类中的’抽象方法’和’抽象属性’</li></ol></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> name;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> sayHi();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 实现抽象类的抽象方法</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Meow, My name is <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> cat = <span class="keyword">new</span> Cat(<span class="string">&quot;Tom&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Typescript基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript基础之接口</title>
      <link href="/articles/2022082457f1a956bd41.html"/>
      <url>/articles/2022082457f1a956bd41.html</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>接口：是一种类型，是一种规范，是一种规则，是一个能力，是一种约束。<br> TypeScript 的核心原则之一是对值所具有的结构进行类型检查。我们使用接口（<code>interface</code>）来定义对象的类型。<code>接口是对象的状态(属性)和行为(方法)的抽象(描述)</code></p><span id="more"></span><h2 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h2><p>接口里的属性不全都是必需的。 有些是只在某些条件下存在，或者根本不存在。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Idata &#123;</span><br><span class="line"> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line"> age: <span class="built_in">number</span>; </span><br><span class="line"> email?: <span class="built_in">string</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>带有可选属性的接口与普通的接口定义差不多，只是在可选属性名字定义的后面加一个 <code>?</code> 符号。</p><p>可选属性的好处之一是可以对可能存在的属性进行预定义，好处之二是可以捕获引用了不存在的属性时的错误。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data: Idata = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">23</span>,</span><br><span class="line">  <span class="comment">// email: &#x27;111@qq.com&#x27; // 可以没有</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="只读属性"><a href="#只读属性" class="headerlink" title="只读属性"></a>只读属性</h2><p>一些对象属性只能在对象刚刚创建的时候修改其值。 你可以在属性名前用 <code>readonly</code> 来指定只读属性。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Idata &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">readonly</span> age: <span class="built_in">number</span>; <span class="comment">// 只读属性</span></span><br><span class="line">  email?: <span class="built_in">string</span>; <span class="comment">// 可选属性 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一旦赋值后再也不能被改变。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data: Idata = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">23</span>,</span><br><span class="line">  <span class="comment">// email: &#x27;111@qq.com&#x27; // 可以没有</span></span><br><span class="line">&#125;</span><br><span class="line">data.age = <span class="number">20</span> <span class="comment">// Error</span></span><br></pre></td></tr></table></figure><p><strong><code>readonly</code> vs <code>const</code></strong></p><p>最简单判断该用<code>readonly</code>还是<code>const</code>的方法是看要把它做为变量使用还是做为一个属性。 做为变量使用的话用 <code>const</code>，若做为属性则使用<code>readonly</code>。</p><h3 id="对class类的约束"><a href="#对class类的约束" class="headerlink" title="对class类的约束"></a>对class类的约束</h3><p>1、定义接口的时候，只定义声明即可，不包含具体内容</p><p>2、实现接口，要实现里面的内容</p><p><strong>接口的定义</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Iprinter &#123;</span><br><span class="line">  printing(msg: <span class="built_in">string</span>): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Imessage &#123;</span><br><span class="line">  getMsg(): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现接口</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorPrinter</span> <span class="title">implements</span> <span class="title">Iprinter</span> </span>&#123;</span><br><span class="line">  printing(msg: <span class="built_in">string</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`打印<span class="subst">$&#123;msg&#125;</span>成功！`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现多个接口</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorPrinter</span> <span class="title">implements</span> <span class="title">Iprinter</span>, <span class="title">Imessage</span> </span>&#123;</span><br><span class="line">  printing(msg: <span class="built_in">string</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`打印<span class="subst">$&#123;msg&#125;</span>成功！`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  getMsg(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;惠普HP10000&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对函数的约束"><a href="#对函数的约束" class="headerlink" title="对函数的约束"></a>对函数的约束</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> ImaFunction &#123;</span><br><span class="line">  (a: <span class="built_in">string</span>, <span class="attr">b</span>: <span class="built_in">number</span>): <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fun1: ImaFunction;</span><br><span class="line">fun1 = <span class="function"><span class="keyword">function</span> (<span class="params">a: <span class="built_in">string</span>, b: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="对数组的约束"><a href="#对数组的约束" class="headerlink" title="对数组的约束"></a>对数组的约束</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IStuArr &#123;</span><br><span class="line">  [index: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr: IStuArr;</span><br><span class="line">arr = [<span class="string">&quot;ssss&quot;</span>, <span class="string">&quot;bbbb&quot;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><h3 id="对json的约束"><a href="#对json的约束" class="headerlink" title="对json的约束"></a>对json的约束</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Idata &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">readonly</span> age: <span class="built_in">number</span>; <span class="comment">// 只读属性 readonly</span></span><br><span class="line">  email?: <span class="built_in">string</span>; <span class="comment">// 可选属性 ?</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showData</span>(<span class="params">n: Idata</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// n.age = 12;</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(n));</span><br><span class="line">&#125;</span><br><span class="line">showData(&#123; <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>: <span class="number">19</span> &#125;);</span><br></pre></td></tr></table></figure><h2 id="接口的继承"><a href="#接口的继承" class="headerlink" title="接口的继承"></a>接口的继承</h2><p>和类一样，接口也可以相互继承。 这让我们能够从一个接口里复制成员到另一个接口里，可以更灵活地将接口分割到可重用的模块里。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IprinterMessage <span class="keyword">extends</span> Iprinter, Imessage &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Typescript基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript基础之基本类型</title>
      <link href="/articles/202208249e6debc43818.html"/>
      <url>/articles/202208249e6debc43818.html</url>
      
        <content type="html"><![CDATA[<h2 id="类型声明"><a href="#类型声明" class="headerlink" title="类型声明"></a>类型声明</h2><ul><li><p>类型声明是<code>TS</code>非常重要的一个特点。</p></li><li><p>通过类型声明可以指定<code>TS</code>中变量（参数、形参）的类型。</p></li><li><p>指定类型后，当为变量赋值时，<code>TS</code>编译器会自动检查是否复核类型声明，复核则赋值，否则报错。</p></li><li><p>简而言之，类型声明给变量设置了类型，使得变量只能存储某种类型的值。</p></li><li><p>语法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 变量: 类型;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> 变量: 类型 = 值;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">参数: 类型, 参数: 类型</span>): 类型</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><h3 id="1、字符串-string"><a href="#1、字符串-string" class="headerlink" title="1、字符串: string"></a>1、字符串: <code>string</code></h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str:<span class="built_in">string</span> = <span class="string">&#x27;hello word&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="2、布尔值-boolean"><a href="#2、布尔值-boolean" class="headerlink" title="2、布尔值: boolean"></a>2、布尔值: <code>boolean</code></h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isShow:<span class="built_in">boolean</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="3、数字-number"><a href="#3、数字-number" class="headerlink" title="3、数字: number"></a>3、数字: <code>number</code></h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age: <span class="built_in">number</span> = <span class="number">23</span>;</span><br></pre></td></tr></table></figure><h3 id="4、数组-array"><a href="#4、数组-array" class="headerlink" title="4、数组: array"></a>4、数组: <code>array</code></h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><h3 id="5、元组-tuple"><a href="#5、元组-tuple" class="headerlink" title="5、元组: tuple"></a>5、元组: <code>tuple</code></h3><p>元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同, 对应位置的类型需要相同。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line"></span><br><span class="line">arr = [<span class="string">&quot;aaa&quot;</span>, <span class="number">12</span>]; <span class="comment">// Ok</span></span><br><span class="line"></span><br><span class="line">arr = [<span class="number">12</span>, <span class="string">&quot;222&quot;</span>]; <span class="comment">// Error</span></span><br></pre></td></tr></table></figure><h3 id="6、枚举-enum"><a href="#6、枚举-enum" class="headerlink" title="6、枚举: enum"></a>6、枚举: <code>enum</code></h3><p>对<code>JavaScript</code>标准数据类型的一个补充,使用枚举类型可以为一组数值赋予友好的名字。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">enum</span> weeks &#123;</span><br><span class="line"></span><br><span class="line"> Mon,</span><br><span class="line"></span><br><span class="line"> Tue,</span><br><span class="line"></span><br><span class="line"> Wed,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> day: weeks = weeks.Mon;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(day); <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(weeks[<span class="number">0</span>]); <span class="comment">// Mon</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(weeks[<span class="string">&quot;Mon&quot;</span>]); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h3 id="7、any"><a href="#7、any" class="headerlink" title="7、any"></a>7、<code>any</code></h3><p><code>any</code>, 为不清楚类型的变量指定一个类型, 不通过类型检查器检测。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x: <span class="built_in">any</span> = <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line"></span><br><span class="line">x = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line">x = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h3 id="8、void"><a href="#8、void" class="headerlink" title="8、void"></a>8、<code>void</code></h3><p><code>void</code>类型像是与<code>any</code>类型相反，表示没有任何类型。当一个函数没有返回值时,其返回值类型通常是 <code>void</code>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&quot;11111&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明一个void类型的变量没有什么大用，因为你只能为它赋予<code>undefined</code>和<code>null</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> unusable: <span class="built_in">void</span> = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure><h3 id="9、undefined-null"><a href="#9、undefined-null" class="headerlink" title="9、undefined null"></a>9、<code>undefined</code> <code>null</code></h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x1: <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure><h2 id="10、object"><a href="#10、object" class="headerlink" title="10、object"></a>10、<code>object</code></h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj: <span class="built_in">object</span> = &#123; <span class="attr">a</span>: <span class="string">&quot;1&quot;</span> &#125;;</span><br></pre></td></tr></table></figure><h2 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x2: <span class="built_in">number</span> | <span class="built_in">string</span> | <span class="built_in">boolean</span>;</span><br><span class="line"></span><br><span class="line">x2 = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">x2 = <span class="string">&quot;22&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="类型推论"><a href="#类型推论" class="headerlink" title="类型推论"></a>类型推论</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x3 = <span class="number">3</span>; <span class="comment">// 推论x3为number类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x4;</span><br></pre></td></tr></table></figure><h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x5: <span class="built_in">number</span> | <span class="built_in">string</span> | <span class="built_in">boolean</span> = <span class="string">&quot;this is a string&quot;</span>;</span><br><span class="line"><span class="comment">// 尖括号方法</span></span><br><span class="line"><span class="keyword">let</span> strLen: <span class="built_in">number</span> = (&lt;<span class="built_in">string</span>&gt;x5).length;</span><br><span class="line"><span class="comment">// as语法</span></span><br><span class="line"><span class="keyword">let</span> strLen1: <span class="built_in">number</span> = (x5 <span class="keyword">as</span> <span class="built_in">string</span>).length;</span><br></pre></td></tr></table></figure><blockquote><p>*注：可凭个人喜好用以上方法,但当你在<code>TypeScript</code>里使用<code>JSX</code>时，只有<code>as</code>语法断言是被允许的。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Typescript基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript基础之介绍</title>
      <link href="/articles/2022082440cd5be30b97.html"/>
      <url>/articles/2022082440cd5be30b97.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是TypeScript"><a href="#什么是TypeScript" class="headerlink" title="什么是TypeScript"></a>什么是TypeScript</h2><p><code>TypeScript</code> 是 <code>JavaScript</code> 的类型的超集，它可以编译成纯 <code>JavaScript</code>，主要提供了类型系统和对 <code>ES6</code> 的支持。编译出来的 <code>JavaScript</code> 可以运行在任何浏览器上。<code>TypeScript</code> 编译工具可以运行在任何服务器和任何系统上。<code>TypeScript</code> 是开源的。</p><span id="more"></span><h2 id="TypeScript的特点"><a href="#TypeScript的特点" class="headerlink" title="TypeScript的特点"></a>TypeScript的特点</h2><h3 id="1、编译型语言"><a href="#1、编译型语言" class="headerlink" title="1、编译型语言"></a>1、编译型语言</h3><p>直接编写的内容无法执行，需要通过编译工具编译成<code>JavaScript</code>。</p><h3 id="2、强类型的语言"><a href="#2、强类型的语言" class="headerlink" title="2、强类型的语言"></a>2、强类型的语言</h3><p><code>JavaScript</code>是动态类型的编程语言，所谓的动态类型，就是在编译时候时候才知道其数据类型是<code>Number</code> 还是<code>String</code>，它是弱类型语言；而<code>TypeScript</code>是静态类型的编程语言，所谓的静态类型就是编写的时候就知道其数据类型是什么，它是强类型语言。例如：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str:<span class="built_in">string</span> = <span class="string">&#x27;hello word&#x27;</span></span><br></pre></td></tr></table></figure><p><code>str</code>这个变量从头到尾只能是<code>string</code>类型，如果将其他类型的值赋值给他就会抛出异常。</p><h3 id="3、真正面向对象的语言"><a href="#3、真正面向对象的语言" class="headerlink" title="3、真正面向对象的语言"></a>3、真正面向对象的语言</h3><p>面向对象：<strong>想进行执行某个事件，就去找事件对应的对象，把事情落实到对象身上</strong></p><p>在程序中一切皆是对象，对象包含<strong>属性</strong>和<strong>方法</strong></p><p>面向对象三大特征：<strong>封装、继承、多态</strong></p><ul><li>要想面向对象，操作对象，首先便要拥有对象</li><li>要创建对象，必须要先定义类，所谓的类可以理解为对象的模型，对象的种类</li><li>程序中可以根据类创建指定类型的对象</li><li>不同的类可以用来创建不同的对象</li></ul><h2 id="TypeScript的优势"><a href="#TypeScript的优势" class="headerlink" title="TypeScript的优势"></a>TypeScript的优势</h2><p>1、在开发过程中，就可以定位的错误的地方，方便我们检查错误。</p><p>2、<code>TypeScript</code>属于渐进式的编程语言，如果不懂其语法可以完全将其当做<code>JavaScript</code>来用。</p><p>3、减少了我们在开发过程中的不必要的类型检查。</p><p>4、静态类型的代码提示是要优于动态类型代码提示的。</p><p>5、在进行项目重构的时候会更加简单。</p><p>6、静态类型的代码语义化比动态类型更好，可读性更好。</p>]]></content>
      
      
      <categories>
          
          <category> Typescript基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中使用wangeditor富文本编辑器</title>
      <link href="/articles/202206294713919edbe3.html"/>
      <url>/articles/202206294713919edbe3.html</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><code>wangEditor4</code> —— 轻量级 web 富文本编辑器，配置方便，使用简单。</p><ul><li>官网：<a href="https://www.wangeditor.com/">www.wangeditor.com</a></li><li>文档：<a href="https://www.wangeditor.com/v4/">www.wangeditor.com/v4</a></li><li>源码：<a href="https://github.com/wangeditor-team/wangeditor">github.com/wangeditor-team/wangEditor</a> </li></ul><span id="more"></span><h2 id="浏览器兼容性"><a href="#浏览器兼容性" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h2><p>兼容常见的 <code>PC</code> 浏览器：Chrome，Firefox，Safari，Edge，QQ 浏览器，IE11。</p><p>不支持移动端。</p><h2 id="封装wangEditor组件"><a href="#封装wangEditor组件" class="headerlink" title="封装wangEditor组件"></a>封装wangEditor组件</h2><h3 id="一、引入wangeditor"><a href="#一、引入wangeditor" class="headerlink" title="一、引入wangeditor"></a>一、引入<code>wangeditor</code></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i wangeditor@<span class="number">4.7</span><span class="number">.15</span> --save</span><br></pre></td></tr></table></figure><h3 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h3><h4 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h4><p>在<code>components</code>文件夹下新建文件夹<code>WangEditor</code>，再在<code>WangEditor</code>文件夹下新建<code>config.js</code>文件，用来存放默认配置，写入以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> defaultConfig = &#123;</span><br><span class="line">  <span class="attr">menus</span>: [</span><br><span class="line">    <span class="string">&#x27;head&#x27;</span>, <span class="comment">// 标题</span></span><br><span class="line">    <span class="string">&#x27;bold&#x27;</span>, <span class="comment">// 加粗</span></span><br><span class="line">    <span class="string">&#x27;fontSize&#x27;</span>, <span class="comment">// 字号</span></span><br><span class="line">    <span class="string">&#x27;fontName&#x27;</span>, <span class="comment">// 字体</span></span><br><span class="line">    <span class="string">&#x27;italic&#x27;</span>, <span class="comment">// 斜体</span></span><br><span class="line">    <span class="string">&#x27;underline&#x27;</span>, <span class="comment">// 下划线</span></span><br><span class="line">    <span class="string">&#x27;strikeThrough&#x27;</span>, <span class="comment">// 删除线</span></span><br><span class="line">    <span class="string">&#x27;indent&#x27;</span>, <span class="comment">// 缩进</span></span><br><span class="line">    <span class="string">&#x27;lineHeight&#x27;</span>, <span class="comment">// 行高</span></span><br><span class="line">    <span class="string">&#x27;foreColor&#x27;</span>, <span class="comment">// 字体颜色</span></span><br><span class="line">    <span class="string">&#x27;backColor&#x27;</span>, <span class="comment">// 背景色</span></span><br><span class="line">    <span class="string">&#x27;link&#x27;</span>, <span class="comment">// 链接</span></span><br><span class="line">    <span class="string">&#x27;list&#x27;</span>, <span class="comment">// 序列</span></span><br><span class="line">    <span class="comment">// &#x27;todo&#x27;, // 待办事项</span></span><br><span class="line">    <span class="string">&#x27;justify&#x27;</span>, <span class="comment">// 对齐</span></span><br><span class="line">    <span class="string">&#x27;quote&#x27;</span>, <span class="comment">// 引用</span></span><br><span class="line">    <span class="comment">// &#x27;emoticon&#x27;, // 表情</span></span><br><span class="line">    <span class="string">&#x27;image&#x27;</span>, <span class="comment">// 图片</span></span><br><span class="line">    <span class="string">&#x27;video&#x27;</span>, <span class="comment">// 视频</span></span><br><span class="line">    <span class="comment">// &#x27;table&#x27;, // 表格</span></span><br><span class="line">    <span class="comment">// &#x27;code&#x27;, // 代码</span></span><br><span class="line">    <span class="string">&#x27;splitLine&#x27;</span>, <span class="comment">// 分割线</span></span><br><span class="line">    <span class="string">&#x27;undo&#x27;</span>, <span class="comment">// 撤销</span></span><br><span class="line">    <span class="string">&#x27;redo&#x27;</span> <span class="comment">// 恢复</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">fontNames</span>: [</span><br><span class="line">    <span class="string">&#x27;黑体&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;仿宋&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;楷体&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;宋体&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;微软雅黑&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Arial&#x27;</span></span><br><span class="line">  ], <span class="comment">// 常用字体</span></span><br><span class="line">  <span class="attr">lineHeights</span>: [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1.15&#x27;</span>, <span class="string">&#x27;1.6&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;2.5&#x27;</span>, <span class="string">&#x27;3&#x27;</span>],</span><br><span class="line">  <span class="attr">uploadImgAccept</span>: [<span class="string">&#x27;jpg&#x27;</span>, <span class="string">&#x27;jpeg&#x27;</span>, <span class="string">&#x27;png&#x27;</span>, <span class="string">&#x27;gif&#x27;</span>, <span class="string">&#x27;bmp&#x27;</span>, <span class="string">&#x27;webp&#x27;</span>], <span class="comment">// 限制图片类型</span></span><br><span class="line">  <span class="attr">uploadVideoAccept</span>: [<span class="string">&#x27;mp4&#x27;</span>] <span class="comment">// 限制视频类型</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  defaultConfig</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在<code>WangEditor</code>文件夹下新建<code>index.vue</code>文件，写入以下代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;editor&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> WangEditor <span class="keyword">from</span> <span class="string">&#x27;wangeditor&#x27;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">&#x27;./config&#x27;</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>: <span class="string">&#x27;WangEditor&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">editorE</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 编辑器的对象</span></span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">value</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">type</span>: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 编辑器高度</span></span></span><br><span class="line"><span class="javascript">      <span class="attr">height</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">type</span>: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">default</span>: <span class="number">200</span></span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 限制图片大小 M</span></span></span><br><span class="line"><span class="javascript">      <span class="attr">uploadImgMaxSize</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">type</span>: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">default</span>: <span class="number">5</span></span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 限制视频大小 M</span></span></span><br><span class="line"><span class="javascript">      <span class="attr">uploadVideoMaxSize</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">type</span>: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">default</span>: <span class="number">500</span></span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="attr">placeholder</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">type</span>: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">default</span>: <span class="string">&#x27;请输入内容...&#x27;</span></span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="attr">config</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">default</span>: <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> &#123;&#125;;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">needConfig</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123; ...config.defaultConfig, ...this.config &#125;;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">value</span>(<span class="params">val</span>)</span> &#123; <span class="comment">// 普通的watch监听</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (val !== <span class="built_in">this</span>.editorE.txt.html()) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.editorE.txt.html(val);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> that = <span class="built_in">this</span>;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 初始化编辑框</span></span></span><br><span class="line"><span class="javascript">      that.init();</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 窗口发生变化，重新初始化编辑器，这里做节流操作</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;resize&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        that.editorE.destroy(); <span class="comment">// 销毁</span></span></span><br><span class="line"><span class="javascript">        that.editorE = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">        that.init();</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">beforeDestroy</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 销毁编辑器</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.editorE.destroy();</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.editorE = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">init</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> that = <span class="built_in">this</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">/* 实例化 */</span></span></span><br><span class="line"><span class="javascript">        that.editorE = <span class="keyword">new</span> WangEditor(that.$refs.editor);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 设置富文本的高度</span></span></span><br><span class="line"><span class="javascript">        that.editorE.config.height = that.height;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 取消自动 focus</span></span></span><br><span class="line"><span class="javascript">        that.editorE.config.focus = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 配置菜单</span></span></span><br><span class="line"><span class="javascript">        that.editorE.config.menus = that.needConfig.menus;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 配置字体</span></span></span><br><span class="line"><span class="javascript">        that.editorE.config.fontNames = that.needConfig.fontNames;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 默认提示</span></span></span><br><span class="line"><span class="javascript">        that.editorE.config.placeholder = that.placeholder;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 配置全屏功能 默认全屏</span></span></span><br><span class="line"><span class="javascript">        that.editorE.config.showFullScreen = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//  配置行高</span></span></span><br><span class="line"><span class="javascript">        that.editorE.config.lineHeights = that.needConfig.lineHeights;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 设置菜单栏提示为上标还是下标</span></span></span><br><span class="line"><span class="javascript">        that.editorE.config.menuTooltipPosition = <span class="string">&#x27;down&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 配置element ui message提示</span></span></span><br><span class="line"><span class="javascript">        that.editorE.config.customAlert = <span class="function">(<span class="params">s, t</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">switch</span> (t) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">case</span> <span class="string">&#x27;success&#x27;</span>:</span></span><br><span class="line"><span class="javascript">              that.$message.success(s);</span></span><br><span class="line"><span class="javascript">              <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">case</span> <span class="string">&#x27;info&#x27;</span>:</span></span><br><span class="line"><span class="javascript">              that.$message.info(s);</span></span><br><span class="line"><span class="javascript">              <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">case</span> <span class="string">&#x27;warning&#x27;</span>:</span></span><br><span class="line"><span class="javascript">              that.$message.warning(s);</span></span><br><span class="line"><span class="javascript">              <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">case</span> <span class="string">&#x27;error&#x27;</span>:</span></span><br><span class="line"><span class="javascript">              that.$message.error(s);</span></span><br><span class="line"><span class="javascript">              <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">default</span>:</span></span><br><span class="line"><span class="javascript">              that.$message.info(s);</span></span><br><span class="line"><span class="javascript">              <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">          &#125;</span></span><br><span class="line"><span class="javascript">        &#125;;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 创建编辑器</span></span></span><br><span class="line"><span class="javascript">        that.editorE.create();</span></span><br><span class="line"><span class="javascript">        that.$nextTick(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 绑定值</span></span></span><br><span class="line"><span class="javascript">          that.editorE.txt.html(<span class="built_in">this</span>.value);</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 监控编辑器内容变化，同步更新到文本 向上传递更新</span></span></span><br><span class="line"><span class="javascript">        that.editorE.config.onchange = <span class="function"><span class="keyword">function</span>(<span class="params">html</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          that.$emit(<span class="string">&#x27;input&#x27;</span>, html);</span></span><br><span class="line"><span class="javascript">        &#125;;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  ::v-deep .w-e-toolbar &#123;</span></span><br><span class="line"><span class="css">    border-color: <span class="number">#d4d4d4</span> <span class="meta">!important</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  ::v-deep .w-e-text-container &#123;</span></span><br><span class="line"><span class="css">    border-color: <span class="number">#d4d4d4</span> <span class="meta">!important</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h4><h5 id="①-使用wangeditor实现的上传方式"><a href="#①-使用wangeditor实现的上传方式" class="headerlink" title="① 使用wangeditor实现的上传方式"></a>① 使用<code>wangeditor</code>实现的上传方式</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 图片上传</span></span><br><span class="line"><span class="comment">// 隐藏插入网络图片功能</span></span><br><span class="line">that.editorE.config.showLinkImg = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 配置 server 接口地址</span></span><br><span class="line">that.editorE.config.uploadImgServer = <span class="string">&#x27;xxx&#x27;</span>;</span><br><span class="line"><span class="comment">// 默认限制图片大小是 5M</span></span><br><span class="line">that.editorE.config.uploadImgMaxSize = that.uploadImgMaxSize * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"><span class="comment">// 限制图片类型</span></span><br><span class="line">that.editorE.config.uploadImgAccept = that.needConfig.uploadImgAccept;</span><br><span class="line"><span class="comment">// 自定义上传的参数</span></span><br><span class="line">that.editorE.config.uploadFileName = <span class="string">&#x27;file&#x27;</span>;</span><br><span class="line"><span class="comment">// 自定义头部token信息</span></span><br><span class="line">that.editorE.config.uploadImgHeaders = &#123;&#125;;</span><br><span class="line"><span class="comment">// 限制一次最多能传几张图片</span></span><br><span class="line">that.editorE.config.uploadImgMaxLength = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 设置请求参数</span></span><br><span class="line">that.editorE.config.uploadImgParams = &#123;&#125;;</span><br><span class="line"><span class="comment">// timeout 即上传接口等待的最大时间，默认是 10 秒钟，可以自己修改</span></span><br><span class="line">that.editorE.config.uploadImgTimeout = <span class="number">10</span> * <span class="number">1000</span>;</span><br><span class="line"><span class="comment">// 回调函数</span></span><br><span class="line">that.editorE.config.uploadImgHooks = &#123;</span><br><span class="line">  <span class="comment">// 上传图片之前</span></span><br><span class="line">  <span class="function"><span class="title">before</span>(<span class="params">xhr</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(xhr);</span><br><span class="line">    <span class="comment">// 可阻止图片上传</span></span><br><span class="line">    <span class="comment">// return &#123;</span></span><br><span class="line">    <span class="comment">//   prevent: true,</span></span><br><span class="line">    <span class="comment">//   msg: &#x27;需要提示给用户的错误信息&#x27;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 图片上传并返回了结果，图片插入已成功</span></span><br><span class="line">  <span class="function"><span class="title">success</span>(<span class="params">xhr</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;success&#x27;</span>, xhr);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 图片上传并返回了结果，但图片插入时出错了</span></span><br><span class="line">  <span class="function"><span class="title">fail</span>(<span class="params">xhr, editor, resData</span>)</span> &#123;</span><br><span class="line">    that.$message.error(<span class="string">&#x27;插入图片失败&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;fail&#x27;</span>, resData);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 上传图片出错，一般为 http 请求的错误</span></span><br><span class="line">  <span class="function"><span class="title">error</span>(<span class="params">xhr, editor, resData</span>)</span> &#123;</span><br><span class="line">    that.$message.error(<span class="string">&#x27;上传图片出错&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;error&#x27;</span>, xhr, resData);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 上传图片超时</span></span><br><span class="line">  <span class="function"><span class="title">timeout</span>(<span class="params">xhr</span>)</span> &#123;</span><br><span class="line">    that.$message.error(<span class="string">&#x27;上传图片超时&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;timeout&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 图片上传并返回了结果，想要自己把图片插入到编辑器中</span></span><br><span class="line">  <span class="comment">// 例如服务器端返回的不是 &#123; errno: 0, data: [...] &#125; 这种格式，可使用 customInsert</span></span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">customInsert</span>(<span class="params">insertImgFn, result</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// result 即服务端返回的接口</span></span><br><span class="line">    <span class="keyword">const</span> imgUrl = result.url;</span><br><span class="line">    <span class="comment">// insertImgFn 可把图片插入到编辑器，传入图片 src ，执行函数即可</span></span><br><span class="line">    insertImgFn(imgUrl);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="②自己实现图片上传，如上传图片到某个云服务器"><a href="#②自己实现图片上传，如上传图片到某个云服务器" class="headerlink" title="②自己实现图片上传，如上传图片到某个云服务器"></a>②自己实现图片上传，如上传图片到某个云服务器</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">that.editorE.config.customUploadImg = <span class="function"><span class="keyword">function</span> (<span class="params">resultFiles, insertImgFn</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// resultFiles 是 input 中选中的文件列表</span></span><br><span class="line">    <span class="comment">// insertImgFn 是获取图片 url 后，插入到编辑器的方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上传图片，返回结果，将图片插入到编辑器中</span></span><br><span class="line">    insertImgFn(imgUrl)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="视频上传"><a href="#视频上传" class="headerlink" title="视频上传"></a>视频上传</h4><p>视频上传建议不要使用<code>wangeditor</code>自带的上传方式，改用自定义上传。因为视频文件普遍较大，且自带的上传回调函数里面，没有上传中阶段的信息反馈，让用户等得很焦虑。所以这里自定义视频上传，给用户一个上传进度反馈。代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;position: relative&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;editor&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;dataUploading&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tips-progress&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- el-ui进度条组件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-progress</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;width: 60%&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:text-inside</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:stroke-width</span>=<span class="string">&quot;18&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:percentage</span>=<span class="string">&quot;uploadProgress&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:color</span>=<span class="string">&quot;customColors&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">status</span>=<span class="string">&quot;success&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-progress</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  ......</span></span><br><span class="line"><span class="javascript">  </span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">editorE</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 编辑器的对象</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">dataUploading</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">uploadProgress</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">customColors</span>: [</span></span><br><span class="line"><span class="javascript">          &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">color</span>: <span class="string">&#x27;#f56c6c&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">percentage</span>: <span class="number">20</span></span></span><br><span class="line"><span class="javascript">          &#125;,</span></span><br><span class="line"><span class="javascript">          &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">color</span>: <span class="string">&#x27;#e6a23c&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">percentage</span>: <span class="number">40</span></span></span><br><span class="line"><span class="javascript">          &#125;,</span></span><br><span class="line"><span class="javascript">          &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">color</span>: <span class="string">&#x27;#5cb87a&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">percentage</span>: <span class="number">60</span></span></span><br><span class="line"><span class="javascript">          &#125;,</span></span><br><span class="line"><span class="javascript">          &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">color</span>: <span class="string">&#x27;#1989fa&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">percentage</span>: <span class="number">80</span></span></span><br><span class="line"><span class="javascript">          &#125;,</span></span><br><span class="line"><span class="javascript">          &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">color</span>: <span class="string">&#x27;#6f7ad3&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">percentage</span>: <span class="number">100</span></span></span><br><span class="line"><span class="javascript">          &#125;</span></span><br><span class="line"><span class="javascript">        ] </span></span><br><span class="line"><span class="javascript">        ......  </span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">      </span></span><br><span class="line"><span class="javascript">    ......</span></span><br><span class="line"><span class="javascript">      </span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">init</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        ......</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 视频上传</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 隐藏插入网络视频功能</span></span></span><br><span class="line"><span class="javascript">        that.editorE.config.showLinkVideo = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 限制视频大小</span></span></span><br><span class="line"><span class="javascript">        that.editorE.config.uploadVideoMaxSize = that.uploadVideoMaxSize * <span class="number">1024</span> * <span class="number">1024</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 限制视频类型</span></span></span><br><span class="line"><span class="javascript">        that.editorE.config.uploadVideoAccept = that.needConfig.uploadVideoAccept;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 自定义视频上传</span></span></span><br><span class="line"><span class="javascript">        that.editorE.config.customUploadVideo = <span class="function"><span class="keyword">function</span>(<span class="params">resultFiles, insertVideoFn</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          that.uploadProgress = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 显示进度条</span></span></span><br><span class="line"><span class="javascript">          that.dataUploading = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">const</span> file = resultFiles[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">          axios.post(<span class="string">&#x27;xxxx&#x27;</span>, file, &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">onUploadProgress</span>: <span class="function"><span class="params">progressEvent</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">              <span class="comment">// 视频上传进度</span></span></span><br><span class="line"><span class="javascript">              <span class="keyword">const</span> percent = (progressEvent.loaded / progressEvent.total * <span class="number">100</span>) | <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">              that.uploadProgress = percent</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">          &#125;)</span></span><br><span class="line"><span class="javascript">            .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">const</span> &#123; status, data &#125; = res;</span></span><br><span class="line"><span class="javascript">              <span class="comment">// 不管上没上传成功都关闭进度条</span></span></span><br><span class="line"><span class="javascript">              that.dataUploading = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">               <span class="keyword">if</span>(status === <span class="number">201</span>)&#123;</span></span><br><span class="line"><span class="javascript">                   insertVideoFn(data.url);</span></span><br><span class="line"><span class="javascript">               &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                   that.$message.error(<span class="string">&#x27;视频上传失败&#x27;</span>);</span></span><br><span class="line"><span class="javascript">               &#125;</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript">        &#125;;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.tips-progress</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">    <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">line-height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span></span><br><span class="line"><span class="css">    <span class="attribute">z-index</span>: <span class="number">100000</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">    <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="css">    <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  ::v-deep .w-e-toolbar &#123;</span></span><br><span class="line"><span class="css">    border-color: <span class="number">#d4d4d4</span> <span class="meta">!important</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  ::v-deep .w-e-text-container &#123;</span></span><br><span class="line"><span class="css">    border-color: <span class="number">#d4d4d4</span> <span class="meta">!important</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="自定义菜单-一键排版"><a href="#自定义菜单-一键排版" class="headerlink" title="自定义菜单-一键排版"></a>自定义菜单-一键排版</h4><p>怎么自定义菜单可以看官方文档，这里不多说，在<code>WangEditor</code>文件夹下新建<code>wLayoutMenu.js</code>文件，写入以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> E <span class="keyword">from</span> <span class="string">&#x27;wangeditor&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; $, BtnMenu &#125; = E;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置默认样式</span></span><br><span class="line"><span class="keyword">const</span> initPStyle = <span class="string">&#x27;text-indent: 2em; font-size: 20px !important; line-height: 1.5; font-family: 仿宋&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">wLayoutMenu</span> <span class="keyword">extends</span> <span class="title">BtnMenu</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">editor</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// data-title属性表示当鼠标悬停在该按钮上时提示该按钮的功能简述</span></span><br><span class="line">    <span class="keyword">const</span> $elem = $(<span class="string">&#x27;&lt;div class=&quot;w-e-menu&quot; style=&quot;width: 80px;font-weight: bold;color: #999&quot; data-title=&quot;一键排版&quot;&gt;一键排版&lt;/div&gt;&#x27;</span>);</span><br><span class="line">    <span class="built_in">super</span>($elem, editor);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">clickHandler</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取富文本编辑区的DOM</span></span><br><span class="line">    <span class="keyword">const</span> childDomArr = <span class="built_in">this</span>.editor.$textElem.elems[<span class="number">0</span>].childNodes;</span><br><span class="line">    <span class="keyword">if</span> (childDomArr.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      childDomArr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 富文本编辑的内容默认外层都是由p标签包容，所以直接在p标签上进行设置默认排版的样式</span></span><br><span class="line">        <span class="keyword">if</span> (item.nodeName === <span class="string">&#x27;P&#x27;</span>) &#123;</span><br><span class="line">          item.style.cssText = initPStyle;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (item.childNodes.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="comment">// 遍历找到子元素中存在img标签的内容进行设置默认样式</span></span><br><span class="line">          item.childNodes.forEach(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (child.localName === <span class="string">&#x27;img&#x27;</span>) &#123;</span><br><span class="line">              <span class="comment">// 获取原图width、height</span></span><br><span class="line">              <span class="keyword">const</span> width = child.width;</span><br><span class="line">              <span class="keyword">const</span> height = child.height;</span><br><span class="line">              <span class="keyword">const</span> ratio = width / height;</span><br><span class="line">              <span class="keyword">const</span> setW = <span class="number">600</span>;</span><br><span class="line">              <span class="keyword">let</span> setH = <span class="number">0</span>; <span class="comment">// 等比计算</span></span><br><span class="line">              <span class="keyword">if</span> (setW / setH !== ratio) &#123;</span><br><span class="line">                setH = setW / ratio;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment">// 给img标签设置行内样式</span></span><br><span class="line">              child.setAttribute(<span class="string">&#x27;width&#x27;</span>, setW);</span><br><span class="line">              child.setAttribute(<span class="string">&#x27;height&#x27;</span>, setH);</span><br><span class="line">              child.style.cssText = <span class="string">&#x27;text-align: center&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 菜单是否被激活（如果不需要，这个函数可以空着）</span></span><br><span class="line">  <span class="function"><span class="title">tryChangeActive</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>index.vue</code>引入使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wLayoutMenu <span class="keyword">from</span> <span class="string">&#x27;./wLayoutMenu&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">init() &#123;</span><br><span class="line">......</span><br><span class="line">// 注册菜单</span><br><span class="line">    that.editorE.menus.extend(&#x27;shortcutLayout&#x27;, wLayoutMenu);</span><br><span class="line">    // 配置菜单</span><br><span class="line">    that.editorE.config.menus = that.needConfig.menus;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>config.js</code> 中配置一键排版的位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">menus: [</span><br><span class="line">  <span class="string">&#x27;head&#x27;</span>, <span class="comment">// 标题</span></span><br><span class="line">  <span class="string">&#x27;bold&#x27;</span>, <span class="comment">// 加粗</span></span><br><span class="line">  <span class="string">&#x27;fontSize&#x27;</span>, <span class="comment">// 字号</span></span><br><span class="line">  <span class="string">&#x27;fontName&#x27;</span>, <span class="comment">// 字体</span></span><br><span class="line">  <span class="string">&#x27;italic&#x27;</span>, <span class="comment">// 斜体</span></span><br><span class="line">  <span class="string">&#x27;underline&#x27;</span>, <span class="comment">// 下划线</span></span><br><span class="line">  <span class="string">&#x27;strikeThrough&#x27;</span>, <span class="comment">// 删除线</span></span><br><span class="line">  <span class="string">&#x27;indent&#x27;</span>, <span class="comment">// 缩进</span></span><br><span class="line">  <span class="string">&#x27;lineHeight&#x27;</span>, <span class="comment">// 行高</span></span><br><span class="line">  <span class="string">&#x27;foreColor&#x27;</span>, <span class="comment">// 字体颜色</span></span><br><span class="line">  <span class="string">&#x27;backColor&#x27;</span>, <span class="comment">// 背景色</span></span><br><span class="line">  <span class="string">&#x27;link&#x27;</span>, <span class="comment">// 链接</span></span><br><span class="line">  <span class="string">&#x27;list&#x27;</span>, <span class="comment">// 序列</span></span><br><span class="line">  <span class="comment">// &#x27;todo&#x27;, // 待办事项</span></span><br><span class="line">  <span class="string">&#x27;justify&#x27;</span>, <span class="comment">// 对齐</span></span><br><span class="line">  <span class="string">&#x27;quote&#x27;</span>, <span class="comment">// 引用</span></span><br><span class="line">  <span class="comment">// &#x27;emoticon&#x27;, // 表情</span></span><br><span class="line">  <span class="string">&#x27;image&#x27;</span>, <span class="comment">// 图片</span></span><br><span class="line">  <span class="string">&#x27;video&#x27;</span>, <span class="comment">// 视频</span></span><br><span class="line">  <span class="comment">// &#x27;table&#x27;, // 表格</span></span><br><span class="line">  <span class="comment">// &#x27;code&#x27;, // 代码</span></span><br><span class="line">  <span class="string">&#x27;splitLine&#x27;</span>, <span class="comment">// 分割线</span></span><br><span class="line">  <span class="string">&#x27;undo&#x27;</span>, <span class="comment">// 撤销</span></span><br><span class="line">  <span class="string">&#x27;redo&#x27;</span> <span class="comment">// 恢复</span></span><br><span class="line">  <span class="string">&#x27;shortcutLayout&#x27;</span> <span class="comment">// 一键排版  放在最后面，也可以放在其他位置</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure><h4 id="粘贴处理"><a href="#粘贴处理" class="headerlink" title="粘贴处理"></a>粘贴处理</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关闭粘贴样式的过滤</span></span><br><span class="line">that.editorE.config.pasteFilterStyle = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 自定义处理粘贴的文本内容</span></span><br><span class="line">that.editorE.config.pasteTextHandle = <span class="function"><span class="keyword">function</span>(<span class="params">pasteStr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 对粘贴的文本进行处理，然后返回处理后的结果</span></span><br><span class="line">  <span class="comment">// 这里处理图片，给粘贴的图片宽度设置一个最大宽度100%，视频同理  </span></span><br><span class="line">  <span class="keyword">const</span> htmlDom = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">  htmlDom.innerHTML = pasteStr;</span><br><span class="line">  <span class="keyword">const</span> imgDomArr = htmlDom.querySelectorAll(<span class="string">&#x27;img[src]&#x27;</span>);</span><br><span class="line">  imgDomArr.forEach(<span class="function"><span class="params">img</span> =&gt;</span> &#123;</span><br><span class="line">    img.style.maxWidth = <span class="string">&#x27;100%&#x27;</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> result = htmlDom.innerHTML;</span><br><span class="line">  htmlDom.remove();</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="el-ui-form表单内容验证"><a href="#el-ui-form表单内容验证" class="headerlink" title="el-ui form表单内容验证"></a><code>el-ui</code> <code>form</code>表单内容验证</h4><p>参考<code>el-input</code>组件，当输入框失去焦点的时候要触发表单验证，怎么触发我们这个自定义组件的表单验证呢？我们可以写入以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt; script &gt;</span><br><span class="line">    <span class="keyword">import</span> emitter <span class="keyword">from</span> <span class="string">&#x27;element-ui/src/mixins/emitter&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">mixins</span>: [emitter],</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            ......</span><br><span class="line">            <span class="attr">focused</span>: <span class="literal">false</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="function"><span class="title">init</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            .......</span><br><span class="line">            <span class="comment">// 失去焦点处理</span></span><br><span class="line">            that.editorE.config.onblur = <span class="function"><span class="keyword">function</span> (<span class="params">newHtml</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 用于el-form表单验证，具体参考el-input</span></span><br><span class="line">                <span class="keyword">if</span> (that.focused) &#123;</span><br><span class="line">                    that.focused = <span class="literal">false</span>;</span><br><span class="line">                    that.dispatch(<span class="string">&#x27;ElFormItem&#x27;</span>, <span class="string">&#x27;el.form.blur&#x27;</span>, [newHtml]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">// 聚焦处理</span></span><br><span class="line">            that.editorE.config.onfocus = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                that.focused = <span class="literal">true</span>;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; &lt;</span><br><span class="line">/script&gt;</span><br></pre></td></tr></table></figure><p>三、完整代码</p><h4 id="config-js"><a href="#config-js" class="headerlink" title="config.js"></a><code>config.js</code></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> defaultConfig = &#123;</span><br><span class="line">  <span class="attr">menus</span>: [</span><br><span class="line">    <span class="string">&#x27;head&#x27;</span>, <span class="comment">// 标题</span></span><br><span class="line">    <span class="string">&#x27;bold&#x27;</span>, <span class="comment">// 加粗</span></span><br><span class="line">    <span class="string">&#x27;fontSize&#x27;</span>, <span class="comment">// 字号</span></span><br><span class="line">    <span class="string">&#x27;fontName&#x27;</span>, <span class="comment">// 字体</span></span><br><span class="line">    <span class="string">&#x27;italic&#x27;</span>, <span class="comment">// 斜体</span></span><br><span class="line">    <span class="string">&#x27;underline&#x27;</span>, <span class="comment">// 下划线</span></span><br><span class="line">    <span class="string">&#x27;strikeThrough&#x27;</span>, <span class="comment">// 删除线</span></span><br><span class="line">    <span class="string">&#x27;indent&#x27;</span>, <span class="comment">// 缩进</span></span><br><span class="line">    <span class="string">&#x27;lineHeight&#x27;</span>, <span class="comment">// 行高</span></span><br><span class="line">    <span class="string">&#x27;foreColor&#x27;</span>, <span class="comment">// 字体颜色</span></span><br><span class="line">    <span class="string">&#x27;backColor&#x27;</span>, <span class="comment">// 背景色</span></span><br><span class="line">    <span class="string">&#x27;link&#x27;</span>, <span class="comment">// 链接</span></span><br><span class="line">    <span class="string">&#x27;list&#x27;</span>, <span class="comment">// 序列</span></span><br><span class="line">    <span class="comment">// &#x27;todo&#x27;, // 待办事项</span></span><br><span class="line">    <span class="string">&#x27;justify&#x27;</span>, <span class="comment">// 对齐</span></span><br><span class="line">    <span class="string">&#x27;quote&#x27;</span>, <span class="comment">// 引用</span></span><br><span class="line">    <span class="comment">// &#x27;emoticon&#x27;, // 表情</span></span><br><span class="line">    <span class="string">&#x27;image&#x27;</span>, <span class="comment">// 图片</span></span><br><span class="line">    <span class="string">&#x27;video&#x27;</span>, <span class="comment">// 视频</span></span><br><span class="line">    <span class="comment">// &#x27;table&#x27;, // 表格</span></span><br><span class="line">    <span class="comment">// &#x27;code&#x27;, // 代码</span></span><br><span class="line">    <span class="string">&#x27;splitLine&#x27;</span>, <span class="comment">// 分割线</span></span><br><span class="line">    <span class="string">&#x27;undo&#x27;</span>, <span class="comment">// 撤销</span></span><br><span class="line">    <span class="string">&#x27;redo&#x27;</span> <span class="comment">// 恢复</span></span><br><span class="line">    <span class="comment">// &#x27;shortcutLayout&#x27; // 一键排版</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">fontNames</span>: [</span><br><span class="line">    <span class="string">&#x27;黑体&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;仿宋&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;楷体&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;宋体&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;微软雅黑&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Arial&#x27;</span></span><br><span class="line">  ], <span class="comment">// 字体</span></span><br><span class="line">  <span class="attr">lineHeights</span>: [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1.15&#x27;</span>, <span class="string">&#x27;1.6&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;2.5&#x27;</span>, <span class="string">&#x27;3&#x27;</span>],</span><br><span class="line">  <span class="attr">uploadImgAccept</span>: [<span class="string">&#x27;jpg&#x27;</span>, <span class="string">&#x27;jpeg&#x27;</span>, <span class="string">&#x27;png&#x27;</span>, <span class="string">&#x27;gif&#x27;</span>, <span class="string">&#x27;bmp&#x27;</span>, <span class="string">&#x27;webp&#x27;</span>], <span class="comment">// 限制图片类型</span></span><br><span class="line">  <span class="attr">uploadVideoAccept</span>: [<span class="string">&#x27;mp4&#x27;</span>] <span class="comment">// 限制视频类型</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  defaultConfig</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="wLayoutMenu-js"><a href="#wLayoutMenu-js" class="headerlink" title="wLayoutMenu.js"></a><code>wLayoutMenu.js</code></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> E <span class="keyword">from</span> <span class="string">&#x27;wangeditor&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; $, BtnMenu &#125; = E;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置默认样式</span></span><br><span class="line"><span class="keyword">const</span> initPStyle = <span class="string">&#x27;text-indent: 2em; font-size: 20px !important; line-height: 1.5; font-family: 仿宋&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">wLayoutMenu</span> <span class="keyword">extends</span> <span class="title">BtnMenu</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">editor</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// data-title属性表示当鼠标悬停在该按钮上时提示该按钮的功能简述</span></span><br><span class="line">    <span class="keyword">const</span> $elem = $(<span class="string">&#x27;&lt;div class=&quot;w-e-menu&quot; style=&quot;width: 80px;font-weight: bold;color: #999&quot; data-title=&quot;一键排版&quot;&gt;一键排版&lt;/div&gt;&#x27;</span>);</span><br><span class="line">    <span class="built_in">super</span>($elem, editor);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">clickHandler</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取富文本编辑区的DOM</span></span><br><span class="line">    <span class="keyword">const</span> childDomArr = <span class="built_in">this</span>.editor.$textElem.elems[<span class="number">0</span>].childNodes;</span><br><span class="line">    <span class="keyword">if</span> (childDomArr.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      childDomArr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 富文本编辑的内容默认外层都是由p标签包容，所以直接在p标签上进行设置默认排版的样式</span></span><br><span class="line">        <span class="keyword">if</span> (item.nodeName === <span class="string">&#x27;P&#x27;</span>) &#123;</span><br><span class="line">          item.style.cssText = initPStyle;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (item.childNodes.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="comment">// 遍历找到子元素中存在img标签的内容进行设置默认样式</span></span><br><span class="line">          item.childNodes.forEach(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (child.localName === <span class="string">&#x27;img&#x27;</span>) &#123;</span><br><span class="line">              <span class="comment">// 获取原图width、height</span></span><br><span class="line">              <span class="keyword">const</span> width = child.width;</span><br><span class="line">              <span class="keyword">const</span> height = child.height;</span><br><span class="line">              <span class="keyword">const</span> ratio = width / height;</span><br><span class="line">              <span class="keyword">const</span> setW = <span class="number">600</span>;</span><br><span class="line">              <span class="keyword">let</span> setH = <span class="number">0</span>; <span class="comment">// 等比计算</span></span><br><span class="line">              <span class="keyword">if</span> (setW / setH !== ratio) &#123;</span><br><span class="line">                setH = setW / ratio;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment">// 给img标签设置行内样式</span></span><br><span class="line">              child.setAttribute(<span class="string">&#x27;width&#x27;</span>, setW);</span><br><span class="line">              child.setAttribute(<span class="string">&#x27;height&#x27;</span>, setH);</span><br><span class="line">              child.style.cssText = <span class="string">&#x27;text-align: center&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 菜单是否被激活（如果不需要，这个函数可以空着）</span></span><br><span class="line">  <span class="function"><span class="title">tryChangeActive</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="index-vue"><a href="#index-vue" class="headerlink" title="index.vue"></a><code>index.vue</code></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;position: relative&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;pareStyle&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;editor&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;dataUploading&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tips-progress&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">el-progress</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">style</span>=<span class="string">&quot;width: 60%&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">:text-inside</span>=<span class="string">&quot;true&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">:stroke-width</span>=<span class="string">&quot;$px(18)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">:percentage</span>=<span class="string">&quot;uploadProgress&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">:color</span>=<span class="string">&quot;customColors&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">status</span>=<span class="string">&quot;success&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">el-progress</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">import</span> WangEditor <span class="keyword">from</span> <span class="string">&#x27;wangeditor&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">&#x27;./config&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">import</span> wLayoutMenu <span class="keyword">from</span> <span class="string">&#x27;./wLayoutMenu&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">import</span> emitter <span class="keyword">from</span> <span class="string">&#x27;element-ui/src/mixins/emitter&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">name</span>: <span class="string">&#x27;WangEditor&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">mixins</span>: [emitter],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">editorE</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 编辑器的对象</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">dataUploading</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">uploadProgress</span>: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">pareStyle</span>: &#123;&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">focused</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">customColors</span>: [</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">color</span>: <span class="string">&#x27;#f56c6c&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">percentage</span>: <span class="number">20</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">color</span>: <span class="string">&#x27;#e6a23c&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">percentage</span>: <span class="number">40</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">color</span>: <span class="string">&#x27;#5cb87a&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">percentage</span>: <span class="number">60</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">color</span>: <span class="string">&#x27;#1989fa&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">percentage</span>: <span class="number">80</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">color</span>: <span class="string">&#x27;#6f7ad3&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">percentage</span>: <span class="number">100</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        ]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">value</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">type</span>: <span class="built_in">String</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">height</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">type</span>: <span class="built_in">Number</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">default</span>: <span class="number">200</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// M</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">uploadImgMaxSize</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">type</span>: <span class="built_in">Number</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">default</span>: <span class="number">5</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// M</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">uploadVideoMaxSize</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">type</span>: <span class="built_in">Number</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">default</span>: <span class="number">500</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">placeholder</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">type</span>: <span class="built_in">String</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">default</span>: <span class="string">&#x27;请输入内容...&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">config</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">default</span>: <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="keyword">return</span> &#123;&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="function"><span class="title">needConfig</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">return</span> &#123; ...config.defaultConfig, ...this.config &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">watch</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="function"><span class="title">value</span>(<span class="params">val</span>)</span> &#123; <span class="comment">// 普通的watch监听</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">if</span> (val !== <span class="built_in">this</span>.editorE.txt.html()) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="built_in">this</span>.editorE.txt.html(val);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">const</span> that = <span class="built_in">this</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// 初始化编辑框</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      that.init();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;resize&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.destroy();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE = <span class="literal">null</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.pareStyle = &#123;&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.init();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">beforeDestroy</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// 销毁编辑器</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.editorE.destroy();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.editorE = <span class="literal">null</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="function"><span class="title">init</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">const</span> that = <span class="built_in">this</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">/* 实例化 */</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE = <span class="keyword">new</span> WangEditor(that.$refs.editor);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 设置富文本的高度</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.config.height = that.height;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 取消自动 focus</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.config.focus = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 注册菜单</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.menus.extend(<span class="string">&#x27;shortcutLayout&#x27;</span>, wLayoutMenu);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 配置菜单</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.config.menus = that.needConfig.menus;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 配置字体</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.config.fontNames = that.needConfig.fontNames;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 默认提示</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.config.placeholder = that.placeholder;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 配置全屏功能 默认全屏</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.config.showFullScreen = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//  配置行高</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.config.lineHeights = that.needConfig.lineHeights;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 设置菜单栏提示为上标还是下标</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.config.menuTooltipPosition = <span class="string">&#x27;down&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 配置element ui message提示</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.config.customAlert = <span class="function">(<span class="params">s, t</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="keyword">switch</span> (t) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">case</span> <span class="string">&#x27;success&#x27;</span>:</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              that.$message.success(s);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="keyword">break</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">case</span> <span class="string">&#x27;info&#x27;</span>:</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              that.$message.info(s);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="keyword">break</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">case</span> <span class="string">&#x27;warning&#x27;</span>:</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              that.$message.warning(s);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="keyword">break</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">case</span> <span class="string">&#x27;error&#x27;</span>:</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              that.$message.error(s);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="keyword">break</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">default</span>:</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              that.$message.info(s);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="keyword">break</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 图片上传</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 隐藏插入网络图片功能</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.config.showLinkImg = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 默认限制图片大小是 5M</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.config.uploadImgMaxSize = that.uploadImgMaxSize * <span class="number">1024</span> * <span class="number">1024</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 限制图片类型</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.config.uploadImgAccept = that.needConfig.uploadImgAccept;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 限制一次最多能传几张图片</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.config.uploadImgMaxLength = <span class="number">1</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.config.customUploadImg = <span class="function"><span class="keyword">function</span>(<span class="params">resultFiles, insertImgFn</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          that.uploadProgress = <span class="number">0</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          that.dataUploading = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="keyword">const</span> file = resultFiles[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          axios.post(<span class="string">&#x27;xxxx&#x27;</span>, file, &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">onUploadProgress</span>: <span class="function"><span class="params">progressEvent</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="comment">// 图片上传进度</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="keyword">const</span> percent = (progressEvent.loaded / progressEvent.total * <span class="number">100</span>) | <span class="number">0</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              that.uploadProgress = percent</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="keyword">const</span> &#123; status, data &#125; = res;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="comment">// 不管上没上传成功都关闭进度条</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">              that.dataUploading = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">               <span class="keyword">if</span>(status === <span class="number">201</span>)&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                   insertImgFn(data.url);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">               &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                   that.$message.error(<span class="string">&#x27;图片上传失败&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">               &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;);  </span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 视频上传</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 隐藏插入网络视频功能</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.config.showLinkVideo = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 限制视频大小</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.config.uploadVideoMaxSize = that.uploadVideoMaxSize * <span class="number">1024</span> * <span class="number">1024</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 限制视频类型</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.config.uploadVideoAccept = that.needConfig.uploadVideoAccept;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 自定义视频上传，由于视频一般较大，需要显示进度，就不用编辑器定义的上传了</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.config.customUploadVideo = <span class="function"><span class="keyword">function</span>(<span class="params">resultFiles, insertVideoFn</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          that.uploadProgress = <span class="number">0</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          that.dataUploading = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="keyword">const</span> file = resultFiles[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          axios.post(<span class="string">&#x27;xxxx&#x27;</span>, file, &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">onUploadProgress</span>: <span class="function"><span class="params">progressEvent</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="comment">// 视频上传进度</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="keyword">const</span> percent = (progressEvent.loaded / progressEvent.total * <span class="number">100</span>) | <span class="number">0</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              that.uploadProgress = percent</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="keyword">const</span> &#123; status, data &#125; = res;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="comment">// 不管上没上传成功都关闭进度条</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">              that.dataUploading = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">               <span class="keyword">if</span>(status === <span class="number">201</span>)&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                   insertVideoFn(data.url);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">               &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                   that.$message.error(<span class="string">&#x27;视频上传失败&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">               &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;);  </span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 粘贴处理</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 关闭粘贴样式的过滤</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.config.pasteFilterStyle = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 自定义处理粘贴的文本内容</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.config.pasteTextHandle = <span class="function"><span class="keyword">function</span>(<span class="params">pasteStr</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="comment">// 对粘贴的文本进行处理，然后返回处理后的结果</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="keyword">const</span> htmlDom = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          htmlDom.innerHTML = pasteStr;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="keyword">const</span> imgDomArr = htmlDom.querySelectorAll(<span class="string">&#x27;img[src]&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          imgDomArr.forEach(<span class="function"><span class="params">img</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            img.style.maxWidth = <span class="string">&#x27;100%&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="keyword">const</span> result = htmlDom.innerHTML;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          htmlDom.remove();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="keyword">return</span> result;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 创建编辑器</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.create();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.$nextTick(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="keyword">const</span> offsetHeight = that.$refs.editor.offsetHeight;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="keyword">const</span> offsetWidth = that.$refs.editor.offsetWidth;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          that.pareStyle = &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">height</span>: <span class="string">`<span class="subst">$&#123;offsetHeight&#125;</span>px`</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">width</span>: <span class="string">`<span class="subst">$&#123;offsetWidth&#125;</span>px`</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          that.editorE.txt.html(<span class="built_in">this</span>.value);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 监控变化，同步更新到文本 向上传递更新</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.config.onchange = <span class="function"><span class="keyword">function</span>(<span class="params">html</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          that.$emit(<span class="string">&#x27;input&#x27;</span>, html);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 失去焦点处理</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.config.onblur = <span class="function"><span class="keyword">function</span>(<span class="params">newHtml</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="comment">// 用于el-form表单验证，具体参考el-input</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="keyword">if</span> (that.focused) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            that.focused = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            that.dispatch(<span class="string">&#x27;ElFormItem&#x27;</span>, <span class="string">&#x27;el.form.blur&#x27;</span>, [newHtml]);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 聚焦处理</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        that.editorE.config.onfocus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          that.focused = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="selector-class">.tips-progress</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">position</span>: absolute;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">left</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">top</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">height</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">line-height</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">z-index</span>: <span class="number">100000</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">display</span>: flex;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">align-items</span>: center;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">justify-content</span>: center;</span></span></span><br><span class="line"><span class="css"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">  ::v-deep .w-e-toolbar &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">    border-color: <span class="number">#d4d4d4</span> <span class="meta">!important</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">  ::v-deep .w-e-text-container &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">    border-color: <span class="number">#d4d4d4</span> <span class="meta">!important</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> wangeditor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node版本管理工具-nvm</title>
      <link href="/articles/20220607dd3496e5f8bd.html"/>
      <url>/articles/20220607dd3496e5f8bd.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很多情况下，为了适应工作、学习我们需要在一个电脑里使用不同版本的<code>node</code>，在切换使用频繁的情况下，就会陷入卸载 ↔ 安装的怪圈，这时候你需要一个趁手的版本管理工具。</p><span id="more"></span><h2 id="安装nvm"><a href="#安装nvm" class="headerlink" title="安装nvm"></a>安装nvm</h2><ol><li><p>首先需要卸载已安装的<code>node.js</code>，卸载完成后，请检查环境变量，如果还有<code>node.js</code>，请去掉，保证系统已经无任何<code>node.js</code>残留。</p></li><li><p>下载地址： <a href="https://github.com/coreybutler/nvm-windows/releases">https://github.com/coreybutler/nvm-windows/releases</a></p><p><img src="https://pic.wjnba.top/img/202206071244482.png" alt="image-20220607123427502"></p></li></ol><p><strong>nvm-setup.zip：安装版（推荐），傻瓜式安装</strong></p><blockquote><p>安装时有两个路径选择（尽量不要出现中文）：</p></blockquote><p><strong>nvm-noinstall.zip：绿色免安装，但需要环境变量配置</strong></p><h2 id="nvm-基本命令使用"><a href="#nvm-基本命令使用" class="headerlink" title="nvm 基本命令使用"></a>nvm 基本命令使用</h2><blockquote><p>命令行工具输入命令即可</p></blockquote><h4 id="版本查看，安装完成后，执行该命令，查看安装版本"><a href="#版本查看，安装完成后，执行该命令，查看安装版本" class="headerlink" title="版本查看，安装完成后，执行该命令，查看安装版本"></a>版本查看，安装完成后，执行该命令，查看安装版本</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nvm v</span><br><span class="line"><span class="comment">//或</span></span><br><span class="line">nvm version </span><br></pre></td></tr></table></figure><h4 id="查看所有可安装-Node-版本号"><a href="#查看所有可安装-Node-版本号" class="headerlink" title="查看所有可安装 Node 版本号"></a>查看所有可安装 <code>Node</code> 版本号</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm list available</span><br></pre></td></tr></table></figure><h4 id="node-安装"><a href="#node-安装" class="headerlink" title="node 安装"></a><code>node</code> 安装</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装最新版本</span></span><br><span class="line">nvm install node</span><br><span class="line"></span><br><span class="line"><span class="comment">//安装指定版本（推荐）</span></span><br><span class="line">nvm install <span class="number">14.8</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//安装指定版本，指定操作系统位数（32/64），不指定使用系统默认</span></span><br><span class="line">nvm install <span class="number">14.8</span><span class="number">.0</span> <span class="number">64</span></span><br></pre></td></tr></table></figure><h4 id="查看已安装node版本"><a href="#查看已安装node版本" class="headerlink" title="查看已安装node版本"></a>查看已安装<code>node</code>版本</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nvm ls</span><br><span class="line"><span class="comment">//或</span></span><br><span class="line">nvm list</span><br></pre></td></tr></table></figure><h4 id="使用指定版本node"><a href="#使用指定版本node" class="headerlink" title="使用指定版本node"></a>使用指定版本<code>node</code></h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 14.17.4 是版本号</span></span><br><span class="line">nvm <span class="keyword">use</span> <span class="number">14.17</span>.<span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定操作系统位数（32/64），不指定使用系统默认</span></span><br><span class="line">nvm <span class="keyword">use</span> <span class="number">14.17</span>.<span class="number">4</span> <span class="number">64</span></span><br></pre></td></tr></table></figure><p><img src="https://pic.wjnba.top/img/202206071244933.png" alt="image-20220607124132696"></p><p>已安装<code>node</code>列表</p><h4 id="卸载已安装node"><a href="#卸载已安装node" class="headerlink" title="卸载已安装node"></a>卸载已安装<code>node</code></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 16.12.0 是版本号</span></span><br><span class="line">nvm uninstall <span class="number">16.12</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是，不同版本的node所使用的全局模块需要分别进行安装</p></blockquote><h4 id="其它命令"><a href="#其它命令" class="headerlink" title="其它命令"></a>其它命令</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//显示node是运行在32位还是64位</span></span><br><span class="line">nvm arch</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启nvm，并设置使用最新node 版本</span></span><br><span class="line">nvm <span class="keyword">on</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭nvm，node 命令不可使用，执行此命令后在执行 use 会重新开起</span></span><br><span class="line">nvm off </span><br><span class="line"></span><br><span class="line"><span class="comment">//设置下载代理，不加可选参数url，显示当前代理，将url设置为none则移除代理</span></span><br><span class="line">nvm proxy [url]</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置node镜像，默认是https://nodejs.org/dist/，可在nvm安装目录→settings.txt中查看</span></span><br><span class="line">nvm node_mirror [url] </span><br><span class="line"></span><br><span class="line"><span class="comment">//设置npm镜像，https://github.com/npm/cli/archive/，可在nvm安装目录→settings.txt中查看</span></span><br><span class="line">nvm npm_mirror [url] </span><br><span class="line"></span><br><span class="line"><span class="comment">//设置不同版本node存储目录，不写path查看当前node存储目录</span></span><br><span class="line">nvm root [path] </span><br></pre></td></tr></table></figure><h4 id="nvm-install-下载安装过慢"><a href="#nvm-install-下载安装过慢" class="headerlink" title="nvm install 下载安装过慢"></a><code>nvm install</code> 下载安装过慢</h4><p>可以使用命令（上边提到的），配置镜像，也可以直接打开<code>nvm</code>安装目录→<code>settings.txt</code> 添加下边代码：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">node_mirror:</span> <span class="symbol">https:</span>/<span class="regexp">/npm.taobao.org/mirrors</span><span class="regexp">/node/</span></span><br><span class="line"><span class="symbol">npm_mirror:</span> <span class="symbol">https:</span>/<span class="regexp">/npm.taobao.org/mirrors</span><span class="regexp">/npm/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图片懒加载</title>
      <link href="/articles/20220530043ea0d0d7dd.html"/>
      <url>/articles/20220530043ea0d0d7dd.html</url>
      
        <content type="html"><![CDATA[<h2 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h2><p>懒加载是一种网页性能优化的方式，它能极大的提升用户体验。图片一直是影响网页性能的主要元凶，现在一张图片超过几兆已经是很经常的事了。如果每次进入页面就请求所有的图片资源，那么可能等图片加载出来用户也早就走了。所以进入页面的时候，只请求可视区域的图片资源。</p><span id="more"></span><p>总结出来就是：</p><ul><li>减少资源的加载，页面启动只加载首屏的图片，这样能明显减少了服务器的压力和流量，也能够减小浏览器的负担。</li><li>防止并发加载的资源过多而阻塞 <code>js</code> 的加载，影响整个网站的启动，影响用户体验</li><li>浪费用户的流量，有些用户并不想全部看完，全部加载会耗费大量流量。</li></ul><p><strong>原理</strong></p><p>图片懒加载的原理就是暂时不设置图片的 <code>src</code> 属性，而是将图片的 <code>url</code> 隐藏起来，比如先写在 <code>src</code> 里面，等当前图片是否到了可视区域再将图片真实的 <code>url</code> 放进 <code>src</code> 属性里面，从而实现图片的延迟加载。</p><h3 id="通过监听-scroll-事件实现懒加载"><a href="#通过监听-scroll-事件实现懒加载" class="headerlink" title="通过监听 scroll 事件实现懒加载"></a>通过监听 <code>scroll</code> 事件实现懒加载</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lazyload</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> viewHeight = <span class="built_in">document</span>.body.clientHeight <span class="comment">//获取可视区高度</span></span><br><span class="line">  <span class="keyword">let</span> imgs = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;img[src]&#x27;</span>)</span><br><span class="line">  imgs.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (item.dataset.src === <span class="string">&#x27;&#x27;</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于获得页面中某个元素的左，上，右和下分别相对浏览器视窗的位置</span></span><br><span class="line">    <span class="keyword">let</span> rect = item.getBoundingClientRect()</span><br><span class="line">    <span class="keyword">if</span> (rect.bottom &gt;= <span class="number">0</span> &amp;&amp; rect.top &lt; viewHeight) &#123;</span><br><span class="line">      item.src = item.dataset.src</span><br><span class="line">      item.removeAttribute(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以使用节流优化一下</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;scroll&#x27;</span>, lazyload)</span><br></pre></td></tr></table></figure><p>通过上面例子的实现，我们要实现懒加载都需要去监听 <code>scroll</code> 事件，尽管我们可以通过函数节流的方式来阻止高频率的执行函数,但是我们还是需要去计算 <code>scrollTop</code>,<code>offsetHeight</code> 等属性，有没有简单的不需要计算这些属性的方式呢，答案是有的—-<code>IntersectionObserver</code></p><h3 id="IntersectionObserver实现懒加载"><a href="#IntersectionObserver实现懒加载" class="headerlink" title="IntersectionObserver实现懒加载"></a><code>IntersectionObserver</code>实现懒加载</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> imgs = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;img[src]&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">rootMargin</span>: <span class="string">&#x27;0px&#x27;</span>,</span><br><span class="line">  <span class="attr">threshold</span>: <span class="number">0</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> observer = <span class="keyword">new</span> IntersectionObserver(<span class="function">(<span class="params">entries, self</span>) =&gt;</span> &#123;</span><br><span class="line">  entries.forEach(<span class="function">(<span class="params">entry</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (entry.isIntersecting) &#123;</span><br><span class="line">      <span class="keyword">let</span> img = entry.target</span><br><span class="line">      <span class="keyword">let</span> src = img.dataset.src</span><br><span class="line">      <span class="keyword">if</span> (src) &#123;</span><br><span class="line">        img.src = src</span><br><span class="line">        img.removeAttribute(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 解除观察</span></span><br><span class="line">      self.unobserve(entry.target)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;, config)</span><br><span class="line"></span><br><span class="line">imgs.forEach(<span class="function">(<span class="params">image</span>) =&gt;</span> &#123;</span><br><span class="line">  observer.observe(image)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="在vue中使用IntersectionObserver实现图片懒加载指令"><a href="#在vue中使用IntersectionObserver实现图片懒加载指令" class="headerlink" title="在vue中使用IntersectionObserver实现图片懒加载指令"></a>在<code>vue</code>中使用<code>IntersectionObserver</code>实现图片懒加载指令</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(<span class="string">&#x27;img-lazy&#x27;</span>, &#123;</span><br><span class="line"><span class="function"><span class="title">inserted</span>(<span class="params">el, binding</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 观察当前元素</span></span><br><span class="line">    el.src = <span class="built_in">require</span>(<span class="string">&#x27;~/assets/image/public/placeholder-graphic.png&#x27;</span>); <span class="comment">// 默认图片（占位图）</span></span><br><span class="line">    <span class="keyword">const</span> defaultImg = <span class="built_in">require</span>(<span class="string">&#x27;~/assets/image/public/load-error-img.png&#x27;</span>); <span class="comment">// 图片加载失败图片</span></span><br><span class="line">    <span class="keyword">const</span> observer = <span class="keyword">new</span> IntersectionObserver(<span class="function">(<span class="params">[&#123; isIntersecting &#125;]</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (isIntersecting) &#123;</span><br><span class="line">        <span class="comment">// 停止观察</span></span><br><span class="line">        observer.unobserve(el);</span><br><span class="line">        <span class="comment">// 若图片加载失败，使用该默认图片</span></span><br><span class="line">        el.onerror = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">          el.src = defaultImg;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 组件使用指令传来的值进行操作，赋值于src</span></span><br><span class="line">        el.src = binding.value;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      <span class="comment">// 进入区域立即观察</span></span><br><span class="line">      <span class="attr">threshold</span>: <span class="number">0</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 挂载元素，只进行一次观察：开始观察</span></span><br><span class="line">    observer.observe(el);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>在<code>vue</code>中调用</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-img-lazy</span>=<span class="string">&quot;src&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 深入浅出js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript数组去重</title>
      <link href="/articles/20220527c46d680b5322.html"/>
      <url>/articles/20220527c46d680b5322.html</url>
      
        <content type="html"><![CDATA[<h2 id="双层循环"><a href="#双层循环" class="headerlink" title="双层循环"></a>双层循环</h2><p>使用双层嵌套循环是最原始的方法：</p><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// res用来存储结果</span></span><br><span class="line">    <span class="keyword">var</span> res = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, arrayLen = array.length; i &lt; arrayLen; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>, resLen = res.length; j &lt; resLen; j++ ) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array[i] === res[j]) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果array[i]是唯一的，那么执行完循环，j等于resLen</span></span><br><span class="line">        <span class="keyword">if</span> (j === resLen) &#123;</span><br><span class="line">            res.push(array[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(unique(array)); <span class="comment">// [&#x27;a&#x27;,&#x27;b&#x27;]</span></span><br></pre></td></tr></table></figure><p>外层循环 <code>array</code> 内层循环 <code>res</code>, 当 <code>array[i]</code> 和 <code>res[j]</code> 相等时，跳出循环。否则说明元素唯一，这时 <code>j === resLen</code> 成立，将此元素添加到 <code>res</code> 中。</p><h2 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h2><p>使用 <code>indexOf</code> 可以返回某个元素在数组中的索引，不存在则返回 <code>-1</code>，可以用来判断某个值在数组中是否存在。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> res = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = array.length; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> current = array[i];</span><br><span class="line">        <span class="keyword">if</span> (res.indexOf(current) === -<span class="number">1</span>) &#123;</span><br><span class="line">            res.push(current)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(unique(array));</span><br></pre></td></tr></table></figure><h2 id="排序后去重"><a href="#排序后去重" class="headerlink" title="排序后去重"></a>排序后去重</h2><p>试想我们先将要去重的数组使用 <code>sort</code> 方法排序后，相同的值就会被排在一起，然后我们就可以只判断当前元素与上一个元素是否相同，相同就说明重复，不相同就添加进 <code>res</code>，让我们写个 <code>demo</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;1&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> res = [];</span><br><span class="line">    <span class="keyword">var</span> sortedArray = array.concat().sort();</span><br><span class="line">    <span class="keyword">var</span> seen;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = sortedArray.length; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="comment">// 如果是第一个元素或者相邻的元素不相同</span></span><br><span class="line">        <span class="keyword">if</span> (!i || seen !== sortedArray[i]) &#123;</span><br><span class="line">            res.push(sortedArray[i])</span><br><span class="line">        &#125;</span><br><span class="line">        seen = sortedArray[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(unique(array));</span><br></pre></td></tr></table></figure><p>如果我们对一个已经排好序的数组去重，这种方法效率肯定高于使用 <code>indexOf</code>。</p><h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><p><code>ES5</code> 提供了 <code>filter</code> 方法，我们可以用来简化外层循环：</p><p>比如使用 <code>indexOf</code> 的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;1&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> res = array.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array.indexOf(item) === index;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(unique(array));</span><br></pre></td></tr></table></figure><p>排序去重的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;1&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> array.concat().sort().filter(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !index || item !== array[index - <span class="number">1</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(unique(array));</span><br></pre></td></tr></table></figure><h2 id="Object-键值对"><a href="#Object-键值对" class="headerlink" title="Object 键值对"></a>Object 键值对</h2><p>这种方法是利用一个空的 <code>Object</code> 对象，我们把数组的值存成 <code>Object</code> 的 <code>key</code> 值，比如 <code>Object[value1] = true</code>，在判断另一个值的时候，如果 <code>Object[value2]</code>存在的话，就说明该值是重复的。示例代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;1&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> array.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obj.hasOwnProperty(item) ? <span class="literal">false</span> : (obj[item] = <span class="literal">true</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(unique(array)); <span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure><p>我们可以发现，是有问题的，因为 1 和 ‘1’ 是不同的，但是这种方法会判断为同一个值，这是因为对象的键值只能是字符串，所以我们可以使用 <code>typeof item + item</code> 拼成字符串作为 <code>key</code> 值来避免这个问题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;1&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> array.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obj.hasOwnProperty(<span class="keyword">typeof</span> item + item) ? <span class="literal">false</span> : (obj[<span class="keyword">typeof</span> item + item] = <span class="literal">true</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(unique(array)); <span class="comment">// [1, 2, &quot;1&quot;]</span></span><br></pre></td></tr></table></figure><p>然而，即便如此，我们依然无法正确区分出两个对象，比如 <code>&#123;value: 1&#125;</code> 和 <code>&#123;value: 2&#125;</code>，因为 <code>typeof item + item</code> 的结果都会是 <code>object[object Object]</code>，不过我们可以使用 <code>JSON.stringify</code> 将对象序列化：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [&#123;<span class="attr">value</span>: <span class="number">1</span>&#125;, &#123;<span class="attr">value</span>: <span class="number">1</span>&#125;, &#123;<span class="attr">value</span>: <span class="number">2</span>&#125;];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> array.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> item + <span class="built_in">JSON</span>.stringify(item))</span><br><span class="line">        <span class="keyword">return</span> obj.hasOwnProperty(<span class="keyword">typeof</span> item + <span class="built_in">JSON</span>.stringify(item)) ? <span class="literal">false</span> : (obj[<span class="keyword">typeof</span> item + <span class="built_in">JSON</span>.stringify(item)] = <span class="literal">true</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(unique(array)); <span class="comment">// [&#123;value: 1&#125;, &#123;value: 2&#125;]</span></span><br></pre></td></tr></table></figure><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><p>随着 <code>ES6</code> 的到来，去重的方法又有了进展，比如我们可以使用 <code>Set</code> 和 <code>Map</code> 数据结构，以 <code>Set</code> 为例，<code>ES6</code> 提供了新的数据结构 <code>Set</code>。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p><p>是不是感觉就像是为去重而准备的？让我们来写一版：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;1&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(array));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(unique(array)); <span class="comment">// [1, 2, &quot;1&quot;]</span></span><br></pre></td></tr></table></figure><p>甚至可以再简化下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [...new <span class="built_in">Set</span>(array)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以再简化下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> unique = <span class="function">(<span class="params">a</span>) =&gt;</span> [...new <span class="built_in">Set</span>(a)]</span><br></pre></td></tr></table></figure><p>此外，如果用 Map 的话：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> seen = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">    <span class="keyword">return</span> arr.filter(<span class="function">(<span class="params">a</span>) =&gt;</span> !seen.has(a) &amp;&amp; seen.set(a, <span class="number">1</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="特殊类型比较"><a href="#特殊类型比较" class="headerlink" title="特殊类型比较"></a>特殊类型比较</h2><p>去重的方法就到此结束了，然而要去重的元素类型可能是多种多样，除了例子中简单的 1 和 ‘1’ 之外，其实还有 <code>null</code>、<code>undefined</code>、<code>NaN</code>、对象等，那么对于这些元素，之前的这些方法的去重结果又是怎样呢？</p><p>在此之前，先让我们先看几个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str1 == str2); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str1 === str2); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> == <span class="literal">null</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> === <span class="literal">null</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">undefined</span> == <span class="literal">undefined</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">undefined</span> === <span class="literal">undefined</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> == <span class="literal">NaN</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> === <span class="literal">NaN</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/a/</span> == <span class="regexp">/a/</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/a/</span> === <span class="regexp">/a/</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(&#123;&#125; == &#123;&#125;); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(&#123;&#125; === &#123;&#125;); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>那么，对于这样一个数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&#x27;1&#x27;</span>), <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&#x27;1&#x27;</span>), <span class="regexp">/a/</span>, <span class="regexp">/a/</span>, <span class="literal">NaN</span>, <span class="literal">NaN</span>];</span><br></pre></td></tr></table></figure><p>以上各种方法去重的结果到底是什么样的呢？</p><p>我特地整理了一个列表，我们重点关注下对象和 <code>NaN</code> 的去重情况：</p><div class="table-container"><table><thead><tr><th>方法</th><th>结果</th><th>说明</th></tr></thead><tbody><tr><td>for循环</td><td>[1, “1”, null, undefined, String, String, /a/, /a/, NaN, NaN]</td><td>对象和 NaN 不去重</td></tr><tr><td>indexOf</td><td>[1, “1”, null, undefined, String, String, /a/, /a/, NaN, NaN]</td><td>对象和 NaN 不去重</td></tr><tr><td>sort</td><td>[/a/, /a/, “1”, 1, String, 1, String, NaN, NaN, null, undefined]</td><td>对象和 NaN 不去重 数字 1 也不去重</td></tr><tr><td>filter + indexOf</td><td>[1, “1”, null, undefined, String, String, /a/, /a/]</td><td>对象不去重 NaN 会被忽略掉</td></tr><tr><td>filter + sort</td><td>[/a/, /a/, “1”, 1, String, 1, String, NaN, NaN, null, undefined]</td><td>对象和 NaN 不去重 数字 1 不去重</td></tr><tr><td>优化后的键值对方法</td><td>[1, “1”, null, undefined, String, /a/, NaN]</td><td>全部去重</td></tr><tr><td>Set</td><td>[1, “1”, null, undefined, String, String, /a/, /a/, NaN]</td><td>对象不去重 NaN 去重</td></tr></tbody></table></div><p>想了解为什么会出现以上的结果，看两个 <code>demo</code> 便能明白：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo1</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="literal">NaN</span>];</span><br><span class="line">arr.indexOf(<span class="literal">NaN</span>); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><p><code>indexOf</code> 底层还是使用 <code>===</code> 进行判断，因为 <code>NaN ==== NaN</code> 的结果为 <code>false</code>，所以使用 <code>indexOf</code> 查找不到 <code>NaN</code> 元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(array));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(unique([<span class="literal">NaN</span>, <span class="literal">NaN</span>])) <span class="comment">// [NaN]</span></span><br></pre></td></tr></table></figure><p><code>Set</code> 认为尽管 <code>NaN === NaN</code> 为 <code>false</code>，但是这两个元素是重复的。</p>]]></content>
      
      
      <categories>
          
          <category> 深入浅出js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>节流与防抖</title>
      <link href="/articles/20220523205e2283eab8.html"/>
      <url>/articles/20220523205e2283eab8.html</url>
      
        <content type="html"><![CDATA[<h2 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h2><blockquote><p>防抖是延迟执行，而节流是间隔执行，函数节流即每隔一段时间就执行一次，实现原理为 设置一个定时器，约定XX毫秒后执行事件，如果时间到了，那么执行函数并重置定时器，和防抖的区别在于，防抖每次触发事件都重置定时器，而节流在定时器到时间后再清空定时器。函数防抖的情况下，函数将一直推迟执行，造成不会被执行的效果；函数节流的情况下，函数将每个 <code>n</code> 秒执行一次。</p></blockquote><span id="more"></span><h2 id="一、防抖"><a href="#一、防抖" class="headerlink" title="一、防抖"></a>一、防抖</h2><p>在src目录下创建一个名为<code>utils</code>的文件夹，在文件夹下新建一个名为<code>util.js</code>的文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 防抖：一定时间内，只有最后一次操作，再过wait毫秒后才执行函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>func 要执行的回调函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>wait 延时的时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>immediate 是否立即执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> timeout = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait = <span class="number">500</span>, immediate = <span class="literal">false</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 清除定时器</span></span><br><span class="line">  <span class="keyword">if</span> (timeout !== <span class="literal">null</span>) <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">  <span class="comment">// 立即执行，此类情况一般用不到</span></span><br><span class="line">  <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">    <span class="keyword">const</span> callNow = !timeout;</span><br><span class="line">    timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      timeout = <span class="literal">null</span>;</span><br><span class="line">    &#125;, wait);</span><br><span class="line">    <span class="keyword">if</span> (callNow) <span class="keyword">typeof</span> func === <span class="string">&#x27;function&#x27;</span> &amp;&amp; func();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 设置定时器，当最后一次操作后，timeout不会再被清除，所以在延时wait毫秒后执行func回调方法</span></span><br><span class="line">    timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">typeof</span> func === <span class="string">&#x27;function&#x27;</span> &amp;&amp; func();</span><br><span class="line">    &#125;, wait);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、节流"><a href="#二、节流" class="headerlink" title="二、节流"></a>二、节流</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 节流：在一定时间内，只能触发一次</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>func 要执行的回调函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>wait 延时的时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>immediate 是否立即执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> timer,</span><br><span class="line">  flag;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait = <span class="number">500</span>, immediate = <span class="literal">true</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">      flag = <span class="literal">true</span>;</span><br><span class="line">      <span class="comment">// 如果是立即执行，则在wait毫秒内开始时执行</span></span><br><span class="line">      <span class="keyword">typeof</span> func === <span class="string">&#x27;function&#x27;</span> &amp;&amp; func();</span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">      &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">      flag = <span class="literal">true</span>;</span><br><span class="line">      <span class="comment">// 如果是非立即执行，则在wait毫秒内的结束处执行</span></span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">typeof</span> func === <span class="string">&#x27;function&#x27;</span> &amp;&amp; func();</span><br><span class="line">      &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、在vue中使用"><a href="#三、在vue中使用" class="headerlink" title="三、在vue中使用"></a>三、在vue中使用</h2><p>我们可以在<code>main.js</code>通过<code>mixin</code>全局混入来避免在每个<code>vue</code>文件里重复引入防抖、节流方法，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    debounce,</span><br><span class="line">    throttle</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/util&#x27;</span>;</span><br><span class="line"></span><br><span class="line">Vue.mixin(&#123;</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="comment">/** 防抖：一定时间内，只有最后一次操作，再过wait毫秒后才执行函数</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param </span>func 要执行的回调函数</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param </span>wait 延时的时间</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param </span>immediate 是否立即执行</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="title">fixDebounce</span>(<span class="params">func, wait = <span class="number">500</span>, immediate = <span class="literal">false</span></span>)</span> &#123;</span><br><span class="line">            debounce(func, wait, immediate);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">/** 节流：在一定时间内，只能触发一次</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param </span>func 要执行的回调函数</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param </span>wait 延时的时间</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param </span>immediate 是否立即执行</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="title">fixThrottle</span>(<span class="params">func, wait = <span class="number">500</span>, immediate = <span class="literal">true</span></span>)</span> &#123;</span><br><span class="line">            throttle(func, wait, immediate);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    router,</span><br><span class="line">    store,</span><br><span class="line">    <span class="attr">render</span>: <span class="function">(<span class="params">h</span>) =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="调用"><a href="#调用" class="headerlink" title="调用:"></a>调用:</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">&quot;searchKey&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">prefix-icon</span>=<span class="string">&quot;el-icon-search&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">input</span>=<span class="string">&quot;fixDebounce(fun,1000)&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">placeholder</span>=<span class="string">&quot;写字楼/小区/学校等&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>fixDebounce(fun,1000)</code>中，<code>fun</code>后面不能加<code>()</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 深入浅出js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用高德地图封装vue选址组件</title>
      <link href="/articles/2022052365525d9f6ad3.html"/>
      <url>/articles/2022052365525d9f6ad3.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、使用地图前需要到高德地图官网申请key，申请时注意根据自己需求选择服务"><a href="#一、使用地图前需要到高德地图官网申请key，申请时注意根据自己需求选择服务" class="headerlink" title="一、使用地图前需要到高德地图官网申请key，申请时注意根据自己需求选择服务"></a>一、使用地图前需要到高德地图官网申请key，申请时注意根据自己需求选择服务</h2><p><a href="https://lbs.amap.com/api/lightmap/guide/picker/">高德地图</a>有自己的选址组件，<a href="https://m.amap.com/picker/?key=（您的Key）">https://m.amap.com/picker/?key=（您的Key）</a>,  但它有几个缺点，一是无法改变样式，二是选择地址后没有反馈状态，用户不知道自己有没有选择成功。于是决定使用高德地图的<code>AMap.Geolocation</code>（定位），<code>AMap.PlaceSearch</code>（地点搜索）插件，自己封装一个满足项目需求的选址组件出来。</p><span id="more"></span><h2 id="二、实现效果如下"><a href="#二、实现效果如下" class="headerlink" title="二、实现效果如下:"></a>二、实现效果如下:</h2><h3 id="地址选择"><a href="#地址选择" class="headerlink" title="地址选择"></a>地址选择</h3><p><img src="https://pic.wjnba.top/img/202205231142353.png" alt="image-20220523112830453"></p><h3 id="地址搜索"><a href="#地址搜索" class="headerlink" title="地址搜索"></a>地址搜索</h3><p><img src="https://pic.wjnba.top/img/202205231142333.png" alt="image-20220523113227574"></p><h2 id="三、封装选址组件"><a href="#三、封装选址组件" class="headerlink" title="三、封装选址组件"></a>三、封装选址组件</h2><h3 id="1、先在index-html引入高德js"><a href="#1、先在index-html引入高德js" class="headerlink" title="1、先在index.html引入高德js"></a>1、先在index.html引入高德js</h3><p>在<code>index.html</code>页面加入<code>&lt;script type=&quot;text/javascript&quot; src=&quot;http://webapi.amap.com/maps?v=1.4.4&amp;key=&#39;你的key值&#39;&quot;&gt;&lt;/script&gt;</code></p><h3 id="2-创建文件名为CustomChooseAddress-vue的组件，写入以下代码"><a href="#2-创建文件名为CustomChooseAddress-vue的组件，写入以下代码" class="headerlink" title="2.创建文件名为CustomChooseAddress.vue的组件，写入以下代码"></a>2.创建文件名为<code>CustomChooseAddress.vue</code>的组件，写入以下代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;page-main&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-model</span>=<span class="string">&quot;searchKey&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">prefix-icon</span>=<span class="string">&quot;el-icon-search&quot;</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">input</span>=<span class="string">&quot;search&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">placeholder</span>=<span class="string">&quot;写字楼/小区/学校等&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;map-div&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;!searchKey&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;poi-card&quot;</span> <span class="attr">v-loading</span>=<span class="string">&quot;loading&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in lists&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">:style</span>=<span class="string">&quot;&#123;color:selectedAddress.id === item.id ? &#x27;#408CFF&#x27; : &#x27;&#x27;,background:selectedAddress.id === item.id ? &#x27;#F3F6FE&#x27; : &#x27;&#x27;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">             @<span class="attr">click</span>=<span class="string">&quot;chooseAddress(item)&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-location-outline icon-location&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;name&quot;</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;location&quot;</span>&gt;</span>&#123;&#123;item.address&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;search-list&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;searchKey&quot;</span> <span class="attr">v-loading</span>=<span class="string">&quot;loading&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in searchList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span></span></span><br><span class="line"><span class="tag">           @<span class="attr">click</span>=<span class="string">&quot;chooseSearch(item)&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-location-outline icon-location&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;name&quot;</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;location&quot;</span>&gt;</span>&#123;&#123;item.address&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">no-data-box</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;position: absolute;top: 50%;left:50%;transform: translate(-50%,-50%);&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:icon-width</span>=<span class="string">&quot;180&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-if</span>=<span class="string">&quot;noSearchShow&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">not-data-desc</span>=<span class="string">&quot;暂无搜索结果&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span><span class="tag">&lt;/<span class="name">no-data-box</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>: <span class="string">&#x27;CustomChooseAddress&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">chooseData</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">type</span>: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">default</span>: getAddressDto()</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">selectedAddress</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, <span class="built_in">this</span>.chooseData);</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">set</span>(<span class="params">val</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.$emit(<span class="string">&#x27;update:chooseData&#x27;</span>, val);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">myMap</span>: <span class="literal">null</span>, <span class="comment">// 地图对象</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">center</span>: <span class="literal">null</span>, <span class="comment">// 地图中心点坐标</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">searchKey</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 搜索值</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">lists</span>: [], <span class="comment">// 地点列表</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">searchList</span>: [], <span class="comment">// 搜索结果列表</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">marker</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 标记</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">loading</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">noSearchShow</span>: <span class="literal">false</span>, <span class="comment">// 无搜索结果提示，无搜索结果时会显示暂无搜索结果</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">getGeolocationOver</span>: <span class="literal">false</span> <span class="comment">// 是否完成定位</span></span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="javascript">       * <span class="doctag">@author</span>: Wang Jun</span></span></span><br><span class="line"><span class="comment"><span class="javascript">       * <span class="doctag">@create</span>: 2022/5/17 11:04</span></span></span><br><span class="line"><span class="comment"><span class="javascript">       * <span class="doctag">@description</span>: 初始化地图</span></span></span><br><span class="line"><span class="comment"><span class="javascript">       */</span></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">initMap</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> that = <span class="built_in">this</span>;</span></span><br><span class="line"><span class="javascript">        that.myMap = <span class="keyword">new</span> AMap.Map(<span class="string">&#x27;container&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">zoom</span>: <span class="number">15</span>, <span class="comment">// 级别</span></span></span><br><span class="line"><span class="javascript">          <span class="attr">mapStyle</span>: <span class="string">&#x27;amap://styles/normal&#x27;</span>, <span class="comment">// 设置地图的显示样式</span></span></span><br><span class="line"><span class="javascript">          <span class="attr">center</span>: <span class="built_in">this</span>.center <span class="comment">// 设置地图中心点</span></span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 获取初始中心点并赋值</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> currentCenter = that.myMap.getCenter(); <span class="comment">// 此方法是获取当前地图的中心点</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 创建标记</span></span></span><br><span class="line"><span class="javascript">        that.marker = <span class="keyword">new</span> AMap.Marker(&#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">position</span>: <span class="keyword">new</span> AMap.LngLat(currentCenter.lng, currentCenter.lat)</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 将创建的点标记添加到已有的地图实例：</span></span></span><br><span class="line"><span class="javascript">        that.myMap.add(that.marker);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (!that.getGeolocationOver) &#123;</span></span><br><span class="line"><span class="javascript">          that.myMap.plugin(<span class="string">&#x27;AMap.Geolocation&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> geolocation = <span class="keyword">new</span> AMap.Geolocation(&#123;</span></span><br><span class="line"><span class="javascript">              <span class="attr">enableHighAccuracy</span>: <span class="literal">true</span>, <span class="comment">// 是否使用高精度定位，默认:true</span></span></span><br><span class="line"><span class="javascript">              <span class="attr">timeout</span>: <span class="number">5000</span>, <span class="comment">// 5s</span></span></span><br><span class="line"><span class="javascript">              <span class="attr">buttonPosition</span>: <span class="string">&#x27;LB&#x27;</span>, <span class="comment">// 定位按钮的停靠位置</span></span></span><br><span class="line"><span class="javascript">              <span class="attr">buttonOffset</span>: <span class="keyword">new</span> AMap.Pixel(<span class="number">10</span>, <span class="number">20</span>), <span class="comment">// 定位按钮与设置的停靠位置的偏移量，默认：Pixel(10, 20)</span></span></span><br><span class="line"><span class="javascript">              <span class="attr">zoomToAccuracy</span>: <span class="literal">true</span> <span class="comment">// 定位成功后是否自动调整地图视野到定位点</span></span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.loading = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">            geolocation.getCurrentPosition(<span class="function">(<span class="params">status, result</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">              <span class="comment">// 由于众多浏览器已不再支持非安全域的定位请求，为保位成功率和精度，请升级您的站点到HTTPS</span></span></span><br><span class="line"><span class="javascript">              <span class="keyword">if</span> (status === <span class="string">&#x27;complete&#x27;</span> &amp;&amp; result.info === <span class="string">&#x27;SUCCESS&#x27;</span>) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">const</span> lat = result.position.lat;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">const</span> lng = result.position.lng;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.center = [lng, lat];</span></span><br><span class="line"><span class="javascript">              &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 将获取到的中心点的纬度经度赋值给data的center</span></span></span><br><span class="line"><span class="javascript">                that.center = [currentCenter.lng, currentCenter.lat]; </span></span><br><span class="line"><span class="javascript">              &#125;</span></span><br><span class="line"><span class="javascript">              that.getGeolocationOver = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">              <span class="comment">// 根据地图中心点查附近地点，此方法在下方</span></span></span><br><span class="line"><span class="javascript">              that.centerSearch();</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">          &#125;)</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">          that.center = [currentCenter.lng, currentCenter.lat];</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 根据地图中心点查附近地点，此方法在下方</span></span></span><br><span class="line"><span class="javascript">          that.centerSearch();</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 更新数据</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 监听地图移动事件</span></span></span><br><span class="line"><span class="javascript">        that.myMap.on(<span class="string">&#x27;mapmove&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 获取地图中心点</span></span></span><br><span class="line"><span class="javascript">          currentCenter = that.myMap.getCenter();</span></span><br><span class="line"><span class="javascript">          that.center = [currentCenter.lng, currentCenter.lat];</span></span><br><span class="line"><span class="javascript">          that.marker.setPosition([currentCenter.lng, currentCenter.lat]); <span class="comment">// 更新标记的位置</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// 根据地图中心点查附近地点</span></span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 监听地图移动完成事件 更新数据</span></span></span><br><span class="line"><span class="javascript">        that.myMap.on(<span class="string">&#x27;moveend&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          that.centerSearch();</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="javascript">       * <span class="doctag">@author</span>: Wang Jun</span></span></span><br><span class="line"><span class="comment"><span class="javascript">       * <span class="doctag">@create</span>: 2022/5/17 11:38</span></span></span><br><span class="line"><span class="comment"><span class="javascript">       * <span class="doctag">@description</span>: 中心点数据查询</span></span></span><br><span class="line"><span class="comment"><span class="javascript">       */</span></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">centerSearch</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 构造地点查询类</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.lists.splice(<span class="number">0</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.loading = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">        AMap.plugin(<span class="string">&#x27;AMap.PlaceSearch&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">const</span> placeSearch = <span class="keyword">new</span> AMap.PlaceSearch(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">pageSize</span>: <span class="number">30</span>, <span class="comment">// 单页显示结果条数</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">pageIndex</span>: <span class="number">1</span>, <span class="comment">// 页码</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">city</span>: <span class="string">&#x27;全国&#x27;</span>, <span class="comment">// 兴趣点城市</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">autoFitView</span>: <span class="literal">false</span> <span class="comment">// 是否自动调整地图视野使绘制的 Marker点都处于视口的可见范围</span></span></span><br><span class="line"><span class="javascript">          &#125;);</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 根据地图中心点查附近地点</span></span></span><br><span class="line"><span class="javascript">          placeSearch.searchNearBy(<span class="string">&#x27;&#x27;</span>, [<span class="built_in">this</span>.center[<span class="number">0</span>], <span class="built_in">this</span>.center[<span class="number">1</span>]], <span class="number">1000</span>, <span class="function">(<span class="params">status, result</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (status === <span class="string">&#x27;complete&#x27;</span>) &#123;</span></span><br><span class="line"><span class="javascript">              <span class="built_in">this</span>.lists = result.poiList.pois; <span class="comment">// 将查询到的地点赋值</span></span></span><br><span class="line"><span class="javascript">              <span class="built_in">this</span>.loading = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">          &#125;);</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="javascript">       * <span class="doctag">@author</span>: Wang Jun</span></span></span><br><span class="line"><span class="comment"><span class="javascript">       * <span class="doctag">@create</span>: 2022/5/17 11:38</span></span></span><br><span class="line"><span class="comment"><span class="javascript">       * <span class="doctag">@description</span>: 搜索查询</span></span></span><br><span class="line"><span class="comment"><span class="javascript">       */</span></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">search</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.loading = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.searchList.splice(<span class="number">0</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.noSearchShow = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 构造地点查询类</span></span></span><br><span class="line"><span class="javascript">        AMap.plugin(<span class="string">&#x27;AMap.PlaceSearch&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">const</span> placeSearch = <span class="keyword">new</span> AMap.PlaceSearch(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">pageSize</span>: <span class="number">30</span>, <span class="comment">// 单页显示结果条数</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">pageIndex</span>: <span class="number">1</span>, <span class="comment">// 页码</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">city</span>: <span class="string">&#x27;全国&#x27;</span>, <span class="comment">// 兴趣点城市</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">citylimit</span>: <span class="literal">false</span>, <span class="comment">// 是否强制限制在设置的城市内搜索</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">autoFitView</span>: <span class="literal">false</span> <span class="comment">// 是否自动调整地图视野使绘制的 Marker点都处于视口的可见范围</span></span></span><br><span class="line"><span class="javascript">          &#125;);</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 关键字查询</span></span></span><br><span class="line"><span class="javascript">          placeSearch.search(<span class="built_in">this</span>.searchKey, <span class="function">(<span class="params">status, result</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.loading = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (status === <span class="string">&#x27;complete&#x27;</span>) &#123;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">if</span> (result.poiList.count === <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.noSearchShow = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">              &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.searchList = result.poiList.pois; <span class="comment">// 将查询到的地点赋值</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.noSearchShow = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">              &#125;</span></span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">              <span class="built_in">this</span>.noSearchShow = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">          &#125;);</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="javascript">       * <span class="doctag">@author</span>: Wang Jun</span></span></span><br><span class="line"><span class="comment"><span class="javascript">       * <span class="doctag">@create</span>: 2022/5/17 13:52</span></span></span><br><span class="line"><span class="comment"><span class="javascript">       * <span class="doctag">@description</span>: 选择地址</span></span></span><br><span class="line"><span class="comment"><span class="javascript">       */</span></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">chooseAddress</span>(<span class="params">address</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.marker.setPosition([address.location.lng, address.location.lat]); <span class="comment">// 更新标记的位置</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$emit(<span class="string">&#x27;update:chooseData&#x27;</span>, address);</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="javascript">       * <span class="doctag">@author</span>: Wang Jun</span></span></span><br><span class="line"><span class="comment"><span class="javascript">       * <span class="doctag">@create</span>: 2022/5/17 13:52</span></span></span><br><span class="line"><span class="comment"><span class="javascript">       * <span class="doctag">@description</span>: 选择搜索结果</span></span></span><br><span class="line"><span class="comment"><span class="javascript">       */</span></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">chooseSearch</span>(<span class="params">address</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.center = [address.location.lng, address.location.lat];</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$emit(<span class="string">&#x27;update:chooseData&#x27;</span>, address);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 更新中心点附近地图</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.initMap();</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.searchKey = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="keyword">async</span> <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> that = <span class="built_in">this</span>;</span></span><br><span class="line"><span class="javascript">      that.initMap();</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">getAddressDto</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">address</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 地址</span></span></span><br><span class="line"><span class="javascript">      <span class="attr">distance</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 离中心点距离</span></span></span><br><span class="line"><span class="javascript">      <span class="attr">id</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 唯一值</span></span></span><br><span class="line"><span class="javascript">      <span class="attr">location</span>: &#123;&#125;, <span class="comment">// 经纬度</span></span></span><br><span class="line"><span class="javascript">      <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 名称</span></span></span><br><span class="line"><span class="javascript">      <span class="attr">shopinfo</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">tel</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// POI的电话</span></span></span><br><span class="line"><span class="javascript">      <span class="attr">type</span>: <span class="string">&#x27;&#x27;</span> <span class="comment">// 兴趣点类型</span></span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.page-main</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.map-div</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">48px</span>);</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-id">#container</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">        <span class="keyword">@extend</span> .margin-top-<span class="number">15</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.poi-card</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="keyword">@extend</span> .margin-top-<span class="number">20</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">30px</span>);</span></span><br><span class="line"><span class="css">        <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">        <span class="attribute">overflow-y</span>: auto;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.list-item</span> &#123;</span></span><br><span class="line"><span class="css">          <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="css">          <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#E4E7ED</span>;</span></span><br><span class="line"><span class="css">          <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="css">          <span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="css">          <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">          <span class="selector-class">.icon-location</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: inherit;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-top</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="css">          &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">          <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="keyword">@extend</span> .margin-left-<span class="number">5</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.name</span> &#123;</span></span><br><span class="line"><span class="css">              <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="css">              <span class="attribute">font-weight</span>: <span class="number">500</span>;</span></span><br><span class="line"><span class="css">              <span class="attribute">color</span>: inherit;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.location</span> &#123;</span></span><br><span class="line"><span class="css">              <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="css">              <span class="attribute">color</span>: <span class="number">#666</span>;</span></span><br><span class="line"><span class="css">              <span class="attribute">font-weight</span>: <span class="number">400</span>;</span></span><br><span class="line"><span class="css">              <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">          &#125;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.search-list</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">      <span class="attribute">overflow-y</span>: auto;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">38px</span>);</span></span><br><span class="line"><span class="css">      <span class="keyword">@extend</span> .margin-top-<span class="number">10</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.list-item</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#E4E7ED</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        &amp;<span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">          <span class="attribute">color</span>: <span class="number">#001DC1</span>;</span></span><br><span class="line"><span class="css">          <span class="attribute">background</span>: <span class="number">#F3F6FE</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.icon-location</span> &#123;</span></span><br><span class="line"><span class="css">          <span class="attribute">color</span>: inherit;</span></span><br><span class="line"><span class="css">          <span class="attribute">font-size</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="css">          <span class="attribute">margin-top</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="css">          <span class="keyword">@extend</span> .margin-left-<span class="number">5</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">          <span class="selector-class">.name</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-weight</span>: <span class="number">500</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: inherit;</span></span><br><span class="line"><span class="css">          &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">          <span class="selector-class">.location</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-weight</span>: <span class="number">400</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="number">#666</span>;</span></span><br><span class="line"><span class="css">          &#125;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue组件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 地图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端页面适配之postcss-px-to-viewport</title>
      <link href="/articles/20211220427802a61baf.html"/>
      <url>/articles/20211220427802a61baf.html</url>
      
        <content type="html"><![CDATA[<p>在说到<code>postcss-px-to-viewport</code>插件之前，先来了解几个概念</p><h2 id="什么是视口？"><a href="#什么是视口？" class="headerlink" title="什么是视口？"></a>什么是视口？</h2><p>在桌面端，视口指的是在pc端浏览器的可视区域；而在移动端，它涉及3个视口：<code>Layout Viewport</code>（布局视口），<code>Visual Viewport</code>（视觉视口），<code>Ideal Viewport</code>（理想视口）。</p><p>视口单位中的“视口”，pc端指的是浏览器的可视区域；移动端指的就是<code>Viewport</code>中的<code>Layout Viewport</code>。</p><span id="more"></span><h3 id="1-布局视口"><a href="#1-布局视口" class="headerlink" title="1.布局视口"></a>1.布局视口</h3><p>布局视口是指网页的宽度，一般移动端浏览器都默认设置了布局视口的宽度。根据设备的不同，布局视口的默认宽度有可能是<code>768px</code>、<code>980px</code>或<code>1024px</code>等，这个宽度并不适合在手机屏幕中展示。移动端浏览器之所以采用这样的默认设置，是为了解决早期的PC端页面在手机上显示的问题。</p><p><img src="https://pic.wjnba.top/img/202112201530687.png" alt="布局视口"></p><p>当移动端浏览器展示PC端网页内容时，由于移动端设备屏幕比较小，不能像PC端浏览器那样完美地展示网页，这正是布局视口存在的问题。这样的网页在手机的浏览器中会出现左右滚动条，用户需要左右滑动才能查看完整的一行内容。</p><p>js获取布局视口：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.documentElement.clientWidth | <span class="built_in">document</span>.body.clientWidth</span><br></pre></td></tr></table></figure><h3 id="2-视觉视口"><a href="#2-视觉视口" class="headerlink" title="2. 视觉视口"></a>2. 视觉视口</h3><p>视觉视口是指用户正在看到的网站的区域，这个区域的宽度等同于移动设备的浏览器窗口的宽度。</p><p><img src="https://pic.wjnba.top/img/202112201531064.png" alt="视觉视口"></p><p>需要注意的是，当我们在手机中缩放网页的时候，操作的是视觉视口，而布局视口仍然保持原来的宽度。</p><p>js获取视觉视口:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.innerWidth</span><br></pre></td></tr></table></figure><h3 id="3-理想视口"><a href="#3-理想视口" class="headerlink" title="3. 理想视口"></a>3. 理想视口</h3><p>理想视口是指对设备来讲最理想的视口尺寸。采用理想视口的方式，可以使网页在移动端浏览器上获得最理想的浏览和阅读的宽度。</p><p><img src="https://pic.wjnba.top/img/202112201531722.png" alt="理想视口"></p><p>从图中可以看出，在理想视口情况下，布局视口的大小和屏幕宽度是一致的，这样就不需要左右滚动页面了。</p><p>在开发中，为了实现理想视口，需要给移动端页面添加标签配置视口，通知浏览器来进行处理。</p><ul><li>布局视口宽度 = 视觉视口宽度 = 设备宽度</li></ul><p>js获取理想视口：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.screen.width</span><br></pre></td></tr></table></figure><h2 id="视口单位"><a href="#视口单位" class="headerlink" title="视口单位"></a>视口单位</h2><h3 id="根据CSS3规范，视口单位主要包括以下4个"><a href="#根据CSS3规范，视口单位主要包括以下4个" class="headerlink" title="根据CSS3规范，视口单位主要包括以下4个:"></a>根据<code>CSS3</code>规范，视口单位主要包括以下4个:</h3><p>1.<code>vw</code>：<code>1vw</code>等于视口宽度的<code>1%</code>。 </p><p>2.<code>vh</code>：<code>1vh</code>等于视口高度的<code>1%</code>。</p><p>3.<code>vmin</code>：选取<code>vw</code>和<code>vh</code>中最小的那个。</p><p>4.<code>vmax</code>：选取<code>vw</code>和<code>vh</code>中最大的那个</p><h3 id="vh，vw与百分比的区别"><a href="#vh，vw与百分比的区别" class="headerlink" title="vh，vw与百分比的区别:"></a><code>vh</code>，<code>vw</code>与百分比的区别:</h3><p>1.<code>%</code> 是相对于父元素的大小设定的比率，<code>vw</code>、<code>vh</code> 是视窗大小决定的。</p><p>2.<code>vw</code>、<code>vh</code> 优势在于能够直接获取高度，而用 <code>%</code> 在没有设置 <code>body</code> 高度的情况下，是无法正确获得可视区域的高度的</p><p>3.<code>vmax</code>相对于视口的宽度或高度中较大的那个。其中最大的那个被均分为100单位的<code>vmax</code>。</p><p>4.<code>vmin</code>相对于视口的宽度或高度中较小的那个。其中最小的那个被均分为100单位的<code>vmin</code>。</p><h2 id="postcss-px-to-viewport"><a href="#postcss-px-to-viewport" class="headerlink" title="postcss-px-to-viewport"></a>postcss-px-to-viewport</h2><h3 id="一、什么是postcss-px-to-viewport？"><a href="#一、什么是postcss-px-to-viewport？" class="headerlink" title="一、什么是postcss-px-to-viewport？"></a>一、什么是<code>postcss-px-to-viewport</code>？</h3><p><a href="https://github.com/evrone/postcss-px-to-viewport/blob/HEAD/README_CN.md">postcss-px-to-viewport</a>是一个将<code>px</code>单位转换为视口单位的 (<code>vw</code>, <code>vh</code>, <code>vmin</code>, <code>vmax</code>) 的 <a href="https://github.com/postcss/postcss">PostCSS</a> 插件.</p><p>如果你的样式需要做根据视口大小来调整宽度，这个脚本可以将你<code>CSS</code>中的<code>px</code>单位转化为<code>vw</code>，<code>1vw</code>等于1/100视口宽度。示例如下：</p><p>输入：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: -<span class="number">10px</span> .<span class="number">5vh</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5vmin</span> <span class="number">9.5px</span> <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">3px</span> solid black;</span><br><span class="line">  <span class="attribute">border-bottom-width</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.class2</span> &#123;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">10px</span>; <span class="comment">/* px-to-viewport-ignore */</span></span><br><span class="line">  <span class="comment">/* px-to-viewport-ignore-next */</span></span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="comment">/* Any other comment */</span></span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">750px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.class3</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">22px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: -<span class="number">3.125vw</span> .<span class="number">5vh</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5vmin</span> <span class="number">2.96875vw</span> <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0.9375vw</span> solid black;</span><br><span class="line">  <span class="attribute">border-bottom-width</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">4.375vw</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">6.25vw</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.class2</span> &#123;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="comment">/* Any other comment */</span></span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">6.25vw</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">9.375vw</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">750px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.class3</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">22px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="vue项目中使用"><a href="#vue项目中使用" class="headerlink" title="vue项目中使用"></a>vue项目中使用</h2><p>1.安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install postcss-px-to-viewport --save-dev</span><br></pre></td></tr></table></figure><p>2.在项目根目录下添加<a href="https://vue-loader-v14.vuejs.org/zh-cn/features/postcss.html">postcss.config.js</a></p><p>3.添加以下配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;postcss-px-to-viewport&#x27;</span>: &#123;</span><br><span class="line">      <span class="attr">unitToConvert</span>: <span class="string">&#x27;px&#x27;</span>,  <span class="comment">// 需要转换的单位，默认为&quot;px&quot;</span></span><br><span class="line">      <span class="attr">viewportWidth</span>: <span class="number">750</span>, <span class="comment">//  设计稿的视口宽度</span></span><br><span class="line">      <span class="attr">unitPrecision</span>: <span class="number">5</span>, <span class="comment">// 单位转换后保留的精度</span></span><br><span class="line">      <span class="attr">propList</span>: [<span class="string">&#x27;*&#x27;</span>], <span class="comment">// 能转化为vw的属性列表</span></span><br><span class="line">      <span class="attr">viewportUnit</span>: <span class="string">&#x27;vw&#x27;</span>, <span class="comment">//  希望使用的视口单位</span></span><br><span class="line">      <span class="attr">fontViewportUnit</span>: <span class="string">&#x27;vw&#x27;</span>, <span class="comment">// 字体使用的视口单位</span></span><br><span class="line">      <span class="attr">selectorBlackList</span>: [], <span class="comment">// 需要忽略的CSS选择器 &#x27;.el&#x27;,&#x27;el&#x27;</span></span><br><span class="line">      <span class="attr">minPixelValue</span>: <span class="number">1</span>, <span class="comment">// 最小的转换数值，如果为1的话，只有大于1的值会被转换</span></span><br><span class="line">      <span class="attr">mediaQuery</span>: <span class="literal">false</span>, <span class="comment">// 媒体查询里的单位是否需要转换单位</span></span><br><span class="line">      <span class="attr">replace</span>: <span class="literal">true</span>, <span class="comment">// 是否直接更换属性值，而不添加备用属性</span></span><br><span class="line">      <span class="attr">exclude</span>: [<span class="regexp">/node_modules/</span>,<span class="regexp">/\/pages\/mobile\//</span>], <span class="comment">// 忽略某些文件夹下的文件或特定文件</span></span><br><span class="line">      <span class="attr">include</span>: <span class="literal">undefined</span>,  <span class="comment">// 如果设置了include，那将只有匹配到的文件才会被转换，例如只转换 &#x27;src/mobile&#x27; 下的文件 (include: /\/src\/mobile\//)</span></span><br><span class="line">      <span class="attr">landscape</span>: <span class="literal">false</span>, <span class="comment">// 是否添加根据 landscapeWidth 生成的媒体查询条件 @media (orientation: landscape)</span></span><br><span class="line">      <span class="attr">landscapeUnit</span>: <span class="string">&#x27;vw&#x27;</span> <span class="comment">// 横屏时使用的单位</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="postcss-px-to-viewport的优点："><a href="#postcss-px-to-viewport的优点：" class="headerlink" title="postcss-px-to-viewport的优点："></a>postcss-px-to-viewport的优点：</h3><p>1.我们不需要再去根据不同的屏幕分辨率写媒体查询，造成代码臃肿</p><p>2.我们只需要去关心设计稿的宽度，严格按照设计稿给的宽度编写页面，就能在不同的分辨率上看到很不错的效果</p><p>3.<code>css</code>代码足够简洁，只会看到一种单位，那就是<code>px</code></p><h3 id="postcss-px-to-viewport的缺点："><a href="#postcss-px-to-viewport的缺点：" class="headerlink" title="postcss-px-to-viewport的缺点："></a>postcss-px-to-viewport的缺点：</h3><p>无法把行内样式中的<code>px</code>转换成视口单位（<code>vw</code>, <code>vh</code>, <code>vmin</code>, <code>vmax</code>）</p><h3 id="探索"><a href="#探索" class="headerlink" title="探索"></a>探索</h3><p><a href="https://hub.fastgit.org/hyy1115/style-vw-loader">vue行内样式px转换vw插件</a>，虽然这个插件在一定程度上补充了<code>postcss-px-to-viewport</code>无法转换行内样式的痛点，但不够完善，建议不要使用行内样式，全部改用内嵌样式。</p>]]></content>
      
      
      <categories>
          
          <category> vue插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> postcss-px-to-viewport </tag>
            
            <tag> 前端适配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript数据类型详解</title>
      <link href="/articles/202112021fa0940dad5e.html"/>
      <url>/articles/202112021fa0940dad5e.html</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript-数据类型"><a href="#JavaScript-数据类型" class="headerlink" title="JavaScript 数据类型"></a>JavaScript 数据类型</h2><p><strong>基本类型</strong>：字符串（<code>String</code>）、数字(<code>Number</code>)、布尔(<code>Boolean</code>)、对空（<code>Null</code>）、未定义（<code>Undefined</code>）、<code>Symbol</code>、以及<code>ES10</code>新增的<code>BigInt</code>(任意精度整数)七类。</p><p><strong>引用数据类型</strong>：对象(<code>Object</code>)、数组(<code>Array</code>)、函数(<code>Function</code>)。</p><blockquote><p>注：<code>Symbol</code> 是 <code>ES6</code> 引入了一种新的原始数据类型，表示独一无二的值。</p></blockquote><span id="more"></span><p><img src="https://pic.wjnba.top/img/202112021635180.png" alt="数据类型"></p><h2 id="数据存放"><a href="#数据存放" class="headerlink" title="数据存放"></a>数据存放</h2><p><code>JavaScript</code>的所有变量（包括函数）在整个处理过程中都是存放在内存中，所以要对一个变量进行处理。首先得为变量分配内存。</p><p><code>JavaScript</code>内存分配和其他语言一样，是根据变量的数据类型来分配内存的，而<code>JavaScript</code>变量的数据类型由所赋的值的类型所决定的。在<code>JavaScript</code>中，基本数据类型变量分配在栈内存中，其中存放了变量的值，对其是按值访问的；而引用数据类型的变量则同时会分配栈内存和堆内存，其中栈内存存放的是地址。堆内存存放的是引用的值，栈内存存放的地址指向堆内存存放的值。对该变量的访问是按引用来访问的，即首先读取到栈内存存放的地址，然后按地址找到堆内存读取其中的值。如下图：</p><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p> <img src="https://pic.wjnba.top/img/202112021635953.jpeg" alt="img"></p><h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3><p>  <img src="https://pic.wjnba.top/img/202112021635351.jpeg" alt="img"></p><p><code>JavaScript</code>之所以按变量的不同数据类型来分配内存，主要原因是栈内存比堆内存小，而且栈内存的大小是固定的，而堆内存大小可以动态变化。基本数据类型的值的大小固定，对象类型的值大小不固定，所以将它们分别存放在栈内存和堆内存是合理的。</p><h2 id="判断变量的数据类型"><a href="#判断变量的数据类型" class="headerlink" title="判断变量的数据类型"></a>判断变量的数据类型</h2><h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><p> <code>typeof</code>是一个操作符，其右侧跟一个一元表达式，并返回这个表达式的数据类型。返回的结果用该类型的字符串(全小写字母)形式表示，包括<code>number</code>,<code>string</code>,<code>boolean</code>,<code>undefined</code>,<code>object</code>,<code>function</code>,<code>symbol</code>等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="string">&quot;&quot;</span>; <span class="comment">//string</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="number">0</span>; <span class="comment">//number</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">false</span>; <span class="comment">//boolean</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span>; <span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">typeof</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;; <span class="comment">//function</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;&#125;; <span class="comment">//object</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">Symbol</span>(); <span class="comment">//symbol</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>; <span class="comment">//object</span></span><br><span class="line"><span class="keyword">typeof</span> []; <span class="comment">//object</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">//object</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(); <span class="comment">//object</span></span><br></pre></td></tr></table></figure><h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><p><code>instanceof</code>用来判断<code>A</code>是否为<code>B</code>的实例，表达式为：<code>A instanceof B</code>，如果<code>A</code>是<code>B</code>的实例，则返回<code>true</code>，否则返回<code>false</code>。<code>instanceof</code>检测的是原型，内部机制是通过判断对象的原型链中是否有类型的原型。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#125; <span class="keyword">instanceof</span> <span class="built_in">Object</span>;  <span class="comment">//true</span></span><br><span class="line">[] <span class="keyword">instanceof</span> <span class="built_in">Array</span>;  <span class="comment">//true</span></span><br><span class="line">[] <span class="keyword">instanceof</span> <span class="built_in">Object</span>;  <span class="comment">//true</span></span><br><span class="line"><span class="string">&quot;123&quot;</span> <span class="keyword">instanceof</span> <span class="built_in">String</span>;  <span class="comment">//false</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">String</span>(<span class="number">123</span>) <span class="keyword">instanceof</span> <span class="built_in">String</span>;  <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><p>当一个函数<code>F</code>被定义时，<code>JS</code>引擎会为<code>F</code>添加<code>prototype</code>原型，然后在<code>prototype</code>上添加一个<code>constructor</code>属性，并让其指向F的引用，<code>F</code>利用原型对象的<code>constructor</code>属性引用了自身，当F作为构造函数创建对象时，原型上的<code>constructor</code>属性被遗传到了新创建的对象上，从原型链角度讲，构造函数<code>F</code>就是新对象的类型。这样做的意义是，让对象诞生以后，就具有可追溯的数据类型。</p><p><img src="https://pic.wjnba.top/img/202112021635332.png" alt="image-20211202152811772"></p><h3 id="Object-prototype-toString"><a href="#Object-prototype-toString" class="headerlink" title="Object.prototype.toString()"></a>Object.prototype.toString()</h3><p><code>toString()</code>是<code>Object</code>的原型方法，调用该方法，默认返回当前对象的<code>[[Class]]</code>。这是一个内部属性，其格式为<code>[object Xxx]</code>,其中<code>Xxx</code>就是对象的类型。 对于<code>Object</code>对象，直接调用<code>toString()</code>就能返回<code>[object Object]</code>,而对于其他对象，则需要通过<code>call</code>、<code>apply</code>来调用才能返回正确的类型信息。</p><p><img src="https://pic.wjnba.top/img/202112021635589.png" alt="image-20211202153634529"></p><h3 id="装一个准确判断数据类型的函数"><a href="#装一个准确判断数据类型的函数" class="headerlink" title="装一个准确判断数据类型的函数"></a>装一个准确判断数据类型的函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取变量准确类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="variable">obj</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;string|&quot;undefined&quot;|&quot;boolean&quot;|&quot;number&quot;|&quot;string&quot;|&quot;function&quot;|&quot;symbol&quot;|&quot;bigint&quot;&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getRealType</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> type = <span class="keyword">typeof</span> obj</span><br><span class="line">  <span class="comment">// 如果不是object类型的数据，直接用typeof就能判断出来</span></span><br><span class="line">  <span class="keyword">if</span> (type !== <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> type</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果是object类型数据，准确判断类型必须使用Object.prototype.toString.call(obj)的方式才能判断</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj).replace(<span class="regexp">/^\[object (\S+)\]$/</span>, <span class="string">&#x27;$1&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="引用数据类型的深拷贝"><a href="#引用数据类型的深拷贝" class="headerlink" title="引用数据类型的深拷贝"></a>引用数据类型的深拷贝</h2><p>上面说了，引用数据类型的变量会分配栈内存和堆内存，其中栈内存存放的是地址，当我们把引用数据类型变量<code>a</code> 赋值给变量<code>b</code>,例如：</p><p><code>let a = [0, 1, 2, 3, 4], b = a</code>,当变量<code>b</code>发生改变后，变量<code>a</code>也相应发生了改变。</p><p> <img src="https://pic.wjnba.top/img/202112021636322.jpeg" alt="img"></p><p>当b=a进行拷贝时，其实复制的是a的引用地址，而并非堆里面的值。</p><p> <img src="https://pic.wjnba.top/img/202112021636727.jpeg" alt="img"></p><p>而当我们<code>b[0]=1</code>时进行数组修改时，由于<code>a</code>与<code>b</code>指向的是同一个地址，所以自然<code>a</code>也受了影响，这就是所谓的浅拷贝了。</p><h3 id="浅拷贝：只是拷贝的栈区的引用地址"><a href="#浅拷贝：只是拷贝的栈区的引用地址" class="headerlink" title="浅拷贝：只是拷贝的栈区的引用地址"></a>浅拷贝：只是拷贝的栈区的引用地址</h3><p>根据浅拷贝的方法不同，会有不同的效果。</p><p>一、最弱的浅拷贝为直接赋值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let b = a;</span><br></pre></td></tr></table></figure><p>是直接将整个<code>a</code>数组的地址赋给<code>b</code>，故<code>b</code>的任意值(为什么说任意值呢？因为后面会介绍到，有些浅拷贝，可以使部分值看上去有深拷贝的效果)改变，都会影响到<code>a</code></p><p>二、下面四种浅拷贝方法就厉害一些了，它们在有些情况（原数组里的数据不包含引用类型）下也能达到深拷贝效果(没错只是披着狼皮的小绵羊啦，本质还是浅拷贝)</p><p>一个数组变化，另一个数组不受影响。</p><p><strong>原数组里的数据不包含引用类型</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]  <span class="comment">// 原数组</span></span><br></pre></td></tr></table></figure><p><strong>1.使用拓展运算符</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b = [...a];</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="keyword">let</span> b=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="comment">//这也就是它不同于b=a的地方</span></span><br></pre></td></tr></table></figure><p><strong>2.使用<code>assign()</code></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b = <span class="built_in">Object</span>.assign([], a)</span><br></pre></td></tr></table></figure><p><strong>3.使用<code>concat()</code></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b = [].concat(a);</span><br></pre></td></tr></table></figure><p>因为 <code>concat()</code> 返回的是一个副本，所以这个时候改变 <code>b</code> 就不会导致 <code>a</code> 改变了。</p><p><strong>4.使用<code>slice()</code></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr2 = arr1.slice(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h3 id="深拷贝：就是不管里面多少层，都遍历，克隆一个与旧不相关的，修改新的不影响旧的。"><a href="#深拷贝：就是不管里面多少层，都遍历，克隆一个与旧不相关的，修改新的不影响旧的。" class="headerlink" title="深拷贝：就是不管里面多少层，都遍历，克隆一个与旧不相关的，修改新的不影响旧的。"></a>深拷贝：就是不管里面多少层，都遍历，克隆一个与旧不相关的，修改新的不影响旧的。</h3><p><strong>原数组里的数据包含引用类型</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span> , &#123;<span class="string">&quot;key&quot;</span> : <span class="string">&quot;value&quot;</span>&#125; , &#123;<span class="string">&quot;key1&quot;</span> : <span class="string">&quot;value1&quot;</span>&#125;];  <span class="comment">//原数组</span></span><br></pre></td></tr></table></figure><p>使用上述方法均不能实现全部深拷贝，非引用类型的值不会受影响，嵌套的一层引用类型的值会受影响。</p><p><strong>解决方法：</strong></p><p><strong>方法一：递归</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">   <span class="comment">// 对常见的“非”值，直接返回原来值</span></span><br><span class="line">  <span class="keyword">if</span> ([<span class="literal">null</span>, <span class="literal">undefined</span>, <span class="literal">NaN</span>, <span class="literal">false</span>].includes(obj)) <span class="keyword">return</span> obj</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> obj !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 原始类型直接返回</span></span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> o =  <span class="built_in">Array</span>.isArray(obj) ? [] : &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.hasOwnProperty.call(obj, i)) &#123;</span><br><span class="line">      o[i] = <span class="keyword">typeof</span> obj[i] === <span class="string">&#x27;object&#x27;</span> ? deepClone(obj[i]) : obj[i]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> o</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = cloneObj(a);</span><br></pre></td></tr></table></figure><p><strong>方法二：通过<code>JSON</code>解析解决</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(a));</span><br></pre></td></tr></table></figure><blockquote><p>注意：这种方法拷贝后的数组会丢失原数组中定义的方法和数组原型中定义的方法。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 深入浅出js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Airbnb JavaScript 代码规范</title>
      <link href="/articles/2021120286445f093d78.html"/>
      <url>/articles/2021120286445f093d78.html</url>
      
        <content type="html"><![CDATA[<p><em>Airbnb JavaScript 代码规范，一种写JavaScript更合理的代码风格。</em>原文地址：<a href="https://github.com/BingKui/javascript-zh">https://github.com/BingKui/javascript-zh</a></p><span id="more"></span><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a><a id="table-of-contents">目录</a></h2><ol><li><a href="#types">类型</a></li><li><a href="#references">引用</a></li><li><a href="#objects">对象</a></li><li><a href="#arrays">数组</a></li><li><a href="#destructuring">解构</a></li><li><a href="#strings">字符</a></li><li><a href="#functions">方法</a></li><li><a href="#arrow-functions">箭头函数</a></li><li><a href="#classes--constructors">类和构造器</a></li><li><a href="#modules">模块</a></li><li><a href="#iterators-and-generators">迭代器和发生器</a></li><li><a href="#properties">属性</a></li><li><a href="#variables">变量</a></li><li><a href="#hoisting">提升</a></li><li><a href="#comparison-operators--equality">比较运算符和等号</a></li><li><a href="#blocks">块</a></li><li><a href="#control-statements">控制语句</a></li><li><a href="#comments">注释</a></li><li><a href="#whitespace">空白</a></li><li><a href="#commas">逗号</a></li><li><a href="#semicolons">分号</a></li><li><a href="#type-casting--coercion">类型转换和强制类型转换</a></li><li><a href="#naming-conventions">命名规范</a></li><li><a href="#accessors">存取器</a></li><li><a href="#events">事件</a></li><li><a href="#jquery">jQuery</a></li><li><a href="#ecmascript-5-compatibility">ECMAScript 5 兼容性</a></li><li><a href="#ecmascript-6-es-2015-styles">ECMAScript 6+ (ES 2015+) 风格</a></li><li><a href="#standard-library">标准库</a></li><li><a href="#testing">测试</a></li><li><a href="#performance">性能</a></li><li><a href="#resources">资源</a></li><li><a href="#the-javascript-style-guide-guide">JavaScript风格指南的指南</a></li><li><a href="#license">许可证</a></li><li><a href="#amendments">修正案</a></li></ol><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a><a id="types">类型</a></h2><p>  <a name="types--primitives">&lt;/a&gt;<a name="1.1"></a></p><ul><li><p><a href="#types--primitives">1.1</a> <strong>原始值</strong>: 当你访问一个原始类型的时候，你可以直接使用它的值。</p><ul><li><code>string</code></li><li><code>number</code></li><li><code>boolean</code></li><li><code>null</code></li><li><code>undefined</code></li><li><code>symbol</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> bar = foo;</span><br><span class="line"></span><br><span class="line">bar = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(foo, bar); <span class="comment">// =&gt; 1, 9</span></span><br></pre></td></tr></table></figure><ul><li>标识符不能完全被支持，因此在针对不支持的浏览器或者环境时不应该使用它们。</li></ul><p><a name="types--complex">&lt;/a&gt;<a name="1.2"></a></p></li><li><p><a href="#types--complex">1.2</a>  <strong>复杂类型</strong>: 当你访问一个复杂类型的时候，你需要一个值得引用。</p><ul><li><code>object</code></li><li><code>array</code></li><li><code>function</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> bar = foo;</span><br><span class="line"></span><br><span class="line">bar[<span class="number">0</span>] = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(foo[<span class="number">0</span>], bar[<span class="number">0</span>]); <span class="comment">// =&gt; 9, 9</span></span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a><a id="references">引用</a></h2><p>  <a name="references--prefer-const">&lt;/a&gt;<a name="2.1"></a></p><ul><li><p><a href="#references--prefer-const">2.1</a> 使用 <code>const</code> 定义你的所有引用；避免使用 <code>var</code>。 eslint: <a href="https://eslint.org/docs/rules/prefer-const.html"><code>prefer-const</code></a>, <a href="https://eslint.org/docs/rules/no-const-assign.html"><code>no-const-assign</code></a></p><blockquote><p>为什么? 这样能够确保你不能重新赋值你的引用，否则可能导致错误或者产生难以理解的代码。.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p><a name="references--disallow-var">&lt;/a&gt;<a name="2.2"></a></p></li><li><p><a href="#references--disallow-var">2.2</a> 如果你必须重新赋值你的引用， 使用 <code>let</code> 代替 <code>var</code>。 eslint: <a href="https://eslint.org/docs/rules/no-var.html"><code>no-var</code></a></p><blockquote><p>为什么? <code>let</code> 是块级作用域，而不像 <code>var</code> 是函数作用域.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  count += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good, use the let.</span></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  count += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="references--block-scope">&lt;/a&gt;<a name="2.3"></a></p></li><li><p><a href="#references--block-scope">2.3</a> 注意，let 和 const 都是块级范围的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// const 和 let 只存在于他们定义的块中。</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">const</span> b = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// ReferenceError</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// ReferenceError</span></span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a><a id="object">对象</a></h2><p>  <a name="objects--no-new">&lt;/a&gt;<a name="3.1"></a></p><ul><li><p><a href="#objects--no-new">3.1</a> 使用字面语法来创建对象。 eslint: <a href="https://eslint.org/docs/rules/no-new-object.html"><code>no-new-object</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> item = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> item = &#123;&#125;;</span><br></pre></td></tr></table></figure><p><a name="es6-computed-properties">&lt;/a&gt;<a name="3.4"></a></p></li><li><p><a href="#es6-computed-properties">3.2</a> 在创建具有动态属性名称的对象时使用计算属性名。</p><blockquote><p>为什么? 它允许你在一个地方定义对象的所有属性。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getKey</span>(<span class="params">k</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`a key named <span class="subst">$&#123;k&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;San Francisco&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line">obj[getKey(<span class="string">&#x27;enabled&#x27;</span>)] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;San Francisco&#x27;</span>,</span><br><span class="line">  [getKey(<span class="string">&#x27;enabled&#x27;</span>)]: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a name="es6-object-shorthand">&lt;/a&gt;<a name="3.5"></a></p></li><li><p><a href="#es6-object-shorthand">3.3</a> 使用对象方法的缩写。 eslint: <a href="https://eslint.org/docs/rules/object-shorthand.html"><code>object-shorthand</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> atom = &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">addValue</span>: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> atom.value + value;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> atom = &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">addValue</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> atom.value + value;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a name="es6-object-concise">&lt;/a&gt;<a name="3.6"></a></p></li><li><p><a href="#es6-object-concise">3.4</a> 使用属性值的缩写。 eslint: <a href="https://eslint.org/docs/rules/object-shorthand.html"><code>object-shorthand</code></a></p><blockquote><p>为什么? 它的写法和描述较短。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> lukeSkywalker = <span class="string">&#x27;Luke Skywalker&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">lukeSkywalker</span>: lukeSkywalker,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  lukeSkywalker,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a name="objects--grouped-shorthand">&lt;/a&gt;<a name="3.7"></a></p></li><li><p><a href="#objects--grouped-shorthand">3.5</a> 在对象声明的时候将简写的属性进行分组。</p><blockquote><p>为什么? 这样更容易的判断哪些属性使用的简写。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> anakinSkywalker = <span class="string">&#x27;Anakin Skywalker&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> lukeSkywalker = <span class="string">&#x27;Luke Skywalker&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">episodeOne</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">twoJediWalkIntoACantina</span>: <span class="number">2</span>,</span><br><span class="line">  lukeSkywalker,</span><br><span class="line">  <span class="attr">episodeThree</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">mayTheFourth</span>: <span class="number">4</span>,</span><br><span class="line">  anakinSkywalker,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  lukeSkywalker,</span><br><span class="line">  anakinSkywalker,</span><br><span class="line">  <span class="attr">episodeOne</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">twoJediWalkIntoACantina</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">episodeThree</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">mayTheFourth</span>: <span class="number">4</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a name="objects--quoted-props">&lt;/a&gt;<a name="3.8"></a></p></li><li><p><a href="#objects--quoted-props">3.6</a> 只使用引号标注无效标识符的属性。 eslint: <a href="https://eslint.org/docs/rules/quote-props.html"><code>quote-props</code></a></p><blockquote><p>为什么? 总的来说，我们认为这样更容易阅读。 它提升了语法高亮显示，并且更容易通过许多 JS 引擎优化。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> bad = &#123;</span><br><span class="line">  <span class="string">&#x27;foo&#x27;</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="string">&#x27;bar&#x27;</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="string">&#x27;data-blah&#x27;</span>: <span class="number">5</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> good = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">bar</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="string">&#x27;data-blah&#x27;</span>: <span class="number">5</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a name="objects--prototype-builtins"></a></p></li><li><p><a href="#objects--prototype-builtins">3.7</a> 不能直接调用 <code>Object.prototype</code> 的方法，如： <code>hasOwnProperty</code> 、 <code>propertyIsEnumerable</code> 和 <code>isPrototypeOf</code>。</p><blockquote><p>为什么? 这些方法可能被以下问题对象的属性追踪 - 相应的有 <code>&#123; hasOwnProperty: false &#125;</code> - 或者，对象是一个空对象 (<code>Object.create(null)</code>)。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="built_in">console</span>.log(object.hasOwnProperty(key));</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.hasOwnProperty.call(object, key));</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">const</span> has = <span class="built_in">Object</span>.prototype.hasOwnProperty; <span class="comment">// 在模块范围内的缓存中查找一次</span></span><br><span class="line"><span class="comment">/* or */</span></span><br><span class="line"><span class="keyword">import</span> has <span class="keyword">from</span> <span class="string">&#x27;has&#x27;</span>; <span class="comment">// https://www.npmjs.com/package/has</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="built_in">console</span>.log(has.call(object, key));</span><br></pre></td></tr></table></figure><p><a name="objects--rest-spread"></a></p></li><li><p><a href="#objects--rest-spread">3.8</a> 更喜欢对象扩展操作符，而不是用 <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign"><code>Object.assign</code></a> 浅拷贝一个对象。 使用对象的 rest 操作符来获得一个具有某些属性的新对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// very bad</span></span><br><span class="line"><span class="keyword">const</span> original = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> copy = <span class="built_in">Object</span>.assign(original, &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;); <span class="comment">// 变异的 `original` ಠ_ಠ</span></span><br><span class="line"><span class="keyword">delete</span> copy.a; <span class="comment">// 这....</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> original = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> copy = <span class="built_in">Object</span>.assign(&#123;&#125;, original, &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;); <span class="comment">// copy =&gt; &#123; a: 1, b: 2, c: 3 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> original = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> copy = &#123; ...original, <span class="attr">c</span>: <span class="number">3</span> &#125;; <span class="comment">// copy =&gt; &#123; a: 1, b: 2, c: 3 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; a, ...noA &#125; = copy; <span class="comment">// noA =&gt; &#123; b: 2, c: 3 &#125;</span></span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a><a id="arrays">数组</a></h2><p>  <a name="arrays--literals">&lt;/a&gt;<a name="4.1"></a></p><ul><li><p><a href="#arrays--literals">4.1</a> 使用字面语法创建数组。 eslint: <a href="https://eslint.org/docs/rules/no-array-constructor.html"><code>no-array-constructor</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> items = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> items = [];</span><br></pre></td></tr></table></figure><p><a name="arrays--push">&lt;/a&gt;<a name="4.2"></a></p></li><li><p><a href="#arrays--push">4.2</a> 使用 <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/push">Array#push</a> 取代直接赋值来给数组添加项。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> someStack = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">someStack[someStack.length] = <span class="string">&#x27;abracadabra&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">someStack.push(<span class="string">&#x27;abracadabra&#x27;</span>);</span><br></pre></td></tr></table></figure><p><a name="es6-array-spreads">&lt;/a&gt;<a name="4.3"></a></p></li><li><p><a href="#es6-array-spreads">4.3</a> 使用数组展开方法 <code>...</code> 来拷贝数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> len = items.length;</span><br><span class="line"><span class="keyword">const</span> itemsCopy = [];</span><br><span class="line"><span class="keyword">let</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i += <span class="number">1</span>) &#123;</span><br><span class="line">  itemsCopy[i] = items[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> itemsCopy = [...items];</span><br></pre></td></tr></table></figure><p><a name="arrays--from">&lt;/a&gt;<a name="4.4"></a></p></li><li><p><a href="#arrays--from">4.4</a> 将一个类数组对象转换成一个数组， 使用展开方法 <code>...</code> 代替 <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/from"><code>Array.from</code></a>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.foo&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> nodes = <span class="built_in">Array</span>.from(foo);</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">const</span> nodes = [...foo];</span><br></pre></td></tr></table></figure><p><a name="arrays--mapping"></a></p></li><li><p><a href="#arrays--mapping">4.5</a> 对于对迭代器的映射，使用 <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/from">Array.from</a> 替代展开方法 <code>...</code> ， 因为它避免了创建中间数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> baz = [...foo].map(bar);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> baz = <span class="built_in">Array</span>.from(foo, bar);</span><br></pre></td></tr></table></figure><p><a name="arrays--callback-return">&lt;/a&gt;<a name="4.5"></a></p></li><li><p><a href="#arrays--callback-return">4.6</a> 在数组回调方法中使用 return 语句。 如果函数体由一个返回无副作用的表达式的单个语句组成，那么可以省略返回值， 具体查看 <a href="#arrows--implicit-return">8.2</a>。 eslint: <a href="https://eslint.org/docs/rules/array-callback-return"><code>array-callback-return</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> y = x + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad - 没有返回值，意味着在第一次迭代后 `acc` 没有被定义</span></span><br><span class="line">[[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]].reduce(<span class="function">(<span class="params">acc, item, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> flatten = acc.concat(item);</span><br><span class="line">  acc[index] = flatten;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]].reduce(<span class="function">(<span class="params">acc, item, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> flatten = acc.concat(item);</span><br><span class="line">  acc[index] = flatten;</span><br><span class="line">  <span class="keyword">return</span> flatten;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">inbox.filter(<span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; subject, author &#125; = msg;</span><br><span class="line">  <span class="keyword">if</span> (subject === <span class="string">&#x27;Mockingbird&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> author === <span class="string">&#x27;Harper Lee&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">inbox.filter(<span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; subject, author &#125; = msg;</span><br><span class="line">  <span class="keyword">if</span> (subject === <span class="string">&#x27;Mockingbird&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> author === <span class="string">&#x27;Harper Lee&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a name="arrays--bracket-newline"></a></p></li><li><p><a href="#arrays--bracket-newline">4.7</a> 如果数组有多行，则在开始的时候换行，然后在结束的时候换行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  [<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> objectInArray = [&#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numberInArray = [</span><br><span class="line">  <span class="number">1</span>, <span class="number">2</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> arr = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> objectInArray = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numberInArray = [</span><br><span class="line">  <span class="number">1</span>,</span><br><span class="line">  <span class="number">2</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><h2 id="解构"><a href="#解构" class="headerlink" title="解构"></a><a id="destructuring">解构</a></h2><p>  <a name="destructuring--object">&lt;/a&gt;<a name="5.1"></a></p><ul><li><p><a href="#destructuring--object">5.1</a> 在访问和使用对象的多个属性的时候使用对象的解构。 eslint: <a href="https://eslint.org/docs/rules/prefer-destructuring"><code>prefer-destructuring</code></a></p><blockquote><p>为什么? 解构可以避免为这些属性创建临时引用。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> firstName = user.firstName;</span><br><span class="line">  <span class="keyword">const</span> lastName = user.lastName;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; firstName, lastName &#125; = user;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">&#123; firstName, lastName &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="destructuring--array">&lt;/a&gt;<a name="5.2"></a></p></li><li><p><a href="#destructuring--array">5.2</a> 使用数组解构。 eslint: <a href="https://eslint.org/docs/rules/prefer-destructuring"><code>prefer-destructuring</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> first = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">const</span> second = arr[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> [first, second] = arr;</span><br></pre></td></tr></table></figure><p><a name="destructuring--object-over-array">&lt;/a&gt;<a name="5.3"></a></p></li><li><p><a href="#destructuring--object-over-array">5.3</a> 对于多个返回值使用对象解构，而不是数组解构。</p><blockquote><p>为什么? 你可以随时添加新的属性或者改变属性的顺序，而不用修改调用方。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processInput</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 处理代码...</span></span><br><span class="line">  <span class="keyword">return</span> [left, right, top, bottom];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用者需要考虑返回数据的顺序。</span></span><br><span class="line"><span class="keyword">const</span> [left, __, top] = processInput(input);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processInput</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 处理代码...</span></span><br><span class="line">  <span class="keyword">return</span> &#123; left, right, top, bottom &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用者只选择他们需要的数据。</span></span><br><span class="line"><span class="keyword">const</span> &#123; left, top &#125; = processInput(input);</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><h2 id="字符"><a href="#字符" class="headerlink" title="字符"></a><a id="strings">字符</a></h2><p>  <a name="strings--quotes">&lt;/a&gt;<a name="6.1"></a></p><ul><li><p><a href="#strings--quotes">6.1</a> 使用单引号 <code>&#39;&#39;</code> 定义字符串。 eslint: <a href="https://eslint.org/docs/rules/quotes.html"><code>quotes</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;Capt. Janeway&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad - 模板文字应该包含插值或换行。</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">`Capt. Janeway`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;Capt. Janeway&#x27;</span>;</span><br></pre></td></tr></table></figure><p><a name="strings--line-length">&lt;/a&gt;<a name="6.2"></a></p></li><li><p><a href="#strings--line-length">6.2</a> 使行超过100个字符的字符串不应使用字符串连接跨多行写入。</p><blockquote><p>为什么? 断开的字符串更加难以工作，并且使代码搜索更加困难。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> errorMessage = <span class="string">&#x27;This is a super long error that was thrown because \</span></span><br><span class="line"><span class="string">of Batman. When you stop to think about how Batman had anything to do \</span></span><br><span class="line"><span class="string">with this, you would get nowhere \</span></span><br><span class="line"><span class="string">fast.&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> errorMessage = <span class="string">&#x27;This is a super long error that was thrown because &#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;of Batman. When you stop to think about how Batman had anything to do &#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;with this, you would get nowhere fast.&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> errorMessage = <span class="string">&#x27;This is a super long error that was thrown because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.&#x27;</span>;</span><br></pre></td></tr></table></figure><p><a name="es6-template-literals">&lt;/a&gt;<a name="6.4"></a></p></li><li><p><a href="#es6-template-literals">6.3</a> 当以编程模式构建字符串时，使用字符串模板代替字符串拼接。 eslint: <a href="https://eslint.org/docs/rules/prefer-template.html"><code>prefer-template</code></a> <a href="https://eslint.org/docs/rules/template-curly-spacing"><code>template-curly-spacing</code></a></p><blockquote><p>为什么? 字符串模板为您提供了一种可读的、简洁的语法，具有正确的换行和字符串插值特性。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;How are you, &#x27;</span> + name + <span class="string">&#x27;?&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="string">&#x27;How are you, &#x27;</span>, name, <span class="string">&#x27;?&#x27;</span>].join();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`How are you, <span class="subst">$&#123; name &#125;</span>?`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`How are you, <span class="subst">$&#123;name&#125;</span>?`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="strings--eval">&lt;/a&gt;<a name="6.5"></a></p></li><li><p><a href="#strings--eval">6.4</a> 不要在字符串上使用 <code>eval()</code> ，它打开了太多漏洞。 eslint: <a href="https://eslint.org/docs/rules/no-eval"><code>no-eval</code></a></p><p><a name="strings--escaping"></a></p></li><li><p><a href="#strings--escaping">6.5</a> 不要转义字符串中不必要的字符。 eslint: <a href="https://eslint.org/docs/rules/no-useless-escape"><code>no-useless-escape</code></a></p><blockquote><p>为什么? 反斜杠损害了可读性，因此只有在必要的时候才会出现。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="string">&#x27;\&#x27;this\&#x27; \i\s \&quot;quoted\&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="string">&#x27;\&#x27;this\&#x27; is &quot;quoted&quot;&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> foo = <span class="string">`my name is &#x27;<span class="subst">$&#123;name&#125;</span>&#x27;`</span>;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a><a id="functions">方法</a></h2><p>  <a name="functions--declarations">&lt;/a&gt;<a name="7.1"></a></p><ul><li><p><a href="#functions--declarations">7.1</a> 使用命名的函数表达式代替函数声明。 eslint: <a href="https://eslint.org/docs/rules/func-style"><code>func-style</code></a></p><blockquote><p>为什么? 函数声明是挂起的，这意味着在它在文件中定义之前，很容易引用函数。这会损害可读性和可维护性。如果您发现函数的定义是大的或复杂的，以至于它干扰了对文件的其余部分的理解，那么也许是时候将它提取到它自己的模块中了!不要忘记显式地命名这个表达式，不管它的名称是否从包含变量(在现代浏览器中经常是这样，或者在使用诸如Babel之类的编译器时)。这消除了对错误的调用堆栈的任何假设。 (<a href="https://github.com/airbnb/javascript/issues/794">Discussion</a>)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">// 从变量引用调用中区分的词汇名称</span></span><br><span class="line"><span class="keyword">const</span> short = <span class="function"><span class="keyword">function</span> <span class="title">longUniqueMoreDescriptiveLexicalFoo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a name="functions--iife">&lt;/a&gt;<a name="7.2"></a></p></li><li><p><a href="#functions--iife">7.2</a> Wrap立即调用函数表达式。 eslint: <a href="https://eslint.org/docs/rules/wrap-iife.html"><code>wrap-iife</code></a></p><blockquote><p>为什么? 立即调用的函数表达式是单个单元 - 包装， 并且拥有括号调用, 在括号内, 清晰的表达式。 请注意，在一个到处都是模块的世界中，您几乎不需要一个 IIFE 。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// immediately-invoked function expression (IIFE) 立即调用的函数表达式</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Welcome to the Internet. Please follow me.&#x27;</span>);</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><p><a name="functions--in-blocks">&lt;/a&gt;<a name="7.3"></a></p></li><li><p><a href="#functions--in-blocks">7.3</a> 切记不要在非功能块中声明函数 (<code>if</code>, <code>while</code>, 等)。 将函数赋值给变量。 浏览器允许你这样做，但是他们都有不同的解释，这是个坏消息。 eslint: <a href="https://eslint.org/docs/rules/no-loop-func.html"><code>no-loop-func</code></a></p><p><a name="functions--note-on-blocks">&lt;/a&gt;<a name="7.4"></a></p></li><li><p><a href="#functions--note-on-blocks">7.4</a> <strong>注意:</strong> ECMA-262 将 <code>block</code> 定义为语句列表。 函数声明不是语句。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (currentUser) &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Nope.&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">let</span> test;</span><br><span class="line"><span class="keyword">if</span> (currentUser) &#123;</span><br><span class="line">  test = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Yup.&#x27;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="functions--arguments-shadow">&lt;/a&gt;<a name="7.5"></a></p></li><li><p><a href="#functions--arguments-shadow">7.5</a> 永远不要定义一个参数为 <code>arguments</code>。 这将会优先于每个函数给定范围的 <code>arguments</code> 对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">name, options, <span class="built_in">arguments</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">name, options, args</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="es6-rest">&lt;/a&gt;<a name="7.6"></a></p></li><li><p><a href="#es6-rest">7.6</a> 不要使用 <code>arguments</code>, 选择使用 rest 语法 <code>...</code> 代替。 eslint: <a href="https://eslint.org/docs/rules/prefer-rest-params"><code>prefer-rest-params</code></a></p><blockquote><p>为什么? <code>...</code> 明确了你想要拉取什么参数。 更甚, rest 参数是一个真正的数组，而不仅仅是类数组的 <code>arguments</code> 。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concatenateAll</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="keyword">return</span> args.join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concatenateAll</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> args.join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="es6-default-parameters">&lt;/a&gt;<a name="7.7"></a></p></li><li><p><a href="#es6-default-parameters">7.7</a> 使用默认的参数语法，而不是改变函数参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// really bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">opts</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// No! We shouldn’t mutate function arguments.</span></span><br><span class="line">  <span class="comment">// Double bad: if opts is falsy it&#x27;ll be set to an object which may</span></span><br><span class="line">  <span class="comment">// be what you want but it can introduce subtle bugs.</span></span><br><span class="line">  opts = opts || &#123;&#125;;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// still bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">opts</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (opts === <span class="keyword">void</span> <span class="number">0</span>) &#123;</span><br><span class="line">    opts = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">opts = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="functions--default-side-effects">&lt;/a&gt;<a name="7.8"></a></p></li><li><p><a href="#functions--default-side-effects">7.8</a> 避免使用默认参数的副作用。</p><blockquote><p>为什么? 他们很容易混淆。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params">a = b++</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line">count();  <span class="comment">// 1</span></span><br><span class="line">count();  <span class="comment">// 2</span></span><br><span class="line">count(<span class="number">3</span>); <span class="comment">// 3</span></span><br><span class="line">count();  <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p><a name="functions--defaults-last">&lt;/a&gt;<a name="7.9"></a></p></li><li><p><a href="#functions--defaults-last">7.9</a> 总是把默认参数放在最后。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">opts = &#123;&#125;, name</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">name, opts = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="functions--constructor">&lt;/a&gt;<a name="7.10"></a></p></li><li><p><a href="#functions--constructor">7.10</a> 永远不要使用函数构造器来创建一个新函数。 eslint: <a href="https://eslint.org/docs/rules/no-new-func"><code>no-new-func</code></a></p><blockquote><p>为什么? 以这种方式创建一个函数将对一个类似于 <code>eval()</code> 的字符串进行计算，这将打开漏洞。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> add = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;return a + b&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// still bad</span></span><br><span class="line"><span class="keyword">var</span> subtract = <span class="built_in">Function</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;return a - b&#x27;</span>);</span><br></pre></td></tr></table></figure><p><a name="functions--signature-spacing">&lt;/a&gt;<a name="7.11"></a></p></li><li><p><a href="#functions--signature-spacing">7.11</a> 函数签名中的间距。 eslint: <a href="https://eslint.org/docs/rules/space-before-function-paren"><code>space-before-function-paren</code></a> <a href="https://eslint.org/docs/rules/space-before-blocks"><code>space-before-blocks</code></a></p><blockquote><p>为什么? 一致性很好，在删除或添加名称时不需要添加或删除空格。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> g = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> h = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> x = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> y = <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure><p><a name="functions--mutate-params">&lt;/a&gt;<a name="7.12"></a></p></li><li><p><a href="#functions--mutate-params">7.12</a> 没用变异参数。 eslint: <a href="https://eslint.org/docs/rules/no-param-reassign.html"><code>no-param-reassign</code></a></p><blockquote><p>为什么? 将传入的对象作为参数进行操作可能会在原始调用程序中造成不必要的变量副作用。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  obj.key = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> key = <span class="built_in">Object</span>.prototype.hasOwnProperty.call(obj, <span class="string">&#x27;key&#x27;</span>) ? obj.key : <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="functions--reassign-params">&lt;/a&gt;<a name="7.13"></a></p></li><li><p><a href="#functions--reassign-params">7.13</a> 不要再赋值参数。 eslint: <a href="https://eslint.org/docs/rules/no-param-reassign.html"><code>no-param-reassign</code></a></p><blockquote><p>为什么? 重新赋值参数会导致意外的行为，尤其是在访问 <code>arguments</code> 对象的时候。 它还可能导致性能优化问题，尤其是在 V8 中。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  a = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!a) &#123; a = <span class="number">1</span>; &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f3</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> b = a || <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f4</span>(<span class="params">a = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="functions--spread-vs-apply">&lt;/a&gt;<a name="7.14"></a></p></li><li><p><a href="#functions--spread-vs-apply">7.14</a> 优先使用扩展运算符 <code>...</code> 来调用可变参数函数。 eslint: <a href="https://eslint.org/docs/rules/prefer-spread"><code>prefer-spread</code></a></p><blockquote><p>为什么? 它更加干净，你不需要提供上下文，并且你不能轻易的使用 <code>apply</code> 来 <code>new</code> 。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log.apply(<span class="built_in">console</span>, x);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(...x);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">new</span> (<span class="built_in">Function</span>.prototype.bind.apply(<span class="built_in">Date</span>, [<span class="literal">null</span>, <span class="number">2016</span>, <span class="number">8</span>, <span class="number">5</span>]));</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(...[<span class="number">2016</span>, <span class="number">8</span>, <span class="number">5</span>]);</span><br></pre></td></tr></table></figure><p><a name="functions--signature-invocation-indentation"></a></p></li><li><p><a href="#functions--signature-invocation-indentation">7.15</a> 具有多行签名或者调用的函数应该像本指南中的其他多行列表一样缩进：在一行上只有一个条目，并且每个条目最后加上逗号。 eslint: <a href="https://eslint.org/docs/rules/function-paren-newline"><code>function-paren-newline</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">bar,</span></span></span><br><span class="line"><span class="params"><span class="function">             baz,</span></span></span><br><span class="line"><span class="params"><span class="function">             quux</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  bar,</span></span></span><br><span class="line"><span class="params"><span class="function">  baz,</span></span></span><br><span class="line"><span class="params"><span class="function">  quux,</span></span></span><br><span class="line"><span class="params"><span class="function"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="built_in">console</span>.log(foo,</span><br><span class="line">  bar,</span><br><span class="line">  baz);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  foo,</span><br><span class="line">  bar,</span><br><span class="line">  baz,</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a><a id="arrow-functions">箭头函数</a></h2><p>  <a name="arrows--use-them">&lt;/a&gt;<a name="8.1"></a></p><ul><li><p><a href="#arrows--use-them">8.1</a> 当你必须使用匿名函数时 (当传递内联函数时)， 使用箭头函数。 eslint: <a href="https://eslint.org/docs/rules/prefer-arrow-callback.html"><code>prefer-arrow-callback</code></a>, <a href="https://eslint.org/docs/rules/arrow-spacing.html"><code>arrow-spacing</code></a></p><blockquote><p>为什么? 它创建了一个在 <code>this</code> 上下文中执行的函数版本，它通常是你想要的，并且是一个更简洁的语法。</p><p>为什么不? 如果你有一个相当复杂的函数，你可以把这个逻辑转移到它自己的命名函数表达式中。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> y = x + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> y = x + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a name="arrows--implicit-return">&lt;/a&gt;<a name="8.2"></a></p></li><li><p><a href="#arrows--implicit-return">8.2</a> 如果函数体包含一个单独的语句，返回一个没有副作用的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Expressions">expression</a> ， 省略括号并使用隐式返回。否则，保留括号并使用 <code>return</code> 语句。 eslint: <a href="https://eslint.org/docs/rules/arrow-parens.html"><code>arrow-parens</code></a>, <a href="https://eslint.org/docs/rules/arrow-body-style.html"><code>arrow-body-style</code></a></p><blockquote><p>为什么? 语法糖。 多个函数被链接在一起时，提高可读性。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> nextNumber = number + <span class="number">1</span>;</span><br><span class="line">  <span class="string">`A string containing the <span class="subst">$&#123;nextNumber&#125;</span>.`</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">number</span> =&gt;</span> <span class="string">`A string containing the <span class="subst">$&#123;number&#125;</span>.`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function">(<span class="params">number</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> nextNumber = number + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`A string containing the <span class="subst">$&#123;nextNumber&#125;</span>.`</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function">(<span class="params">number, index</span>) =&gt;</span> (&#123;</span><br><span class="line">  [index]: number,</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有副作用的隐式返回</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> val = callback();</span><br><span class="line">  <span class="keyword">if</span> (val === <span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果回调返回 true 执行</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bool = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">foo(<span class="function">() =&gt;</span> bool = <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">foo(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  bool = <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a name="arrows--paren-wrap">&lt;/a&gt;<a name="8.3"></a></p></li><li><p><a href="#arrows--paren-wrap">8.3</a> 如果表达式跨越多个行，用括号将其括起来，以获得更好的可读性。</p><blockquote><p>为什么? 它清楚地显示了函数的起点和终点。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">[<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;put&#x27;</span>].map(<span class="function"><span class="params">httpMethod</span> =&gt;</span> <span class="built_in">Object</span>.prototype.hasOwnProperty.call(</span><br><span class="line">    httpMagicObjectWithAVeryLongName,</span><br><span class="line">    httpMethod,</span><br><span class="line">  )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;put&#x27;</span>].map(<span class="function"><span class="params">httpMethod</span> =&gt;</span> (</span><br><span class="line">  <span class="built_in">Object</span>.prototype.hasOwnProperty.call(</span><br><span class="line">    httpMagicObjectWithAVeryLongName,</span><br><span class="line">    httpMethod,</span><br><span class="line">  )</span><br><span class="line">));</span><br></pre></td></tr></table></figure><p><a name="arrows--one-arg-parens">&lt;/a&gt;<a name="8.4"></a></p></li><li><p><a href="#arrows--one-arg-parens">8.4</a> 如果你的函数接收一个参数，则可以不用括号，省略括号。 否则，为了保证清晰和一致性，需要在参数周围加上括号。 注意：总是使用括号是可以接受的，在这种情况下，我们使用 <a href="https://eslint.org/docs/rules/arrow-parens#always">“always” option</a> 来配置 eslint. eslint: <a href="https://eslint.org/docs/rules/arrow-parens.html"><code>arrow-parens</code></a></p><blockquote><p>为什么? 减少视觉上的混乱。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function">(<span class="params">x</span>) =&gt;</span> x * x);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">number</span> =&gt;</span> (</span><br><span class="line">  <span class="string">`A long string with the <span class="subst">$&#123;number&#125;</span>. It’s so long that we don’t want it to take up space on the .map line!`</span></span><br><span class="line">));</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> y = x + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> y = x + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a name="arrows--confusing">&lt;/a&gt;<a name="8.5"></a></p></li><li><p><a href="#arrows--confusing">8.5</a> 避免箭头函数符号 (<code>=&gt;</code>) 和比较运算符 (<code>&lt;=</code>, <code>&gt;=</code>) 的混淆。 eslint: <a href="https://eslint.org/docs/rules/no-confusing-arrow"><code>no-confusing-arrow</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> itemHeight = <span class="function"><span class="params">item</span> =&gt;</span> item.height &gt; <span class="number">256</span> ? item.largeSize : item.smallSize;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> itemHeight = <span class="function">(<span class="params">item</span>) =&gt;</span> item.height &gt; <span class="number">256</span> ? item.largeSize : item.smallSize;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> itemHeight = <span class="function"><span class="params">item</span> =&gt;</span> (item.height &gt; <span class="number">256</span> ? item.largeSize : item.smallSize);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> itemHeight = <span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; height, largeSize, smallSize &#125; = item;</span><br><span class="line">  <span class="keyword">return</span> height &gt; <span class="number">256</span> ? largeSize : smallSize;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a name="whitespace--implicit-arrow-linebreak"></a></p></li><li><p><a href="#whitespace--implicit-arrow-linebreak">8.6</a> 注意带有隐式返回的箭头函数函数体的位置。 eslint: <a href="https://eslint.org/docs/rules/implicit-arrow-linebreak"><code>implicit-arrow-linebreak</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">(foo) =&gt;</span><br><span class="line">  bar;</span><br><span class="line"></span><br><span class="line"><span class="function">(<span class="params">foo</span>) =&gt;</span></span><br><span class="line">  (bar);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function">(<span class="params">foo</span>) =&gt;</span> bar;</span><br><span class="line"><span class="function">(<span class="params">foo</span>) =&gt;</span> (bar);</span><br><span class="line"><span class="function">(<span class="params">foo</span>) =&gt;</span> (</span><br><span class="line">   bar</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><h2 id="类和构造器"><a href="#类和构造器" class="headerlink" title="类和构造器"></a><a id="classes--constructors">类和构造器</a></h2><p>  <a name="constructors--use-class">&lt;/a&gt;<a name="9.1"></a></p><ul><li><p><a href="#constructors--use-class">9.1</a> 尽量使用 <code>class</code>. 避免直接操作 <code>prototype</code> .</p><blockquote><p>为什么? <code>class</code> 语法更简洁，更容易推理。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params">contents = []</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.queue = [...contents];</span><br><span class="line">&#125;</span><br><span class="line">Queue.prototype.pop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> value = <span class="built_in">this</span>.queue[<span class="number">0</span>];</span><br><span class="line">  <span class="built_in">this</span>.queue.splice(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">contents = []</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.queue = [...contents];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">pop</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> value = <span class="built_in">this</span>.queue[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">this</span>.queue.splice(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="constructors--extends">&lt;/a&gt;<a name="9.2"></a></p></li><li><p><a href="#constructors--extends">9.2</a> 使用 <code>extends</code> 来扩展继承。</p><blockquote><p>为什么? 它是一个内置的方法，可以在不破坏 <code>instanceof</code> 的情况下继承原型功能。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> inherits = <span class="built_in">require</span>(<span class="string">&#x27;inherits&#x27;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PeekableQueue</span>(<span class="params">contents</span>) </span>&#123;</span><br><span class="line">  Queue.apply(<span class="built_in">this</span>, contents);</span><br><span class="line">&#125;</span><br><span class="line">inherits(PeekableQueue, Queue);</span><br><span class="line">PeekableQueue.prototype.peek = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.queue[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PeekableQueue</span> <span class="keyword">extends</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">peek</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.queue[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="constructors--chaining">&lt;/a&gt;<a name="9.3"></a></p></li><li><p><a href="#constructors--chaining">9.3</a> 方法返回了 <code>this</code> 来供其内部方法调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">Jedi.prototype.jump = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.jumping = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Jedi.prototype.setHeight = <span class="function"><span class="keyword">function</span> (<span class="params">height</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.height = height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> luke = <span class="keyword">new</span> Jedi();</span><br><span class="line">luke.jump(); <span class="comment">// =&gt; true</span></span><br><span class="line">luke.setHeight(<span class="number">20</span>); <span class="comment">// =&gt; undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jedi</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">jump</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.jumping = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">setHeight</span>(<span class="params">height</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.height = height;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> luke = <span class="keyword">new</span> Jedi();</span><br><span class="line"></span><br><span class="line">luke.jump()</span><br><span class="line">  .setHeight(<span class="number">20</span>);</span><br></pre></td></tr></table></figure><p><a name="constructors--tostring">&lt;/a&gt;<a name="9.4"></a></p></li><li><p><a href="#constructors--tostring">9.4</a> 只要在确保能正常工作并且不产生任何副作用的情况下，编写一个自定义的 <code>toString()</code> 方法也是可以的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jedi</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">options = &#123;&#125;</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = options.name || <span class="string">&#x27;no name&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Jedi - <span class="subst">$&#123;<span class="built_in">this</span>.getName()&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="constructors--no-useless">&lt;/a&gt;<a name="9.5"></a></p></li><li><p><a href="#constructors--no-useless">9.5</a> 如果没有指定类，则类具有默认的构造器。 一个空的构造器或是一个代表父类的函数是没有必要的。 eslint: <a href="https://eslint.org/docs/rules/no-useless-constructor"><code>no-useless-constructor</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jedi</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rey</span> <span class="keyword">extends</span> <span class="title">Jedi</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">...args</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(...args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rey</span> <span class="keyword">extends</span> <span class="title">Jedi</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">...args</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(...args);</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&#x27;Rey&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="classes--no-duplicate-members"></a></p></li><li><p><a href="#classes--no-duplicate-members">9.6</a> 避免定义重复的类成员。 eslint: <a href="https://eslint.org/docs/rules/no-dupe-class-members"><code>no-dupe-class-members</code></a></p><blockquote><p>为什么? 重复的类成员声明将会默认倾向于最后一个 - 具有重复的类成员可以说是一个错误。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">bar</span>(<span class="params"></span>)</span> &#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">  <span class="function"><span class="title">bar</span>(<span class="params"></span>)</span> &#123; <span class="keyword">return</span> <span class="number">2</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">bar</span>(<span class="params"></span>)</span> &#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">bar</span>(<span class="params"></span>)</span> &#123; <span class="keyword">return</span> <span class="number">2</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a><a id="modules">模块</a></h2><p>  <a name="modules--use-them">&lt;/a&gt;<a name="10.1"></a></p><ul><li><p><a href="#modules--use-them">10.1</a> 你可能经常使用模块 (<code>import</code>/<code>export</code>) 在一些非标准模块的系统上。 你也可以在你喜欢的模块系统上相互转换。</p><blockquote><p>为什么? 模块是未来的趋势，让我们拥抱未来。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> AirbnbStyleGuide = <span class="built_in">require</span>(<span class="string">&#x27;./AirbnbStyleGuide&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = AirbnbStyleGuide.es6;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ok</span></span><br><span class="line"><span class="keyword">import</span> AirbnbStyleGuide <span class="keyword">from</span> <span class="string">&#x27;./AirbnbStyleGuide&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> AirbnbStyleGuide.es6;</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">import</span> &#123; es6 &#125; <span class="keyword">from</span> <span class="string">&#x27;./AirbnbStyleGuide&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> es6;</span><br></pre></td></tr></table></figure><p><a name="modules--no-wildcard">&lt;/a&gt;<a name="10.2"></a></p></li><li><p><a href="#modules--no-wildcard">10.2</a> 不要使用通配符导入。</p><blockquote><p>为什么? 这确定你有一个单独的默认导出。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> AirbnbStyleGuide <span class="keyword">from</span> <span class="string">&#x27;./AirbnbStyleGuide&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> AirbnbStyleGuide <span class="keyword">from</span> <span class="string">&#x27;./AirbnbStyleGuide&#x27;</span>;</span><br></pre></td></tr></table></figure><p><a name="modules--no-export-from-import">&lt;/a&gt;<a name="10.3"></a></p></li><li><p><a href="#modules--no-export-from-import">10.3</a> 不要直接从导入导出。</p><blockquote><p>为什么? 虽然写在一行很简洁，但是有一个明确的导入和一个明确的导出能够保证一致性。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="comment">// filename es6.js</span></span><br><span class="line"><span class="keyword">export</span> &#123; es6 <span class="keyword">as</span> <span class="keyword">default</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./AirbnbStyleGuide&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">// filename es6.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; es6 &#125; <span class="keyword">from</span> <span class="string">&#x27;./AirbnbStyleGuide&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> es6;</span><br></pre></td></tr></table></figure><p><a name="modules--no-duplicate-imports"></a></p></li><li><p><a href="#modules--no-duplicate-imports">10.4</a> 只从一个路径导入所有需要的东西。<br>eslint: <a href="https://eslint.org/docs/rules/no-duplicate-imports"><code>no-duplicate-imports</code></a></p><blockquote><p>为什么? 从同一个路径导入多个行，使代码更难以维护。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> foo <span class="keyword">from</span> <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line"><span class="comment">// … 其他导入 … //</span></span><br><span class="line"><span class="keyword">import</span> &#123; named1, named2 &#125; <span class="keyword">from</span> <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> foo, &#123; named1, named2 &#125; <span class="keyword">from</span> <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> foo, &#123;</span><br><span class="line">  named1,</span><br><span class="line">  named2,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;foo&#x27;</span>;</span><br></pre></td></tr></table></figure><p><a name="modules--no-mutable-exports"></a></p></li><li><p><a href="#modules--no-mutable-exports">10.5</a> 不要导出可变的引用。<br>eslint: <a href="https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-mutable-exports.md"><code>import/no-mutable-exports</code></a></p><blockquote><p>为什么? 在一般情况下，应该避免发生突变，但是在导出可变引用时及其容易发生突变。虽然在某些特殊情况下，可能需要这样，但是一般情况下只需要导出常量引用。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">let</span> foo = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; foo &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; foo &#125;;</span><br></pre></td></tr></table></figure><p><a name="modules--prefer-default-export"></a></p></li><li><p><a href="#modules--prefer-default-export">10.6</a> 在单个导出的模块中，选择默认模块而不是指定的导出。<br>eslint: <a href="https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/prefer-default-export.md"><code>import/prefer-default-export</code></a></p><blockquote><p>为什么? 为了鼓励更多的文件只导出一件东西，这样可读性和可维护性更好。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><a name="modules--imports-first"></a></p></li><li><p><a href="#modules--imports-first">10.7</a> 将所有的 <code>import</code>s 语句放在所有非导入语句的上边。<br>eslint: <a href="https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/first.md"><code>import/first</code></a></p><blockquote><p>为什么? 由于所有的 <code>import</code>s 都被提前，保持他们在顶部是为了防止意外发生。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> foo <span class="keyword">from</span> <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line">foo.init();</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> bar <span class="keyword">from</span> <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> foo <span class="keyword">from</span> <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> bar <span class="keyword">from</span> <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line"></span><br><span class="line">foo.init();</span><br></pre></td></tr></table></figure><p><a name="modules--multiline-imports-over-newlines"></a></p></li><li><p><a href="#modules--multiline-imports-over-newlines">10.8</a> 多行导入应该像多行数组和对象一样缩进。</p><blockquote><p>为什么? 花括号和其他规范一样，遵循相同的缩进规则，后边的都好一样。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> &#123;longNameA, longNameB, longNameC, longNameD, longNameE&#125; <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  longNameA,</span><br><span class="line">  longNameB,</span><br><span class="line">  longNameC,</span><br><span class="line">  longNameD,</span><br><span class="line">  longNameE,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br></pre></td></tr></table></figure><p><a name="modules--no-webpack-loader-syntax"></a></p></li><li><p><a href="#modules--no-webpack-loader-syntax">10.9</a> 在模块导入语句中禁止使用 Webpack 加载器语法。<br>eslint: <a href="https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-webpack-loader-syntax.md"><code>import/no-webpack-loader-syntax</code></a></p><blockquote><p>为什么? 因为在导入语句中使用 webpack 语法，将代码和模块绑定在一起。应该在 <code>webpack.config.js</code> 中使用加载器语法。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> fooSass <span class="keyword">from</span> <span class="string">&#x27;css!sass!foo.scss&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> barCss <span class="keyword">from</span> <span class="string">&#x27;style!css!bar.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> fooSass <span class="keyword">from</span> <span class="string">&#x27;foo.scss&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> barCss <span class="keyword">from</span> <span class="string">&#x27;bar.css&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><h2 id="迭代器和发生器"><a href="#迭代器和发生器" class="headerlink" title="迭代器和发生器"></a><a id="iterators-and-generators">迭代器和发生器</a></h2><p>  <a name="iterators--nope">&lt;/a&gt;<a name="11.1"></a></p><ul><li><p><a href="#iterators--nope">11.1</a> 不要使用迭代器。 你应该使用 JavaScript 的高阶函数代替 <code>for-in</code> 或者 <code>for-of</code>。 eslint: <a href="https://eslint.org/docs/rules/no-iterator.html"><code>no-iterator</code></a> <a href="https://eslint.org/docs/rules/no-restricted-syntax"><code>no-restricted-syntax</code></a></p><blockquote><p>为什么? 这是我们强制的规则。 拥有返回值得纯函数比这个更容易解释。</p><p>使用 <code>map()</code> / <code>every()</code> / <code>filter()</code> / <code>find()</code> / <code>findIndex()</code> / <code>reduce()</code> / <code>some()</code> / … 遍历数组， 和使用 <code>Object.keys()</code> / <code>Object.values()</code> / <code>Object.entries()</code> 迭代你的对象生成数组。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> num <span class="keyword">of</span> numbers) &#123;</span><br><span class="line">  sum += num;</span><br><span class="line">&#125;</span><br><span class="line">sum === <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">numbers.forEach(<span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">  sum += num;</span><br><span class="line">&#125;);</span><br><span class="line">sum === <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// best (use the functional force)</span></span><br><span class="line"><span class="keyword">const</span> sum = numbers.reduce(<span class="function">(<span class="params">total, num</span>) =&gt;</span> total + num, <span class="number">0</span>);</span><br><span class="line">sum === <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> increasedByOne = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">  increasedByOne.push(numbers[i] + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> increasedByOne = [];</span><br><span class="line">numbers.forEach(<span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">  increasedByOne.push(num + <span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// best (keeping it functional)</span></span><br><span class="line"><span class="keyword">const</span> increasedByOne = numbers.map(<span class="function"><span class="params">num</span> =&gt;</span> num + <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><a name="generators--nope">&lt;/a&gt;<a name="11.2"></a></p></li><li><p><a href="#generators--nope">11.2</a> 不要使用发生器。</p><blockquote><p>为什么? 它们不能很好的适应 ES5。</p></blockquote><p><a name="generators--spacing"></a></p></li><li><p><a href="#generators--spacing">11.3</a> 如果你必须使用发生器或者无视 <a href="#generators--nope">我们的建议</a>，请确保他们的函数签名是正常的间隔。 eslint: <a href="https://eslint.org/docs/rules/generator-star-spacing"><code>generator-star-spacing</code></a></p><blockquote><p>为什么? <code>function</code> 和 <code>*</code> 是同一个概念关键字的一部分 - <code>*</code> 不是 <code>function</code> 的修饰符， <code>function*</code> 是一个不同于 <code>function</code> 的构造器。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> bar = <span class="function"><span class="keyword">function</span> * (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> baz = <span class="function"><span class="keyword">function</span> *(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> quux = <span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>*<span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// very bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span></span></span><br><span class="line"><span class="function">*</span></span><br><span class="line"><span class="function"><span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// very bad</span></span><br><span class="line"><span class="keyword">const</span> wat = <span class="function"><span class="keyword">function</span></span></span><br><span class="line"><span class="function">*</span></span><br><span class="line"><span class="function">(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a><a id="properties">属性</a></h2><p>  <a name="properties--dot">&lt;/a&gt;<a name="12.1"></a></p><ul><li><p><a href="#properties--dot">12.1</a> 访问属性时使用点符号。 eslint: <a href="https://eslint.org/docs/rules/dot-notation.html"><code>dot-notation</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> luke = &#123;</span><br><span class="line">  <span class="attr">jedi</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">28</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> isJedi = luke[<span class="string">&#x27;jedi&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> isJedi = luke.jedi;</span><br></pre></td></tr></table></figure><p><a name="properties--bracket">&lt;/a&gt;<a name="12.2"></a></p></li><li><p><a href="#properties--bracket">12.2</a> 使用变量访问属性时，使用 <code>[]</code>表示法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> luke = &#123;</span><br><span class="line">  <span class="attr">jedi</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">28</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProp</span>(<span class="params">prop</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> luke[prop];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isJedi = getProp(<span class="string">&#x27;jedi&#x27;</span>);</span><br></pre></td></tr></table></figure><p>  <a name="es2016-properties--exponentiation-operator"></a></p></li><li><p><a href="#es2016-properties--exponentiation-operator">12.3</a> 计算指数时，可以使用 <code>**</code> 运算符。 eslint: <a href="https://eslint.org/docs/rules/no-restricted-properties"><code>no-restricted-properties</code></a>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> binary = <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> binary = <span class="number">2</span> ** <span class="number">10</span>;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a><a id="variables">变量</a></h2><p>  <a name="variables--const">&lt;/a&gt;<a name="13.1"></a></p><ul><li><p><a href="#variables--const">13.1</a> 使用 <code>const</code> 或者 <code>let</code> 来定义变量。 不这样做将创建一个全局变量。 我们希望避免污染全局命名空间。 Captain Planet 警告过我们。 eslint: <a href="https://eslint.org/docs/rules/no-undef"><code>no-undef</code></a> <a href="https://eslint.org/docs/rules/prefer-const"><code>prefer-const</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">superPower = <span class="keyword">new</span> SuperPower();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> superPower = <span class="keyword">new</span> SuperPower();</span><br></pre></td></tr></table></figure><p><a name="variables--one-const">&lt;/a&gt;<a name="13.2"></a></p></li><li><p><a href="#variables--one-const">13.2</a> 使用 <code>const</code> 或者 <code>let</code> 声明每一个变量。 eslint: <a href="https://eslint.org/docs/rules/one-var.html"><code>one-var</code></a></p><blockquote><p>为什么? 这样更容易添加新的变量声明，而且你不必担心是使用 <code>;</code> 还是使用 <code>,</code> 或引入标点符号的差别。 你可以通过 debugger 逐步查看每个声明，而不是立即跳过所有声明。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> items = getItems(),</span><br><span class="line">    goSportsTeam = <span class="literal">true</span>,</span><br><span class="line">    dragonball = <span class="string">&#x27;z&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="comment">// (compare to above, and try to spot the mistake)</span></span><br><span class="line"><span class="keyword">const</span> items = getItems(),</span><br><span class="line">    goSportsTeam = <span class="literal">true</span>;</span><br><span class="line">    dragonball = <span class="string">&#x27;z&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> items = getItems();</span><br><span class="line"><span class="keyword">const</span> goSportsTeam = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">const</span> dragonball = <span class="string">&#x27;z&#x27;</span>;</span><br></pre></td></tr></table></figure><p><a name="variables--const-let-group">&lt;/a&gt;<a name="13.3"></a></p></li><li><p><a href="#variables--const-let-group">13.3</a> 把 <code>const</code> 声明的放在一起，把 <code>let</code> 声明的放在一起。.</p><blockquote><p>为什么? 这在后边如果需要根据前边的赋值变量指定一个变量时很有用。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">let</span> i, len, dragonball,</span><br><span class="line">    items = getItems(),</span><br><span class="line">    goSportsTeam = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">let</span> i;</span><br><span class="line"><span class="keyword">const</span> items = getItems();</span><br><span class="line"><span class="keyword">let</span> dragonball;</span><br><span class="line"><span class="keyword">const</span> goSportsTeam = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> len;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> goSportsTeam = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">const</span> items = getItems();</span><br><span class="line"><span class="keyword">let</span> dragonball;</span><br><span class="line"><span class="keyword">let</span> i;</span><br><span class="line"><span class="keyword">let</span> length;</span><br></pre></td></tr></table></figure><p><a name="variables--define-where-used">&lt;/a&gt;<a name="13.4"></a></p></li><li><p><a href="#variables--define-where-used">13.4</a> 在你需要的使用定义变量，但是要把它们放在一个合理的地方。</p><blockquote><p>为什么? <code>let</code> 和 <code>const</code> 是块级作用域而不是函数作用域。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad - 不必要的函数调用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkName</span>(<span class="params">hasName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> name = getName();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (hasName === <span class="string">&#x27;test&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (name === <span class="string">&#x27;test&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.setName(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkName</span>(<span class="params">hasName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (hasName === <span class="string">&#x27;test&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> name = getName();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (name === <span class="string">&#x27;test&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.setName(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <a name="variables--no-chain-assignment">&lt;/a&gt;<a name="13.5"></a></p></li><li><p><a href="#variables--no-chain-assignment">13.5</a> 不要链式变量赋值。 eslint: <a href="https://eslint.org/docs/rules/no-multi-assign"><code>no-multi-assign</code></a></p><blockquote><p>为什么? 链式变量赋值会创建隐式全局变量。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// JavaScript 把它解释为</span></span><br><span class="line">  <span class="comment">// let a = ( b = ( c = 1 ) );</span></span><br><span class="line">  <span class="comment">// let 关键词只适用于变量 a ；变量 b 和变量 c 则变成了全局变量。</span></span><br><span class="line">  <span class="keyword">let</span> a = b = c = <span class="number">1</span>;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// throws ReferenceError</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> b = a;</span><br><span class="line">  <span class="keyword">let</span> c = a;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// throws ReferenceError</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// throws ReferenceError</span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// throws ReferenceError</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于 `const` 也一样</span></span><br></pre></td></tr></table></figure><p><a name="variables--unary-increment-decrement">&lt;/a&gt;<a name="13.6"></a></p></li><li><p><a href="#variables--unary-increment-decrement">13.6</a> 避免使用不必要的递增和递减 (<code>++</code>, <code>--</code>)。 eslint <a href="https://eslint.org/docs/rules/no-plusplus"><code>no-plusplus</code></a></p><blockquote><p>为什么? 在eslint文档中，一元递增和递减语句以自动分号插入为主题，并且在应用程序中可能会导致默认值的递增或递减。它还可以用像 <code>num += 1</code> 这样的语句来改变您的值，而不是使用 <code>num++</code> 或 <code>num ++</code> 。不允许不必要的增量和减量语句也会使您无法预先递增/预递减值，这也会导致程序中的意外行为。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> num = <span class="number">1</span>;</span><br><span class="line">num++;</span><br><span class="line">--num;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> truthyCount = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">  <span class="keyword">let</span> value = array[i];</span><br><span class="line">  sum += value;</span><br><span class="line">  <span class="keyword">if</span> (value) &#123;</span><br><span class="line">    truthyCount++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> num = <span class="number">1</span>;</span><br><span class="line">num += <span class="number">1</span>;</span><br><span class="line">num -= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sum = array.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> truthyCount = array.filter(<span class="built_in">Boolean</span>).length;</span><br></pre></td></tr></table></figure></li></ul><p><a name="variables--linebreak"></a></p><ul><li><p><a href="#variables--linebreak">13.7</a> 避免在赋值语句 <code>=</code> 前后换行。如果你的代码违反了 <a href="https://eslint.org/docs/rules/max-len.html"><code>max-len</code></a>， 使用括号包裹。 eslint <a href="https://eslint.org/docs/rules/operator-linebreak.html"><code>operator-linebreak</code></a>.</p><blockquote><p>为什么? 在 <code>=</code> 前后换行，可能混淆赋的值。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo =</span><br><span class="line">  superLongLongLongLongLongLongLongLongFunctionName();</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo</span><br><span class="line">  = <span class="string">&#x27;superLongLongLongLongLongLongLongLongString&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> foo = (</span><br><span class="line">  superLongLongLongLongLongLongLongLongFunctionName()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="string">&#x27;superLongLongLongLongLongLongLongLongString&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><h2 id="提升"><a href="#提升" class="headerlink" title="提升"></a><a id="hoisting">提升</a></h2><p>  <a name="hoisting--about">&lt;/a&gt;<a name="14.1"></a></p><ul><li><p><a href="#hoisting--about">14.1</a> <code>var</code> 定义的变量会被提升到函数范围的最顶部，但是它的赋值不会。<code>const</code> 和 <code>let</code> 声明的变量受到一个称之为 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#Temporal_Dead_Zone_and_errors_with_let">Temporal Dead Zones (TDZ)</a> 的新概念保护。 知道为什么 <a href="http://es-discourse.com/t/why-typeof-is-no-longer-safe/15">typeof 不再安全</a> 是很重要的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们知道这个行不通 (假设没有未定义的全局变量)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(notDefined); <span class="comment">// =&gt; throws a ReferenceError</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在引用变量后创建变量声明将会因变量提升而起作用。</span></span><br><span class="line"><span class="comment">// 注意: 真正的值 `true` 不会被提升。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(declaredButNotAssigned); <span class="comment">// =&gt; undefined</span></span><br><span class="line">  <span class="keyword">var</span> declaredButNotAssigned = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解释器将变量提升到函数的顶部</span></span><br><span class="line"><span class="comment">// 这意味着我们可以将上边的例子重写为：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> declaredButNotAssigned;</span><br><span class="line">  <span class="built_in">console</span>.log(declaredButNotAssigned); <span class="comment">// =&gt; undefined</span></span><br><span class="line">  declaredButNotAssigned = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 const 和 let</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(declaredButNotAssigned); <span class="comment">// =&gt; throws a ReferenceError</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">typeof</span> declaredButNotAssigned); <span class="comment">// =&gt; throws a ReferenceError</span></span><br><span class="line">  <span class="keyword">const</span> declaredButNotAssigned = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="hoisting--anon-expressions">&lt;/a&gt;<a name="14.2"></a></p></li><li><p><a href="#hoisting--anon-expressions">14.2</a> 匿名函数表达式提升变量名，而不是函数赋值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(anonymous); <span class="comment">// =&gt; undefined</span></span><br><span class="line"></span><br><span class="line">  anonymous(); <span class="comment">// =&gt; TypeError anonymous is not a function</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> anonymous = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;anonymous function expression&#x27;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="hoisting--named-expresions">&lt;/a&gt;<a name="hoisting--named-expressions"></a><a name="14.3"></a></p></li><li><p><a href="#hoisting--named-expressions">14.3</a> 命名函数表达式提升的是变量名，而不是函数名或者函数体。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(named); <span class="comment">// =&gt; undefined</span></span><br><span class="line"></span><br><span class="line">  named(); <span class="comment">// =&gt; TypeError named is not a function</span></span><br><span class="line"></span><br><span class="line">  superPower(); <span class="comment">// =&gt; ReferenceError superPower is not defined</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> named = <span class="function"><span class="keyword">function</span> <span class="title">superPower</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Flying&#x27;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当函数名和变量名相同时也是如此。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(named); <span class="comment">// =&gt; undefined</span></span><br><span class="line"></span><br><span class="line">  named(); <span class="comment">// =&gt; TypeError named is not a function</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> named = <span class="function"><span class="keyword">function</span> <span class="title">named</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;named&#x27;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="hoisting--declarations">&lt;/a&gt;<a name="14.4"></a></p></li><li><p><a href="#hoisting--declarations">14.4</a> 函数声明提升其名称和函数体。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  superPower(); <span class="comment">// =&gt; Flying</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">superPower</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Flying&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>更多信息请参考 <a href="http://www.adequatelygood.com/">Ben Cherry</a> 的 <a href="http://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting/">JavaScript Scoping &amp; Hoisting</a>。</p></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><h2 id="比较运算符和等号"><a href="#比较运算符和等号" class="headerlink" title="比较运算符和等号"></a><a id="comparison-operators--equality">比较运算符和等号</a></h2><p>  <a name="comparison--eqeqeq">&lt;/a&gt;<a name="15.1"></a></p><ul><li><p><a href="#comparison--eqeqeq">15.1</a> 使用 <code>===</code> 和 <code>!==</code> 而不是 <code>==</code> 和 <code>!=</code>。 eslint: <a href="https://eslint.org/docs/rules/eqeqeq.html"><code>eqeqeq</code></a></p><p><a name="comparison--if">&lt;/a&gt;<a name="15.2"></a></p></li><li><p><a href="#comparison--if">15.2</a> 条件语句，例如 <code>if</code> 语句使用 <code>ToBoolean</code> 的抽象方法来计算表达式的结果，并始终遵循以下简单的规则：</p><ul><li><strong>Objects</strong> 的取值为： <strong>true</strong></li><li><strong>Undefined</strong> 的取值为： <strong>false</strong></li><li><strong>Null</strong> 的取值为： <strong>false</strong></li><li><strong>Booleans</strong> 的取值为： <strong>布尔值的取值</strong></li><li><strong>Numbers</strong> 的取值为：如果为 <strong>+0, -0, or NaN</strong> 值为 <strong>false</strong> 否则为 <strong>true</strong></li><li><strong>Strings</strong> 的取值为: 如果是一个空字符串 <code>&#39;&#39;</code> 值为 <strong>false</strong> 否则为 <strong>true</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ([<span class="number">0</span>] &amp;&amp; []) &#123;</span><br><span class="line">  <span class="comment">// true</span></span><br><span class="line">  <span class="comment">// 一个数组（即使是空的）是一个对象，对象的取值为 true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="comparison--shortcuts">&lt;/a&gt;<a name="15.3"></a></p></li><li><p><a href="#comparison--shortcuts">15.3</a> 对于布尔值使用简写，但是对于字符串和数字进行显式比较。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (isValid === <span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (isValid) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (name) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (name !== <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (collection.length) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (collection.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="comparison--moreinfo">&lt;/a&gt;<a name="15.4"></a></p></li><li><p><a href="#comparison--moreinfo">15.4</a> 获取更多信息请查看 Angus Croll 的 <a href="https://javascriptweblog.wordpress.com/2011/02/07/truth-equality-and-javascript/#more-2108">Truth Equality and JavaScript</a> 。</p><p><a name="comparison--switch-blocks">&lt;/a&gt;<a name="15.5"></a></p></li><li><p><a href="#comparison--switch-blocks">15.5</a> 在 <code>case</code> 和 <code>default</code> 的子句中，如果存在声明 (例如. <code>let</code>, <code>const</code>, <code>function</code>, 和 <code>class</code>)，使用大括号来创建块 。 eslint: <a href="https://eslint.org/docs/rules/no-case-declarations.html"><code>no-case-declarations</code></a></p><blockquote><p>为什么? 语法声明在整个 <code>switch</code> 块中都是可见的，但是只有在赋值的时候才会被初始化，这种情况只有在 <code>case</code> 条件达到才会发生。 当多个 <code>case</code> 语句定义相同的东西是，这会导致问题问题。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">switch</span> (foo) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">const</span> y = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">switch</span> (foo) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">    <span class="keyword">const</span> y = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>: &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    bar();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>: &#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="comparison--nested-ternaries">&lt;/a&gt;<a name="15.6"></a></p></li><li><p><a href="#comparison--nested-ternaries">15.6</a> 三目表达式不应该嵌套，通常是单行表达式。 eslint: <a href="https://eslint.org/docs/rules/no-nested-ternary.html"><code>no-nested-ternary</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo = maybe1 &gt; maybe2</span><br><span class="line">  ? <span class="string">&quot;bar&quot;</span></span><br><span class="line">  : value1 &gt; value2 ? <span class="string">&quot;baz&quot;</span> : <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分离为两个三目表达式</span></span><br><span class="line"><span class="keyword">const</span> maybeNull = value1 &gt; value2 ? <span class="string">&#x27;baz&#x27;</span> : <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// better</span></span><br><span class="line"><span class="keyword">const</span> foo = maybe1 &gt; maybe2</span><br><span class="line">  ? <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">  : maybeNull;</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">const</span> foo = maybe1 &gt; maybe2 ? <span class="string">&#x27;bar&#x27;</span> : maybeNull;</span><br></pre></td></tr></table></figure><p><a name="comparison--unneeded-ternary">&lt;/a&gt;<a name="15.7"></a></p></li><li><p><a href="#comparison--unneeded-ternary">15.7</a> 避免不必要的三目表达式。 eslint: <a href="https://eslint.org/docs/rules/no-unneeded-ternary.html"><code>no-unneeded-ternary</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo = a ? a : b;</span><br><span class="line"><span class="keyword">const</span> bar = c ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">const</span> baz = c ? <span class="literal">false</span> : <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> foo = a || b;</span><br><span class="line"><span class="keyword">const</span> bar = !!c;</span><br><span class="line"><span class="keyword">const</span> baz = !c;</span><br></pre></td></tr></table></figure><p><a name="comparison--no-mixed-operators"></a></p></li><li><p><a href="#comparison--no-mixed-operators">15.8</a> 使用该混合运算符时，使用括号括起来。 唯一例外的是标准算数运算符 (<code>+</code>, <code>-</code>, <code>*</code>, &amp; <code>/</code>) 因为他们的优先级被广泛理解。 eslint: <a href="https://eslint.org/docs/rules/no-mixed-operators.html"><code>no-mixed-operators</code></a></p><blockquote><p>为什么? 这能提高可读性并且表明开发人员的意图。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo = a &amp;&amp; b &lt; <span class="number">0</span> || c &gt; <span class="number">0</span> || d + <span class="number">1</span> === <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> bar = a ** b - <span class="number">5</span> % d;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="comment">// 可能陷入一种 (a || b) &amp;&amp; c 的思考</span></span><br><span class="line"><span class="keyword">if</span> (a || b &amp;&amp; c) &#123;</span><br><span class="line">  <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> foo = (a &amp;&amp; b &lt; <span class="number">0</span>) || c &gt; <span class="number">0</span> || (d + <span class="number">1</span> === <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> bar = (a ** b) - (<span class="number">5</span> % d);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (a || (b &amp;&amp; c)) &#123;</span><br><span class="line">  <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> bar = a + b / c * d;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><h2 id="块"><a href="#块" class="headerlink" title="块"></a><a id="blocks">块</a></h2><p>  <a name="blocks--braces">&lt;/a&gt;<a name="16.1"></a></p><ul><li><p><a href="#blocks--braces">16.1</a> 当有多行代码块的时候，使用大括号包裹。 eslint: <a href="https://eslint.org/docs/rules/nonblock-statement-body-position"><code>nonblock-statement-body-position</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (test)</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (test) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (test) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="blocks--cuddled-elses">&lt;/a&gt;<a name="16.2"></a></p></li><li><p><a href="#blocks--cuddled-elses">16.2</a> 如果你使用的是 <code>if</code> 和 <code>else</code> 的多行代码块，则将 <code>else</code> 语句放在 <code>if</code> 块闭括号同一行的位置。 eslint: <a href="https://eslint.org/docs/rules/brace-style.html"><code>brace-style</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (test) &#123;</span><br><span class="line">  thing1();</span><br><span class="line">  thing2();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  thing3();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (test) &#123;</span><br><span class="line">  thing1();</span><br><span class="line">  thing2();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  thing3();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="blocks--no-else-return">&lt;/a&gt;<a name="16.3"></a></p></li><li><p><a href="#blocks--no-else-return">16.3</a> 如果一个 <code>if</code> 块总是执行一个 <code>return</code> 语句，那么接下来的 <code>else</code> 块就没有必要了。 如果一个包含 <code>return</code> 语句的 <code>else if</code> 块，在一个包含了 <code>return</code> 语句的 <code>if</code> 块之后，那么可以拆成多个 <code>if</code> 块。 eslint: <a href="https://eslint.org/docs/rules/no-else-return"><code>no-else-return</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x) &#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cats</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x) &#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (y) &#123;</span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dogs</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x) &#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (y) &#123;</span><br><span class="line">      <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x) &#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cats</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x) &#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (y) &#123;</span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dogs</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x) &#123;</span><br><span class="line">    <span class="keyword">if</span> (z) &#123;</span><br><span class="line">      <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><h2 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a><a id="control-statements">控制语句</a></h2><p>  <a name="control-statements"></a></p><ul><li><p><a href="#control-statements">17.1</a> 如果你的控制语句 (<code>if</code>, <code>while</code> 等) 太长或者超过了一行最大长度的限制，则可以将每个条件（或组）放入一个新的行。 逻辑运算符应该在行的开始。</p><blockquote><p>为什么? 要求操作符在行的开始保持对齐并遵循类似方法衔接的模式。 这提高了可读性，并且使更复杂的逻辑更容易直观的被理解。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> ((foo === <span class="number">123</span> || bar === <span class="string">&#x27;abc&#x27;</span>) &amp;&amp; doesItLookGoodWhenItBecomesThatLong() &amp;&amp; isThisReallyHappening()) &#123;</span><br><span class="line">  thing1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (foo === <span class="number">123</span> &amp;&amp;</span><br><span class="line">  bar === <span class="string">&#x27;abc&#x27;</span>) &#123;</span><br><span class="line">  thing1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (foo === <span class="number">123</span></span><br><span class="line">  &amp;&amp; bar === <span class="string">&#x27;abc&#x27;</span>) &#123;</span><br><span class="line">  thing1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (</span><br><span class="line">  foo === <span class="number">123</span> &amp;&amp;</span><br><span class="line">  bar === <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">) &#123;</span><br><span class="line">  thing1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (</span><br><span class="line">  foo === <span class="number">123</span></span><br><span class="line">  &amp;&amp; bar === <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">) &#123;</span><br><span class="line">  thing1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (</span><br><span class="line">  (foo === <span class="number">123</span> || bar === <span class="string">&#x27;abc&#x27;</span>)</span><br><span class="line">  &amp;&amp; doesItLookGoodWhenItBecomesThatLong()</span><br><span class="line">  &amp;&amp; isThisReallyHappening()</span><br><span class="line">) &#123;</span><br><span class="line">  thing1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (foo === <span class="number">123</span> &amp;&amp; bar === <span class="string">&#x27;abc&#x27;</span>) &#123;</span><br><span class="line">  thing1();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="control-statement--value-selection"></a></p></li><li><p><a href="#control-statements--value-selection">17.2</a> 不要使用选择操作符代替控制语句。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">!isRunning &amp;&amp; startRunning();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (!isRunning) &#123;</span><br><span class="line">  startRunning();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a><a id="comments">注释</a></h2><p>  <a name="comments--multiline">&lt;/a&gt;<a name="17.1"></a></p><ul><li><p><a href="#comments--multiline">18.1</a> 使用 <code>/** ... */</code> 来进行多行注释。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="comment">// make() returns a new element</span></span><br><span class="line"><span class="comment">// based on the passed in tag name</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// @param &#123;String&#125; tag</span></span><br><span class="line"><span class="comment">// @return &#123;Element&#125; element</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params">tag</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * make() returns a new element</span></span><br><span class="line"><span class="comment"> * based on the passed-in tag name</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params">tag</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="comments--singleline">&lt;/a&gt;<a name="17.2"></a></p></li><li><p><a href="#comments--singleline">18.2</a> 使用 <code>//</code> 进行单行注释。 将单行注释放在需要注释的行的上方新行。 在注释之前放一个空行，除非它在块的第一行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> active = <span class="literal">true</span>;  <span class="comment">// is current tab</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">// is current tab</span></span><br><span class="line"><span class="keyword">const</span> active = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;fetching type...&#x27;</span>);</span><br><span class="line">  <span class="comment">// set the default type to &#x27;no type&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> type = <span class="built_in">this</span>.type || <span class="string">&#x27;no type&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> type;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;fetching type...&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set the default type to &#x27;no type&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> type = <span class="built_in">this</span>.type || <span class="string">&#x27;no type&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> type;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// also good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// set the default type to &#x27;no type&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> type = <span class="built_in">this</span>.type || <span class="string">&#x27;no type&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> type;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="comments--spaces"></a></p></li><li><p><a href="#comments--spaces">18.3</a> 用一个空格开始所有的注释，使它更容易阅读。 eslint: <a href="https://eslint.org/docs/rules/spaced-comment"><code>spaced-comment</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="comment">//is current tab</span></span><br><span class="line"><span class="keyword">const</span> active = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">// is current tab</span></span><br><span class="line"><span class="keyword">const</span> active = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *make() returns a new element</span></span><br><span class="line"><span class="comment"> *based on the passed-in tag name</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params">tag</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * make() returns a new element</span></span><br><span class="line"><span class="comment"> * based on the passed-in tag name</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params">tag</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="comments--actionitems">&lt;/a&gt;<a name="17.3"></a></p></li><li><p><a href="#comments--actionitems">18.4</a> 使用 <code>FIXME</code> 或者 <code>TODO</code> 开始你的注释可以帮助其他开发人员快速了解，如果你提出了一个需要重新审视的问题，或者你对需要实现的问题提出的解决方案。 这些不同于其他评论，因为他们是可操作的。 这些行为是 <code>FIXME: -- 需要解决这个问题</code> 或者 <code>TODO: -- 需要被实现</code>。</p><p><a name="comments--fixme">&lt;/a&gt;<a name="17.4"></a></p></li><li><p><a href="#comments--fixme">18.5</a> 使用 <code>// FIXME:</code> 注释一个问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> <span class="keyword">extends</span> <span class="title">Abacus</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">FIXME:</span> 这里不应该使用全局变量</span></span><br><span class="line">    total = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="comments--todo">&lt;/a&gt;<a name="17.5"></a></p></li><li><p><a href="#comments--todo">18.6</a> 使用 <code>// TODO:</code> 注释解决问题的方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> <span class="keyword">extends</span> <span class="title">Abacus</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> total 应该由一个 param 的选项配置</span></span><br><span class="line">    <span class="built_in">this</span>.total = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><h2 id="空白"><a href="#空白" class="headerlink" title="空白"></a><a id="whitespace">空白</a></h2><p>  <a name="whitespace--spaces">&lt;/a&gt;<a name="18.1"></a></p><ul><li><p><a href="#whitespace--spaces">19.1</a> 使用 tabs (空格字符) 设置为 2 个空格。 eslint: <a href="https://eslint.org/docs/rules/indent.html"><code>indent</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">∙∙∙∙<span class="keyword">let</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">∙<span class="keyword">let</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">∙∙<span class="keyword">let</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="whitespace--before-blocks">&lt;/a&gt;<a name="18.2"></a></p></li><li><p><a href="#whitespace--before-blocks">19.2</a> 在主体前放置一个空格。 eslint: <a href="https://eslint.org/docs/rules/space-before-blocks.html"><code>space-before-blocks</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">dog.set(<span class="string">&#x27;attr&#x27;</span>,&#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="string">&#x27;1 year&#x27;</span>,</span><br><span class="line">  <span class="attr">breed</span>: <span class="string">&#x27;Bernese Mountain Dog&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">dog.set(<span class="string">&#x27;attr&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="string">&#x27;1 year&#x27;</span>,</span><br><span class="line">  <span class="attr">breed</span>: <span class="string">&#x27;Bernese Mountain Dog&#x27;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a name="whitespace--around-keywords">&lt;/a&gt;<a name="18.3"></a></p></li><li><p><a href="#whitespace--around-keywords">19.3</a> 在控制语句（<code>if</code>, <code>while</code> 等）开始括号之前放置一个空格。 在函数调用和是声明中，在参数列表和函数名之间没有空格。 eslint: <a href="https://eslint.org/docs/rules/keyword-spacing.html"><code>keyword-spacing</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span>(isJedi) &#123;</span><br><span class="line">  fight ();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (isJedi) &#123;</span><br><span class="line">  fight();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fight</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log (<span class="string">&#x27;Swooosh!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fight</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Swooosh!&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="whitespace--infix-ops">&lt;/a&gt;<a name="18.4"></a></p></li><li><p><a href="#whitespace--infix-ops">19.4</a> 用空格分离操作符。 eslint: <a href="https://eslint.org/docs/rules/space-infix-ops.html"><code>space-infix-ops</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> x=y+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> x = y + <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p><a name="whitespace--newline-at-end">&lt;/a&gt;<a name="18.5"></a></p></li><li><p><a href="#whitespace--newline-at-end">19.5</a> 使用单个换行符结束文件。 eslint: <a href="https://github.com/eslint/eslint/blob/master/docs/rules/eol-last.md"><code>eol-last</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> &#123; es6 &#125; <span class="keyword">from</span> <span class="string">&#x27;./AirbnbStyleGuide&#x27;</span>;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> es6;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> &#123; es6 &#125; <span class="keyword">from</span> <span class="string">&#x27;./AirbnbStyleGuide&#x27;</span>;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> es6;↵</span><br><span class="line">↵</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> &#123; es6 &#125; <span class="keyword">from</span> <span class="string">&#x27;./AirbnbStyleGuide&#x27;</span>;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> es6;↵</span><br></pre></td></tr></table></figure><p><a name="whitespace--chains">&lt;/a&gt;<a name="18.6"></a></p></li><li><p><a href="#whitespace--chains">19.6</a> 在使用链式方法调用的时候使用缩进(超过两个方法链)。 使用一个引导点，强调该行是方法调用，而不是新的语句。 eslint: <a href="https://eslint.org/docs/rules/newline-per-chained-call"><code>newline-per-chained-call</code></a> <a href="https://eslint.org/docs/rules/no-whitespace-before-property"><code>no-whitespace-before-property</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="string">&#x27;#items&#x27;</span>).find(<span class="string">&#x27;.selected&#x27;</span>).highlight().end().find(<span class="string">&#x27;.open&#x27;</span>).updateCount();</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="string">&#x27;#items&#x27;</span>).</span><br><span class="line">  find(<span class="string">&#x27;.selected&#x27;</span>).</span><br><span class="line">    highlight().</span><br><span class="line">    end().</span><br><span class="line">  find(<span class="string">&#x27;.open&#x27;</span>).</span><br><span class="line">    updateCount();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$(<span class="string">&#x27;#items&#x27;</span>)</span><br><span class="line">  .find(<span class="string">&#x27;.selected&#x27;</span>)</span><br><span class="line">    .highlight()</span><br><span class="line">    .end()</span><br><span class="line">  .find(<span class="string">&#x27;.open&#x27;</span>)</span><br><span class="line">    .updateCount();</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> leds = stage.selectAll(<span class="string">&#x27;.led&#x27;</span>).data(data).enter().append(<span class="string">&#x27;svg:svg&#x27;</span>).classed(<span class="string">&#x27;led&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line">    .attr(<span class="string">&#x27;width&#x27;</span>, (radius + margin) * <span class="number">2</span>).append(<span class="string">&#x27;svg:g&#x27;</span>)</span><br><span class="line">    .attr(<span class="string">&#x27;transform&#x27;</span>, <span class="string">`translate(<span class="subst">$&#123;radius + margin&#125;</span>,<span class="subst">$&#123;radius + margin&#125;</span>)`</span>)</span><br><span class="line">    .call(tron.led);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> leds = stage.selectAll(<span class="string">&#x27;.led&#x27;</span>)</span><br><span class="line">    .data(data)</span><br><span class="line">  .enter().append(<span class="string">&#x27;svg:svg&#x27;</span>)</span><br><span class="line">    .classed(<span class="string">&#x27;led&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line">    .attr(<span class="string">&#x27;width&#x27;</span>, (radius + margin) * <span class="number">2</span>)</span><br><span class="line">  .append(<span class="string">&#x27;svg:g&#x27;</span>)</span><br><span class="line">    .attr(<span class="string">&#x27;transform&#x27;</span>, <span class="string">`translate(<span class="subst">$&#123;radius + margin&#125;</span>,<span class="subst">$&#123;radius + margin&#125;</span>)`</span>)</span><br><span class="line">    .call(tron.led);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> leds = stage.selectAll(<span class="string">&#x27;.led&#x27;</span>).data(data);</span><br></pre></td></tr></table></figure><p><a name="whitespace--after-blocks">&lt;/a&gt;<a name="18.7"></a></p></li><li><p><a href="#whitespace--after-blocks">19.7</a> 在块和下一个语句之前留下一空白行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (foo) &#123;</span><br><span class="line">  <span class="keyword">return</span> bar;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> baz;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (foo) &#123;</span><br><span class="line">  <span class="keyword">return</span> bar;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> baz;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="function"><span class="title">foo</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">bar</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="function"><span class="title">foo</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">bar</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> arr;</span><br></pre></td></tr></table></figure><p><a name="whitespace--padded-blocks">&lt;/a&gt;<a name="18.8"></a></p></li><li><p><a href="#whitespace--padded-blocks">19.8</a> 不要在块的开头使用空白行。 eslint: <a href="https://eslint.org/docs/rules/padded-blocks.html"><code>padded-blocks</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(foo);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (baz) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(qux);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(foo);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">bar</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.bar = bar;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(foo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (baz) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(qux);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(foo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="whitespace--in-parens">&lt;/a&gt;<a name="18.9"></a></p></li><li><p><a href="#whitespace--in-parens">19.9</a> 不要在括号内添加空格。 eslint: <a href="https://eslint.org/docs/rules/space-in-parens.html"><code>space-in-parens</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"> foo </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> foo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">foo</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> foo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> ( foo ) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(foo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (foo) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(foo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="whitespace--in-brackets">&lt;/a&gt;<a name="18.10"></a></p></li><li><p><a href="#whitespace--in-brackets">19.10</a> 不要在中括号中添加空格。 eslint: <a href="https://eslint.org/docs/rules/array-bracket-spacing.html"><code>array-bracket-spacing</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ];</span><br><span class="line"><span class="built_in">console</span>.log(foo[ <span class="number">0</span> ]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> foo = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(foo[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><p><a name="whitespace--in-braces">&lt;/a&gt;<a name="18.11"></a></p></li><li><p><a href="#whitespace--in-braces">19.11</a> 在花括号内添加空格。 eslint: <a href="https://eslint.org/docs/rules/object-curly-spacing.html"><code>object-curly-spacing</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo = &#123;<span class="attr">clark</span>: <span class="string">&#x27;kent&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> foo = &#123; <span class="attr">clark</span>: <span class="string">&#x27;kent&#x27;</span> &#125;;</span><br></pre></td></tr></table></figure><p><a name="whitespace--max-len">&lt;/a&gt;<a name="18.12"></a></p></li><li><p><a href="#whitespace--max-len">19.12</a> 避免让你的代码行超过100个字符（包括空格）。 注意：根据上边的 <a href="#strings--line-length">约束</a>，长字符串可免除此规定，不应分解。 eslint: <a href="https://eslint.org/docs/rules/max-len.html"><code>max-len</code></a></p><blockquote><p>为什么? 这样能够确保可读性和可维护性。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo = jsonData &amp;&amp; jsonData.foo &amp;&amp; jsonData.foo.bar &amp;&amp; jsonData.foo.bar.baz &amp;&amp; jsonData.foo.bar.baz.quux &amp;&amp; jsonData.foo.bar.baz.quux.xyzzy;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">$.ajax(&#123; <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>, <span class="attr">url</span>: <span class="string">&#x27;https://airbnb.com/&#x27;</span>, <span class="attr">data</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span> &#125; &#125;).done(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;Congratulations!&#x27;</span>)).fail(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;You have failed this city.&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> foo = jsonData</span><br><span class="line">  &amp;&amp; jsonData.foo</span><br><span class="line">  &amp;&amp; jsonData.foo.bar</span><br><span class="line">  &amp;&amp; jsonData.foo.bar.baz</span><br><span class="line">  &amp;&amp; jsonData.foo.bar.baz.quux</span><br><span class="line">  &amp;&amp; jsonData.foo.bar.baz.quux.xyzzy;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;https://airbnb.com/&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span> &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">  .done(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;Congratulations!&#x27;</span>))</span><br><span class="line">  .fail(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;You have failed this city.&#x27;</span>));</span><br></pre></td></tr></table></figure><p><a name="whitespace--block-spacing"></a></p></li><li><p><a href="#whitespace--block-spacing">19.13</a> 要求打开的块标志和同一行上的标志拥有一致的间距。此规则还会在同一行关闭的块标记和前边的标记强制实施一致的间距。 eslint: <a href="https://eslint.org/docs/rules/block-spacing"><code>block-spacing</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125;</span><br><span class="line"><span class="keyword">if</span> (foo) &#123; bar = <span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line"><span class="keyword">if</span> (foo) &#123; bar = <span class="number">0</span>; &#125;</span><br></pre></td></tr></table></figure><p><a name="whitespace--comma-spacing"></a></p></li><li><p><a href="#whitespace--comma-spacing">19.14</a> 逗号之前避免使用空格，逗号之后需要使用空格。eslint: <a href="https://eslint.org/docs/rules/comma-spacing"><code>comma-spacing</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span>,bar = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span> , <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span>, bar = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>];</span><br></pre></td></tr></table></figure><p><a name="whitespace--computed-property-spacing"></a></p></li><li><p><a href="#whitespace--computed-property-spacing">19.15</a> 在计算属性之间强化间距。eslint: <a href="https://eslint.org/docs/rules/computed-property-spacing"><code>computed-property-spacing</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">obj[foo ]</span><br><span class="line">obj[ <span class="string">&#x27;foo&#x27;</span>]</span><br><span class="line"><span class="keyword">var</span> x = &#123;[ b ]: a&#125;</span><br><span class="line">obj[foo[ bar ]]</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">obj[foo]</span><br><span class="line">obj[<span class="string">&#x27;foo&#x27;</span>]</span><br><span class="line"><span class="keyword">var</span> x = &#123; [b]: a &#125;</span><br><span class="line">obj[foo[bar]]</span><br></pre></td></tr></table></figure><p><a name="whitespace--func-call-spacing"></a></p></li><li><p><a href="#whitespace--func-call-spacing">19.16</a> 在函数和它的调用之间强化间距。 eslint: <a href="https://eslint.org/docs/rules/func-call-spacing"><code>func-call-spacing</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">func ();</span><br><span class="line"></span><br><span class="line">func</span><br><span class="line">();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">func();</span><br></pre></td></tr></table></figure><p><a name="whitespace--key-spacing"></a></p></li><li><p><a href="#whitespace--key-spacing">19.17</a> 在对象的属性和值之间强化间距。 eslint: <a href="https://eslint.org/docs/rules/key-spacing"><code>key-spacing</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="string">&quot;foo&quot;</span> : <span class="number">42</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123; <span class="string">&quot;foo&quot;</span>:<span class="number">42</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="string">&quot;foo&quot;</span>: <span class="number">42</span> &#125;;</span><br></pre></td></tr></table></figure><p><a name="whitespace--no-trailing-spaces"></a></p></li><li><p><a href="#whitespace--no-trailing-spaces">19.18</a> 在行的末尾避免使用空格。 eslint: <a href="https://eslint.org/docs/rules/no-trailing-spaces"><code>no-trailing-spaces</code></a></p><p><a name="whitespace--no-multiple-empty-lines"></a></p></li><li><p><a href="#whitespace--no-multiple-empty-lines">19.19</a> 避免多个空行，并且只允许在文件末尾添加一个换行符。 eslint: <a href="https://eslint.org/docs/rules/no-multiple-empty-lines"><code>no-multiple-empty-lines</code></a></p><!-- markdownlint-disable MD012 --><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li></ul><pre><code>var y = 2;// goodvar x = 1;var y = 2;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">    &lt;!-- markdownlint-enable MD012 --&gt;</span><br><span class="line"></span><br><span class="line">**[⬆ 返回目录](#table-of-contents)**</span><br><span class="line"></span><br><span class="line">## &lt;a id=&quot;commas&quot;&gt;逗号&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">  &lt;a name=&quot;commas--leading-trailing&quot;&gt;&lt;/a&gt;&lt;a name=&quot;19.1&quot;&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">  - [20.1](#commas--leading-trailing) 逗号前置： **不行** eslint: [`comma-style`](https://eslint.org/docs/rules/comma-style.html)</span><br><span class="line"></span><br><span class="line">    ```javascript</span><br><span class="line">    // bad</span><br><span class="line">    const story = [</span><br><span class="line">        once</span><br><span class="line">      , upon</span><br><span class="line">      , aTime</span><br><span class="line">    ];</span><br><span class="line">    </span><br><span class="line">    // good</span><br><span class="line">    const story = [</span><br><span class="line">      once,</span><br><span class="line">      upon,</span><br><span class="line">      aTime,</span><br><span class="line">    ];</span><br><span class="line">    </span><br><span class="line">    // bad</span><br><span class="line">    const hero = &#123;</span><br><span class="line">        firstName: &#x27;Ada&#x27;</span><br><span class="line">      , lastName: &#x27;Lovelace&#x27;</span><br><span class="line">      , birthYear: 1815</span><br><span class="line">      , superPower: &#x27;computers&#x27;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    // good</span><br><span class="line">    const hero = &#123;</span><br><span class="line">      firstName: &#x27;Ada&#x27;,</span><br><span class="line">      lastName: &#x27;Lovelace&#x27;,</span><br><span class="line">      birthYear: 1815,</span><br><span class="line">      superPower: &#x27;computers&#x27;,</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure></code></pre><p>  <a name="commas--dangling">&lt;/a&gt;<a name="19.2"></a></p><ul><li><p><a href="#commas--dangling">20.2</a> 添加尾随逗号： <strong>可以</strong> eslint: <a href="https://eslint.org/docs/rules/comma-dangle.html"><code>comma-dangle</code></a></p><blockquote><p>为什么? 这个将造成更清洁的 git 扩展差异。 另外，像 Babel 这样的编译器，会在转换后的代码中删除额外的尾随逗号，这意味着你不必担心在浏览器中后面的 <a href="https://github.com/airbnb/javascript/blob/es5-deprecated/es5/README.md#commas">尾随逗号问题</a> 。</p></blockquote><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// bad - 没有尾随逗号的 git 差异</span><br><span class="line">const hero = &#123;</span><br><span class="line">     firstName: &#x27;Florence&#x27;,</span><br><span class="line"><span class="deletion">-    lastName: &#x27;Nightingale&#x27;</span></span><br><span class="line"><span class="addition">+    lastName: &#x27;Nightingale&#x27;,</span></span><br><span class="line"><span class="addition">+    inventorOf: [&#x27;coxcomb chart&#x27;, &#x27;modern nursing&#x27;]</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// good - 有尾随逗号的 git 差异</span><br><span class="line">const hero = &#123;</span><br><span class="line">     firstName: &#x27;Florence&#x27;,</span><br><span class="line">     lastName: &#x27;Nightingale&#x27;,</span><br><span class="line"><span class="addition">+    inventorOf: [&#x27;coxcomb chart&#x27;, &#x27;modern nursing&#x27;],</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> hero = &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&#x27;Dana&#x27;</span>,</span><br><span class="line">  <span class="attr">lastName</span>: <span class="string">&#x27;Scully&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> heroes = [</span><br><span class="line">  <span class="string">&#x27;Batman&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Superman&#x27;</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> hero = &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&#x27;Dana&#x27;</span>,</span><br><span class="line">  <span class="attr">lastName</span>: <span class="string">&#x27;Scully&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> heroes = [</span><br><span class="line">  <span class="string">&#x27;Batman&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Superman&#x27;</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createHero</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  firstName,</span></span></span><br><span class="line"><span class="params"><span class="function">  lastName,</span></span></span><br><span class="line"><span class="params"><span class="function">  inventorOf</span></span></span><br><span class="line"><span class="params"><span class="function"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// does nothing</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createHero</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  firstName,</span></span></span><br><span class="line"><span class="params"><span class="function">  lastName,</span></span></span><br><span class="line"><span class="params"><span class="function">  inventorOf,</span></span></span><br><span class="line"><span class="params"><span class="function"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// does nothing</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good (注意逗号不能出现在 &quot;rest&quot; 元素后边)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createHero</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  firstName,</span></span></span><br><span class="line"><span class="params"><span class="function">  lastName,</span></span></span><br><span class="line"><span class="params"><span class="function">  inventorOf,</span></span></span><br><span class="line"><span class="params"><span class="function">  ...heroArgs</span></span></span><br><span class="line"><span class="params"><span class="function"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// does nothing</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">createHero(</span><br><span class="line">  firstName,</span><br><span class="line">  lastName,</span><br><span class="line">  inventorOf</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">createHero(</span><br><span class="line">  firstName,</span><br><span class="line">  lastName,</span><br><span class="line">  inventorOf,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good (注意逗号不能出现在 &quot;rest&quot; 元素后边)</span></span><br><span class="line">createHero(</span><br><span class="line">  firstName,</span><br><span class="line">  lastName,</span><br><span class="line">  inventorOf,</span><br><span class="line">  ...heroArgs</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><h2 id="分号"><a href="#分号" class="headerlink" title="分号"></a><a id="semicolons">分号</a></h2><p>  <a name="semicolons--required">&lt;/a&gt;<a name="20.1"></a></p><ul><li><p><a href="#semicolons--required">21.1</a> <strong>对</strong> eslint: <a href="https://eslint.org/docs/rules/semi.html"><code>semi</code></a></p><blockquote><p>为什么? 当 JavaScript 遇见一个没有分号的换行符时，它会使用一个叫做 <a href="https://tc39.github.io/ecma262/#sec-automatic-semicolon-insertion">Automatic Semicolon Insertion</a> 的规则来确定是否应该以换行符视为语句的结束，并且如果认为如此，会在代码中断前插入一个分号到代码中。 但是，ASI 包含了一些奇怪的行为，如果 JavaScript 错误的解释了你的换行符，你的代码将会中断。 随着新特性成为 JavaScript 的一部分，这些规则将变得更加复杂。 明确地终止你的语句，并配置你的 linter 以捕获缺少的分号将有助于防止你遇到的问题。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad - 可能异常</span></span><br><span class="line"><span class="keyword">const</span> luke = &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> leia = &#123;&#125;</span><br><span class="line">[luke, leia].forEach(<span class="function"><span class="params">jedi</span> =&gt;</span> jedi.father = <span class="string">&#x27;vader&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad - 可能异常</span></span><br><span class="line"><span class="keyword">const</span> reaction = <span class="string">&quot;No! That&#x27;s impossible!&quot;</span></span><br><span class="line">(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">meanwhileOnTheFalcon</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// handle `leia`, `lando`, `chewie`, `r2`, `c3p0`</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;())</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad - 返回 `undefined` 而不是下一行的值 - 当 `return` 单独一行的时候 ASI 总是会发生</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">    <span class="string">&#x27;search your feelings, you know it to be foo&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> luke = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> leia = &#123;&#125;;</span><br><span class="line">[luke, leia].forEach(<span class="function">(<span class="params">jedi</span>) =&gt;</span> &#123;</span><br><span class="line">  jedi.father = <span class="string">&#x27;vader&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> reaction = <span class="string">&quot;No! That&#x27;s impossible!&quot;</span>;</span><br><span class="line">(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">meanwhileOnTheFalcon</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// handle `leia`, `lando`, `chewie`, `r2`, `c3p0`</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;search your feelings, you know it to be foo&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://stackoverflow.com/questions/7365172/semicolon-before-self-invoking-function/7365214#7365214">更多信息</a>.</p></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><h2 id="类型转换和强制类型转换"><a href="#类型转换和强制类型转换" class="headerlink" title="类型转换和强制类型转换"></a><a id="type-casting--coercion">类型转换和强制类型转换</a></h2><p>  <a name="coercion--explicit">&lt;/a&gt;<a name="21.1"></a></p><ul><li><p><a href="#coercion--explicit">22.1</a> 在语句开始前进行类型转换。</p><p><a name="coercion--strings">&lt;/a&gt;<a name="21.2"></a></p></li><li><p><a href="#coercion--strings">22.2</a>  字符类型： eslint: <a href="https://eslint.org/docs/rules/no-new-wrappers"><code>no-new-wrappers</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; this.reviewScore = 9;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> totalScore = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="built_in">this</span>.reviewScore); <span class="comment">// typeof totalScore is &quot;object&quot; not &quot;string&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> totalScore = <span class="built_in">this</span>.reviewScore + <span class="string">&#x27;&#x27;</span>; <span class="comment">// invokes this.reviewScore.valueOf()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> totalScore = <span class="built_in">this</span>.reviewScore.toString(); <span class="comment">// isn’t guaranteed to return a string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> totalScore = <span class="built_in">String</span>(<span class="built_in">this</span>.reviewScore);</span><br></pre></td></tr></table></figure><p><a name="coercion--numbers">&lt;/a&gt;<a name="21.3"></a></p></li><li><p><a href="#coercion--numbers">22.3</a> 数字类型：使用 <code>Number</code> 进行类型铸造和 <code>parseInt</code> 总是通过一个基数来解析一个字符串。 eslint: <a href="https://eslint.org/docs/rules/radix"><code>radix</code></a> <a href="https://eslint.org/docs/rules/no-new-wrappers"><code>no-new-wrappers</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inputValue = <span class="string">&#x27;4&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> val = <span class="keyword">new</span> <span class="built_in">Number</span>(inputValue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> val = +inputValue;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> val = inputValue &gt;&gt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> val = <span class="built_in">parseInt</span>(inputValue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> val = <span class="built_in">Number</span>(inputValue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> val = <span class="built_in">parseInt</span>(inputValue, <span class="number">10</span>);</span><br></pre></td></tr></table></figure><p><a name="coercion--comment-deviations">&lt;/a&gt;<a name="21.4"></a></p></li><li><p><a href="#coercion--comment-deviations">22.4</a> 如果出于某种原因，你正在做一些疯狂的事情，而 <code>parseInt</code> 是你的瓶颈，并且出于 <a href="https://jsperf.com/coercion-vs-casting/3">性能问题</a> 需要使用位运算， 请写下注释，说明为什么这样做和你做了什么。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * parseInt 使我的代码变慢。</span></span><br><span class="line"><span class="comment"> * 位运算将一个字符串转换成数字更快。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> val = inputValue &gt;&gt; <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p><a name="coercion--bitwise">&lt;/a&gt;<a name="21.5"></a></p></li><li><p><a href="#coercion--bitwise">22.5</a> <strong>注意：</strong> 当你使用位运算的时候要小心。 数字总是被以 <a href="https://es5.github.io/#x4.3.19">64-bit 值</a> 的形式表示，但是位运算总是返回一个 32-bit 的整数 (<a href="https://es5.github.io/#x11.7">来源</a>)。 对于大于 32 位的整数值，位运算可能会导致意外行为。<a href="https://github.com/airbnb/javascript/issues/109">讨论</a>。 最大的 32 位整数是： 2,147,483,647。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2147483647</span> &gt;&gt; <span class="number">0</span>; <span class="comment">// =&gt; 2147483647</span></span><br><span class="line"><span class="number">2147483648</span> &gt;&gt; <span class="number">0</span>; <span class="comment">// =&gt; -2147483648</span></span><br><span class="line"><span class="number">2147483649</span> &gt;&gt; <span class="number">0</span>; <span class="comment">// =&gt; -2147483647</span></span><br></pre></td></tr></table></figure><p><a name="coercion--booleans">&lt;/a&gt;<a name="21.6"></a></p></li><li><p><a href="#coercion--booleans">22.6</a> 布尔类型： eslint: <a href="https://eslint.org/docs/rules/no-new-wrappers"><code>no-new-wrappers</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> age = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> hasAge = <span class="keyword">new</span> <span class="built_in">Boolean</span>(age);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> hasAge = <span class="built_in">Boolean</span>(age);</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">const</span> hasAge = !!age;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a><a id="naming-conventions">命名规范</a></h2><p>  <a name="naming--descriptive">&lt;/a&gt;<a name="22.1"></a></p><ul><li><p><a href="#naming--descriptive">23.1</a> 避免单字母的名字。用你的命名来描述功能。 eslint: <a href="https://eslint.org/docs/rules/id-length"><code>id-length</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">q</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">query</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="naming--camelCase">&lt;/a&gt;<a name="22.2"></a></p></li><li><p><a href="#naming--camelCase">23.2</a> 在命名对象、函数和实例时使用驼峰命名法（camelCase）。 eslint: <a href="https://eslint.org/docs/rules/camelcase.html"><code>camelcase</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> OBJEcttsssss = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> this_is_my_object = &#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> thisIsMyObject = &#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">thisIsMyFunction</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><a name="naming--PascalCase">&lt;/a&gt;<a name="22.3"></a></p></li><li><p><a href="#naming--PascalCase">23.3</a> 只有在命名构造器或者类的时候才用帕斯卡拼命名法（PascalCase）。 eslint: <a href="https://eslint.org/docs/rules/new-cap.html"><code>new-cap</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">user</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = options.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bad = <span class="keyword">new</span> user(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;nope&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">options</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = options.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> good = <span class="keyword">new</span> User(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;yup&#x27;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a name="naming--leading-underscore">&lt;/a&gt;<a name="22.4"></a></p></li><li><p><a href="#naming--leading-underscore">23.4</a> 不要使用前置或者后置下划线。 eslint: <a href="https://eslint.org/docs/rules/no-underscore-dangle.html"><code>no-underscore-dangle</code></a></p><blockquote><p>为什么? JavaScript 在属性和方法方面没有隐私设置。 虽然前置的下划线是一种常见的惯例，意思是 “private” ，事实上，这些属性时公开的，因此，它们也是你公共 API 的一部分。 这种约定可能导致开发人员错误的认为更改不会被视为中断，或者不需要测试。建议：如果你想要什么东西是 “private” ， 那就一定不能有明显的表现。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="built_in">this</span>.__firstName__ = <span class="string">&#x27;Panda&#x27;</span>;</span><br><span class="line"><span class="built_in">this</span>.firstName_ = <span class="string">&#x27;Panda&#x27;</span>;</span><br><span class="line"><span class="built_in">this</span>._firstName = <span class="string">&#x27;Panda&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="built_in">this</span>.firstName = <span class="string">&#x27;Panda&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 好，在 WeakMapx 可用的环境中</span></span><br><span class="line"><span class="comment">// see https://kangax.github.io/compat-table/es6/#test-WeakMap</span></span><br><span class="line"><span class="keyword">const</span> firstNames = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line">firstNames.set(<span class="built_in">this</span>, <span class="string">&#x27;Panda&#x27;</span>);</span><br></pre></td></tr></table></figure><p><a name="naming--self-this">&lt;/a&gt;<a name="22.5"></a></p></li><li><p><a href="#naming--self-this">23.5</a> 不要保存 <code>this</code> 的引用。 使用箭头函数或者 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind">函数#bind</a>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> self = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(self);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> that = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(that);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="naming--filename-matches-export">&lt;/a&gt;<a name="22.6"></a></p></li><li><p><a href="#naming--filename-matches-export">23.6</a> 文件名应该和默认导出的名称完全匹配。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file 1 contents</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CheckBox</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> CheckBox;</span><br><span class="line"></span><br><span class="line"><span class="comment">// file 2 contents</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">fortyTwo</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">42</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// file 3 contents</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">insideDirectory</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// in some other file</span></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> CheckBox <span class="keyword">from</span> <span class="string">&#x27;./checkBox&#x27;</span>; <span class="comment">// PascalCase import/export, camelCase filename</span></span><br><span class="line"><span class="keyword">import</span> FortyTwo <span class="keyword">from</span> <span class="string">&#x27;./FortyTwo&#x27;</span>; <span class="comment">// PascalCase import/filename, camelCase export</span></span><br><span class="line"><span class="keyword">import</span> InsideDirectory <span class="keyword">from</span> <span class="string">&#x27;./InsideDirectory&#x27;</span>; <span class="comment">// PascalCase import/filename, camelCase export</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> CheckBox <span class="keyword">from</span> <span class="string">&#x27;./check_box&#x27;</span>; <span class="comment">// PascalCase import/export, snake_case filename</span></span><br><span class="line"><span class="keyword">import</span> forty_two <span class="keyword">from</span> <span class="string">&#x27;./forty_two&#x27;</span>; <span class="comment">// snake_case import/filename, camelCase export</span></span><br><span class="line"><span class="keyword">import</span> inside_directory <span class="keyword">from</span> <span class="string">&#x27;./inside_directory&#x27;</span>; <span class="comment">// snake_case import, camelCase export</span></span><br><span class="line"><span class="keyword">import</span> index <span class="keyword">from</span> <span class="string">&#x27;./inside_directory/index&#x27;</span>; <span class="comment">// requiring the index file explicitly</span></span><br><span class="line"><span class="keyword">import</span> insideDirectory <span class="keyword">from</span> <span class="string">&#x27;./insideDirectory/index&#x27;</span>; <span class="comment">// requiring the index file explicitly</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> CheckBox <span class="keyword">from</span> <span class="string">&#x27;./CheckBox&#x27;</span>; <span class="comment">// PascalCase export/import/filename</span></span><br><span class="line"><span class="keyword">import</span> fortyTwo <span class="keyword">from</span> <span class="string">&#x27;./fortyTwo&#x27;</span>; <span class="comment">// camelCase export/import/filename</span></span><br><span class="line"><span class="keyword">import</span> insideDirectory <span class="keyword">from</span> <span class="string">&#x27;./insideDirectory&#x27;</span>; <span class="comment">// camelCase export/import/directory name/implicit &quot;index&quot;</span></span><br><span class="line"><span class="comment">// ^ supports both insideDirectory.js and insideDirectory/index.js</span></span><br></pre></td></tr></table></figure><p><a name="naming--camelCase-default-export">&lt;/a&gt;<a name="22.7"></a></p></li><li><p><a href="#naming--camelCase-default-export">23.7</a> 当你导出默认函数时使用驼峰命名法。 你的文件名应该和方法名相同。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeStyleGuide</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> makeStyleGuide;</span><br></pre></td></tr></table></figure><p><a name="naming--PascalCase-singleton">&lt;/a&gt;<a name="22.8"></a></p></li><li><p><a href="#naming--PascalCase-singleton">23.8</a> 当你导出一个构造器 / 类 / 单例 / 函数库 / 暴露的对象时应该使用帕斯卡命名法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> AirbnbStyleGuide = &#123;</span><br><span class="line">  <span class="attr">es6</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> AirbnbStyleGuide;</span><br></pre></td></tr></table></figure><p><a name="naming--Acronyms-and-Initialisms"></a></p></li><li><p><a href="#naming--Acronyms-and-Initialisms">23.9</a> 缩略词和缩写都必须是全部大写或者全部小写。</p><blockquote><p>为什么? 名字是为了可读性，不是为了满足计算机算法。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> SmsContainer <span class="keyword">from</span> <span class="string">&#x27;./containers/SmsContainer&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> HttpRequests = [</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> SMSContainer <span class="keyword">from</span> <span class="string">&#x27;./containers/SMSContainer&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> HTTPRequests = [</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// also good</span></span><br><span class="line"><span class="keyword">const</span> httpRequests = [</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">import</span> TextMessageContainer <span class="keyword">from</span> <span class="string">&#x27;./containers/TextMessageContainer&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">const</span> requests = [</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><p><a name="naming--uppercase"></a></p></li><li><p><a href="#naming--uppercase">23.10</a> 你可以大写一个常量，如果它：（1）被导出，（2）使用 <code>const</code> 定义（不能被重新赋值），（3）程序员可以信任它（以及其嵌套的属性）是不变的。</p><blockquote><p>为什么? 这是一个可以帮助程序员确定变量是否会发生变化的辅助工具。UPPERCASE_VARIABLES 可以让程序员知道他们可以相信变量（及其属性）不会改变。</p></blockquote><ul><li>是否是对所有的 <code>const</code> 定义的变量？ - 这个是没有必要的，不应该在文件中使用大写。但是，它应该用于导出常量。</li><li>导出对象呢？ - 在顶级导出属性 (e.g. <code>EXPORTED_OBJECT.key</code>) 并且保持所有嵌套属性不变。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> PRIVATE_VARIABLE = <span class="string">&#x27;should not be unnecessarily uppercased within a file&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> THING_TO_BE_CHANGED = <span class="string">&#x27;should obviously not be uppercased&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> REASSIGNABLE_VARIABLE = <span class="string">&#x27;do not use let with uppercase variables&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ---</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 允许，但是不提供语义值</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> apiKey = <span class="string">&#x27;SOMEKEY&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多数情况下，很好</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> API_KEY = <span class="string">&#x27;SOMEKEY&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ---</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad - 不必要大写 key 没有增加语义值</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> MAPPING = &#123;</span><br><span class="line">  <span class="attr">KEY</span>: <span class="string">&#x27;value&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> MAPPING = &#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&#x27;value&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><h2 id="存取器"><a href="#存取器" class="headerlink" title="存取器"></a><a id="accessors">存取器</a></h2><p>  <a name="accessors--not-required">&lt;/a&gt;<a name="23.1"></a></p><ul><li><p><a href="#accessors--not-required">24.1</a> 对于属性的的存取函数不是必须的。</p><p><a name="accessors--no-getters-setters">&lt;/a&gt;<a name="23.2"></a></p></li><li><p><a href="#accessors--no-getters-setters">24.2</a> 不要使用 JavaScript 的 getters/setters 方法，因为它们会导致意外的副作用，并且更加难以测试、维护和推敲。 相应的，如果你需要存取函数的时候使用 <code>getVal()</code> 和 <code>setVal(&#39;hello&#39;)</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dragon</span> </span>&#123;</span><br><span class="line">  <span class="keyword">get</span> <span class="title">age</span>() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title">age</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dragon</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">getAge</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">setAge</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="accessors--boolean-prefix">&lt;/a&gt;<a name="23.3"></a></p></li><li><p><a href="#accessors--boolean-prefix">24.3</a> 如果属性/方法是一个 <code>boolean</code> 值，使用 <code>isVal()</code> 或者 <code>hasVal()</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (!dragon.age()) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (!dragon.hasAge()) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="accessors--consistent">&lt;/a&gt;<a name="23.4"></a></p></li><li><p><a href="#accessors--consistent">24.4</a> 可以创建 <code>get()</code> 和 <code>set()</code> 方法，但是要保证一致性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jedi</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">options = &#123;&#125;</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> lightsaber = options.lightsaber || <span class="string">&#x27;blue&#x27;</span>;</span><br><span class="line">    <span class="built_in">this</span>.set(<span class="string">&#x27;lightsaber&#x27;</span>, lightsaber);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">set</span>(<span class="params">key, val</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>[key] = val;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params">key</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>[key];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a><a id="events">事件</a></h2><p>  <a name="events--hash">&lt;/a&gt;<a name="24.1"></a></p><ul><li><p><a href="#events--hash">25.1</a> 当给事件（无论是 DOM 事件还是更加私有的事件）附加数据时，传入一个对象（通畅也叫做 “hash” ） 而不是原始值。 这样可以让后边的贡献者向事件数据添加更多的数据，而不用找出更新事件的每个处理器。 例如，不好的写法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="built_in">this</span>).trigger(<span class="string">&#x27;listingUpdated&#x27;</span>, listing.id);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">$(<span class="built_in">this</span>).on(<span class="string">&#x27;listingUpdated&#x27;</span>, <span class="function">(<span class="params">e, listingID</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// do something with listingID</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>更好的写法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line">$(<span class="built_in">this</span>).trigger(<span class="string">&#x27;listingUpdated&#x27;</span>, &#123; <span class="attr">listingID</span>: listing.id &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">$(<span class="built_in">this</span>).on(<span class="string">&#x27;listingUpdated&#x27;</span>, <span class="function">(<span class="params">e, data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// do something with data.listingID</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p></li></ul><h2 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h2><p>  <a name="jquery--dollar-prefix">&lt;/a&gt;<a name="25.1"></a></p><ul><li><p><a href="#jquery--dollar-prefix">26.1</a> 对于 jQuery 对象的变量使用 <code>$</code> 作为前缀。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> sidebar = $(<span class="string">&#x27;.sidebar&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> $sidebar = $(<span class="string">&#x27;.sidebar&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> $sidebarBtn = $(<span class="string">&#x27;.sidebar-btn&#x27;</span>);</span><br></pre></td></tr></table></figure><p><a name="jquery--cache">&lt;/a&gt;<a name="25.2"></a></p></li><li><p><a href="#jquery--cache">26.2</a> 缓存 jQuery 查询。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setSidebar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&#x27;.sidebar&#x27;</span>).hide();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  $(<span class="string">&#x27;.sidebar&#x27;</span>).css(&#123;</span><br><span class="line">    <span class="string">&#x27;background-color&#x27;</span>: <span class="string">&#x27;pink&#x27;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setSidebar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> $sidebar = $(<span class="string">&#x27;.sidebar&#x27;</span>);</span><br><span class="line">  $sidebar.hide();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  $sidebar.css(&#123;</span><br><span class="line">    <span class="string">&#x27;background-color&#x27;</span>: <span class="string">&#x27;pink&#x27;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="jquery--queries">&lt;/a&gt;<a name="25.3"></a></p></li><li><p><a href="#jquery--queries">26.3</a> 对于 DOM 查询使用层叠 <code>$(&#39;.sidebar ul&#39;)</code> 或 父元素 &gt; 子元素 <code>$(&#39;.sidebar &gt; ul&#39;)</code> 的格式。 <a href="http://jsperf.com/jquery-find-vs-context-sel/16">jsPerf</a></p><p><a name="jquery--find">&lt;/a&gt;<a name="25.4"></a></p></li><li><p><a href="#jquery--find">26.4</a> 对于有作用域的 jQuery 对象查询使用 <code>find</code> 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="string">&#x27;ul&#x27;</span>, <span class="string">&#x27;.sidebar&#x27;</span>).hide();</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="string">&#x27;.sidebar&#x27;</span>).find(<span class="string">&#x27;ul&#x27;</span>).hide();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$(<span class="string">&#x27;.sidebar ul&#x27;</span>).hide();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$(<span class="string">&#x27;.sidebar &gt; ul&#x27;</span>).hide();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$sidebar.find(<span class="string">&#x27;ul&#x27;</span>).hide();</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><h2 id="ECMAScript-5-兼容性"><a href="#ECMAScript-5-兼容性" class="headerlink" title="ECMAScript 5 兼容性"></a><a id="ecmascript-5-compatibility">ECMAScript 5 兼容性</a></h2><p>  <a name="es5-compat--kangax">&lt;/a&gt;<a name="26.1"></a></p><ul><li><a href="#es5-compat--kangax">27.1</a> 参考 <a href="https://twitter.com/kangax/">Kangax</a>的 ES5 <a href="https://kangax.github.io/es5-compat-table/">兼容性表格</a>。</li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><p><a name="ecmascript-6-styles"></a></p><h2 id="ECMAScript-6-ES-2015-Styles"><a href="#ECMAScript-6-ES-2015-Styles" class="headerlink" title="ECMAScript 6+ (ES 2015+) Styles"></a>ECMAScript 6+ (ES 2015+) Styles</h2><p>  <a name="es6-styles">&lt;/a&gt;<a name="27.1"></a></p><ul><li><a href="#es6-styles">28.1</a> 这是一个链接到各种 ES6+ 特性的集合。</li></ul><ol><li><a href="#arrow-functions">箭头函数</a></li><li><a href="#classes--constructors">类</a></li><li><a href="#es6-object-shorthand">对象简写</a></li><li><a href="#es6-object-concise">对象简洁</a></li><li><a href="#es6-computed-properties">对象计算属性</a></li><li><a href="#es6-template-literals">字符串模板</a></li><li><a href="#destructuring">解构</a></li><li><a href="#es6-default-parameters">默认参数</a></li><li><a href="#es6-rest">Rest</a></li><li><a href="#es6-array-spreads">数组展开</a></li><li><a href="#references">Let 和 Const</a></li><li><a href="#es2016-properties--exponentiation-operator">求幂运算符</a></li><li><a href="#iterators-and-generators">迭代器和发生器</a></li><li><p><a href="#modules">模块</a></p><p><a name="tc39-proposals"></a></p><ul><li><p><a href="#tc39-proposals">28.2</a> 不要使用尚未达到第3阶段的 <a href="https://github.com/tc39/proposals">TC39 建议</a>。</p><blockquote><p>为什么? <a href="https://tc39.github.io/process-document/">它们没有最终确定</a>， 并且它们可能会被改变或完全撤回。我们希望使用JavaScript，而建议还不是JavaScript。</p></blockquote></li></ul></li></ol><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><h2 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a><a id="standard-library">标准库</a></h2><p>  <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects">标准库</a><br>  包含功能已损坏的实用工具，但因为遗留原因而保留。</p><p>  <a name="standard-library--isnan"></a></p><ul><li><p><a href="#standard-library--isnan">29.1</a> 使用 <code>Number.isNaN</code> 代替全局的 <code>isNaN</code>.<br>eslint: <a href="https://eslint.org/docs/rules/no-restricted-globals"><code>no-restricted-globals</code></a></p><blockquote><p>为什么? 全局的 <code>isNaN</code> 强制非数字转化为数字，对任何强制转化为 NaN 的东西都返回 true。</p><p>如果需要这种行为，请明确说明。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="string">&#x27;1.2&#x27;</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="string">&#x27;1.2.3&#x27;</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="string">&#x27;1.2.3&#x27;</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="built_in">Number</span>(<span class="string">&#x27;1.2.3&#x27;</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><a name="standard-library--isfinite"></a></p></li><li><p><a href="#standard-library--isfinite">29.2</a> 使用 <code>Number.isFinite</code> 代替全局的 <code>isFinite</code>.<br>eslint: <a href="https://eslint.org/docs/rules/no-restricted-globals"><code>no-restricted-globals</code></a></p><blockquote><p>为什么? 全局的 <code>isFinite</code> 强制非数字转化为数字，对任何强制转化为有限数字的东西都返回 true。</p><p>如果需要这种行为，请明确说明。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="built_in">isFinite</span>(<span class="string">&#x27;2e3&#x27;</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="built_in">Number</span>.isFinite(<span class="string">&#x27;2e3&#x27;</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Number</span>.isFinite(<span class="built_in">parseInt</span>(<span class="string">&#x27;2e3&#x27;</span>, <span class="number">10</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><h2 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h2><p>  <a name="testing--yup">&lt;/a&gt;<a name="28.1"></a></p><ul><li><p><a href="#testing--yup">30.1</a> <strong>是的.</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="testing--for-real">&lt;/a&gt;<a name="28.2"></a></p></li><li><p><a href="#testing--for-real">30.2</a> <strong>没有，但是认真</strong>:</p><ul><li>无论你使用那种测试框架，都应该编写测试！</li><li>努力写出许多小的纯函数，并尽量减少发生错误的地方。</li><li>对于静态方法和 mock 要小心——它们会使你的测试更加脆弱。</li><li>我们主要在 Airbnb 上使用 <a href="https://www.npmjs.com/package/mocha"><code>mocha</code></a> 和 <a href="https://www.npmjs.com/package/jest"><code>jest</code></a> 。 <a href="https://www.npmjs.com/package/tape"><code>tape</code></a> 也会用在一些小的独立模块上。</li><li>100%的测试覆盖率是一个很好的目标，即使它并不总是可行的。</li><li>无论何时修复bug，都要编写一个回归测试。在没有回归测试的情况下修复的bug在将来几乎肯定会再次崩溃。</li></ul></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a><a id="performance">性能</a></h2><ul><li><a href="https://www.kellegous.com/j/2013/01/26/layout-performance/">On Layout &amp; Web Performance</a></li><li><a href="https://jsperf.com/string-vs-array-concat/2">String vs Array Concat</a></li><li><a href="https://jsperf.com/try-catch-in-loop-cost">Try/Catch Cost In a Loop</a></li><li><a href="https://jsperf.com/bang-function">Bang Function</a></li><li><a href="https://jsperf.com/jquery-find-vs-context-sel/13">jQuery Find vs Context, Selector</a></li><li><a href="https://jsperf.com/innerhtml-vs-textcontent-for-script-text">innerHTML vs textContent for script text</a></li><li><a href="https://jsperf.com/ya-string-concat">Long String Concatenation</a></li><li><a href="https://www.quora.com/JavaScript-programming-language-Are-Javascript-functions-like-map-reduce-and-filter-already-optimized-for-traversing-array/answer/Quildreen-Motta">Are Javascript functions like <code>map()</code>, <code>reduce()</code>, and <code>filter()</code> optimized for traversing arrays?</a></li><li>Loading…</li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a><a id="resources">资源</a></h2><p><strong>学习 ES6+</strong></p><ul><li><a href="https://tc39.github.io/ecma262/">Latest ECMA spec</a></li><li><a href="http://exploringjs.com/">ExploringJS</a></li><li><a href="https://kangax.github.io/compat-table/es6/">ES6 Compatibility Table</a></li><li><a href="http://es6-features.org/">Comprehensive Overview of ES6 Features</a></li></ul><p><strong>读这个</strong></p><ul><li><a href="http://www.ecma-international.org/ecma-262/6.0/index.html">Standard ECMA-262</a></li></ul><p><strong>工具</strong></p><ul><li>Code Style Linters<ul><li><a href="https://eslint.org/">ESlint</a> - <a href="https://github.com/airbnb/javascript/blob/master/linters/.eslintrc">Airbnb Style .eslintrc</a></li><li><a href="http://jshint.com/">JSHint</a> - <a href="https://github.com/airbnb/javascript/blob/master/linters/.jshintrc">Airbnb Style .jshintrc</a></li></ul></li><li>Neutrino preset - <a href="https://neutrino.js.org/presets/neutrino-preset-airbnb-base/">neutrino-preset-airbnb-base</a></li></ul><p><strong>其他编码规范</strong></p><ul><li><a href="https://google.github.io/styleguide/javascriptguide.xml">Google JavaScript Style Guide</a></li><li><a href="https://contribute.jquery.org/style-guide/js/">jQuery Core Style Guidelines</a></li><li><a href="https://github.com/rwaldron/idiomatic.js">Principles of Writing Consistent, Idiomatic JavaScript</a></li><li><a href="https://standardjs.com">StandardJS</a></li></ul><p><strong>其他风格</strong></p><ul><li><a href="https://gist.github.com/cjohansen/4135065">Naming this in nested functions</a> - Christian Johansen</li><li><a href="https://github.com/airbnb/javascript/issues/52">Conditional Callbacks</a> - Ross Allen</li><li><a href="http://sideeffect.kr/popularconvention/#javascript">Popular JavaScript Coding Conventions on GitHub</a> - JeongHoon Byun</li><li><a href="http://benalman.com/news/2012/05/multiple-var-statements-javascript/">Multiple var statements in JavaScript, not superfluous</a> - Ben Alman</li></ul><p><strong>进一步阅读</strong></p><ul><li><a href="https://javascriptweblog.wordpress.com/2010/10/25/understanding-javascript-closures/">Understanding JavaScript Closures</a> - Angus Croll</li><li><a href="http://www.2ality.com/2013/06/basic-javascript.html">Basic JavaScript for the impatient programmer</a> - Dr. Axel Rauschmayer</li><li><a href="http://youmightnotneedjquery.com/">You Might Not Need jQuery</a> - Zack Bloom &amp; Adam Schwartz</li><li><a href="https://github.com/lukehoban/es6features">ES6 Features</a> - Luke Hoban</li><li><a href="https://github.com/bendc/frontend-guidelines">Frontend Guidelines</a> - Benjamin De Cock</li></ul><p><strong>书籍</strong></p><ul><li><a href="https://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742">JavaScript: The Good Parts</a> - Douglas Crockford</li><li><a href="https://www.amazon.com/JavaScript-Patterns-Stoyan-Stefanov/dp/0596806752">JavaScript Patterns</a> - Stoyan Stefanov</li><li><a href="https://www.amazon.com/JavaScript-Design-Patterns-Recipes-Problem-Solution/dp/159059908X">Pro JavaScript Design Patterns</a>  - Ross Harmes and Dustin Diaz</li><li><a href="https://www.amazon.com/High-Performance-Web-Sites-Essential/dp/0596529309">High Performance Web Sites: Essential Knowledge for Front-End Engineers</a> - Steve Souders</li><li><a href="https://www.amazon.com/Maintainable-JavaScript-Nicholas-C-Zakas/dp/1449327680">Maintainable JavaScript</a> - Nicholas C. Zakas</li><li><a href="https://www.amazon.com/JavaScript-Web-Applications-Alex-MacCaw/dp/144930351X">JavaScript Web Applications</a> - Alex MacCaw</li><li><a href="https://www.amazon.com/Pro-JavaScript-Techniques-John-Resig/dp/1590597273">Pro JavaScript Techniques</a> - John Resig</li><li><a href="https://www.amazon.com/Smashing-Node-js-JavaScript-Everywhere-Magazine/dp/1119962595">Smashing Node.js: JavaScript Everywhere</a> - Guillermo Rauch</li><li><a href="https://www.amazon.com/Secrets-JavaScript-Ninja-John-Resig/dp/193398869X">Secrets of the JavaScript Ninja</a> - John Resig and Bear Bibeault</li><li><a href="http://humanjavascript.com/">Human JavaScript</a> - Henrik Joreteg</li><li><a href="http://superherojs.com/">Superhero.js</a> - Kim Joar Bekkelund, Mads Mobæk, &amp; Olav Bjorkoy</li><li><a href="http://jsbooks.revolunet.com/">JSBooks</a> - Julien Bouquillon</li><li><a href="https://www.manning.com/books/third-party-javascript">Third Party JavaScript</a> - Ben Vinegar and Anton Kovalyov</li><li><a href="http://amzn.com/0321812182">Effective JavaScript: 68 Specific Ways to Harness the Power of JavaScript</a> - David Herman</li><li><a href="http://eloquentjavascript.net/">Eloquent JavaScript</a> - Marijn Haverbeke</li><li><a href="http://shop.oreilly.com/product/0636920033769.do">You Don’t Know JS: ES6 &amp; Beyond</a> - Kyle Simpson</li></ul><p><strong>博客</strong></p><ul><li><a href="http://javascriptweekly.com/">JavaScript Weekly</a></li><li><a href="https://javascriptweblog.wordpress.com/">JavaScript, JavaScript…</a></li><li><a href="https://bocoup.com/weblog">Bocoup Weblog</a></li><li><a href="http://www.adequatelygood.com/">Adequately Good</a></li><li><a href="https://www.nczonline.net/">NCZOnline</a></li><li><a href="http://perfectionkills.com/">Perfection Kills</a></li><li><a href="http://benalman.com/">Ben Alman</a></li><li><a href="http://dmitry.baranovskiy.com/">Dmitry Baranovskiy</a></li><li><a href="http://code.tutsplus.com/?s=javascript">nettuts</a></li></ul><p><strong>播客</strong></p><ul><li><a href="https://javascriptair.com/">JavaScript Air</a></li><li><a href="https://devchat.tv/js-jabber/">JavaScript Jabber</a></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><h2 id="JavaScript风格指南的指南"><a href="#JavaScript风格指南的指南" class="headerlink" title="JavaScript风格指南的指南"></a><a id="the-javascript-style-guide-guide">JavaScript风格指南的指南</a></h2><ul><li><a href="https://github.com/airbnb/javascript/wiki/The-JavaScript-Style-Guide-Guide">Reference</a></li></ul><h2 id="许可证"><a href="#许可证" class="headerlink" title="许可证"></a><a id="license">许可证</a></h2><p>(The MIT License)</p><p>Copyright (c) 2012 康兵奎</p><p>Permission is hereby granted, free of charge, to any person obtaining<br>a copy of this software and associated documentation files (the<br>‘Software’), to deal in the Software without restriction, including<br>without limitation the rights to use, copy, modify, merge, publish,<br>distribute, sublicense, and/or sell copies of the Software, and to<br>permit persons to whom the Software is furnished to do so, subject to<br>the following conditions:</p><p>The above copyright notice and this permission notice shall be<br>included in all copies or substantial portions of the Software.</p><p>THE SOFTWARE IS PROVIDED ‘AS IS’, WITHOUT WARRANTY OF ANY KIND,<br>EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF<br>MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.<br>IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY<br>CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,<br>TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE<br>SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><h2 id="修正案"><a href="#修正案" class="headerlink" title="修正案"></a><a id="amendments">修正案</a></h2><p>我们鼓励您使用此指南并更改规则以适应您的团队的风格指南。下面，你可以列出一些对风格指南的修正。这允许您定期更新您的样式指南，而不必处理合并冲突。</p>]]></content>
      
      
      <categories>
          
          <category> 深入浅出js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 代码规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XMind图片去水印以及其他格式导出</title>
      <link href="/articles/20211201bb79e1c6bbcb.html"/>
      <url>/articles/20211201bb79e1c6bbcb.html</url>
      
        <content type="html"><![CDATA[<p>最近因为要梳理一些知识，需要用到思维导图，于是我下载了思维导图工具<code>Xmind</code>。但是在我画好图后，导出图片的时候发现图片上带有水印，只有会员才能去水印。但是我只用几次，买会员不划算，于是百度一下。在吾爱破解发现了方法，特此记录一下这次尝试。</p><span id="more"></span><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>论坛上了解到<code>Xmind</code>使用的是<code>Electron+vue</code>开发的，Electron打包的会在<code>resources</code>生成一个<code>app.asar</code>文件，大部分的资源页面文件都在这边。</p><h3 id="安装nodeJs"><a href="#安装nodeJs" class="headerlink" title="安装nodeJs"></a>安装nodeJs</h3><p>这一步跳过，去官网下载<code>node</code>最新版（我电脑上本身是有node环境的），一路next，成功安装</p><h3 id="安装asar"><a href="#安装asar" class="headerlink" title="安装asar"></a>安装asar</h3><p>执行以下命令安装<code>asar</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g asar</span><br></pre></td></tr></table></figure><h2 id="开始破解"><a href="#开始破解" class="headerlink" title="开始破解"></a>开始破解</h2><p>使用超级管理员身份进入<code>Xmind</code>安装目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd &#x27;C:\Program Files\XMind\resources&#x27;</span><br></pre></td></tr></table></figure><p><code>C:\Program Files\XMind</code>  是我的安装路径，路径中有空格需要用引号包起来，如下图：</p><p><img src="https://pic.wjnba.top/img/202112011718543.png" alt=""></p><p>执行拆包命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">asar extract app.asar &lt;目录名&gt;</span><br></pre></td></tr></table></figure><p><img src="https://pic.wjnba.top/img/202112011718253.png" alt="image-20211201170115851"></p><p>生成目录名<code>test</code></p><p><img src="https://pic.wjnba.top/img/202112011718368.png" alt="image-20211201170333631"></p><p>修改<code>C:\Program Files\XMind\resources\test\main\main.js</code>（关键字搜索<code>exportSVG</code>） 和 <code>C:\Program Files\XMind\resources\test\renderer\5055.js</code>（关键字搜索<code>value: &quot;watermark&quot;</code>）文件，如下图所示：</p><p><img src="https://pic.wjnba.top/img/202112011718400.png" alt="image-20211201170953855"></p><p><img src="https://pic.wjnba.top/img/202112011718615.png" alt="image-20211201171147833"></p><p>完成后，执行组包命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">asar pack &lt;目录名&gt; app.asar</span><br></pre></td></tr></table></figure><p><img src="https://pic.wjnba.top/img/202112011718417.png" alt="image-20211201171422958"></p><p>OK，已经重新生成了<code>app.asar</code>文件，打开Xmind软件，发现导出为图片时，已经没有水印了，无会员也可以导出其他格式了。</p>]]></content>
      
      
      <categories>
          
          <category> 软件破解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件破解 </tag>
            
            <tag> xmind </tag>
            
            <tag> 思维导图工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP请求详解</title>
      <link href="/articles/202111301a4f2eb3a022.html"/>
      <url>/articles/202111301a4f2eb3a022.html</url>
      
        <content type="html"><![CDATA[<h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><blockquote><p>HTTP是一个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。它于1990年提出，经过几年的使用与发展，得到不断地完善和扩展。目前在WWW中使用的是HTTP/1.0的第六版，HTTP/1.1的规范化工作正在进行之中，而且HTTP-NG(Next Generation of HTTP)的建议已经提出。</p></blockquote><span id="more"></span><h3 id="二、HTTP协议的主要特点"><a href="#二、HTTP协议的主要特点" class="headerlink" title="二、HTTP协议的主要特点"></a>二、HTTP协议的主要特点</h3><p>1.支持客户/服务器模式。</p><p>2.简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、PUT、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。</p><p>3.灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。</p><p>4.无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</p><p>5.无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</p><h3 id="三、HTTP请求报文"><a href="#三、HTTP请求报文" class="headerlink" title="三、HTTP请求报文"></a>三、HTTP请求报文</h3><h4 id="HTTP请求报文由3部分组成（请求行-请求头-请求体）"><a href="#HTTP请求报文由3部分组成（请求行-请求头-请求体）" class="headerlink" title="HTTP请求报文由3部分组成（请求行+请求头+请求体）"></a>HTTP请求报文由3部分组成（<strong>请求行+请求头+请求体</strong>）</h4><p>请求行：请求方法 + 请求地址 + 协议名称及版本号</p><p>请求头：是HTTP的报文头，报文头包含若干个属性，格式为“属性名:属性值”，服务端据此获取客户端的信息。与缓存相关的规则信息，均包含在header中</p><p>请求体：是报文体，承载多个请求参数的数据，不仅报文体可以可以传参，url也可以通过‘url?’形式传递参数</p><h3 id="四、HTTP响应报文"><a href="#四、HTTP响应报文" class="headerlink" title="四、HTTP响应报文"></a>四、HTTP响应报文</h3><h4 id="HTTP的响应报文也由三部分组成（响应行-响应头-响应体）"><a href="#HTTP的响应报文也由三部分组成（响应行-响应头-响应体）" class="headerlink" title="HTTP的响应报文也由三部分组成（响应行+响应头+响应体）"></a>HTTP的响应报文也由三部分组成（响应行+响应头+响应体）</h4><p>响应行：协议名称及版本号 + 状态码及状态描述</p><p>响应头：响应头由若干属性组成</p><p>响应体：响应报文体，即请求返回的数据</p><p><img src="https://pic.wjnba.top/img/202112011401494.png" alt="HTTP"></p>]]></content>
      
      
      <categories>
          
          <category> HTTP请求 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP请求 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Hexo+Gitee免费搭建个人博客（二）</title>
      <link href="/articles/20211122f2d31db9e1f3.html"/>
      <url>/articles/20211122f2d31db9e1f3.html</url>
      
        <content type="html"><![CDATA[<p>上一篇已经准备好了搭建博客所需要的环境，接下来我们使用hexo在本地搭建博客</p><h2 id="hexo搭建博客"><a href="#hexo搭建博客" class="headerlink" title="hexo搭建博客"></a><a href="https://hexo.io/zh-cn/">hexo</a>搭建博客</h2><p>首先在本地在一个盘，创建一个名为hexo的文件夹用于存放本地博客，我用的是E:\workspace\hexo，cmd进入该目录，执行以下命令，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g  //全局安装hexo</span><br></pre></td></tr></table></figure><span id="more"></span><p><img src="https://pic.wjnba.top/img/IxhksP.png" alt="图片"></p><p>等待命令执行完以后，继续执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>过程有些慢，请耐心等待，等执行完以后我们可以看到，hexo目录下，已经多了以下文件：</p><p><img src="https://pic.wjnba.top/img/Ix5PDP.png" alt="图片"></p><p>下面教你怎么运行，先记住下面几个命令，以后经常用到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean # 清空已有hexo网站文件</span><br><span class="line">hexo generate(or g) # 依据网页文本与新的CSS样式生成新网站文件</span><br><span class="line">hexo server(or s) # 启动本地服务器，可以在localhost:4000查看网站修改效果</span><br></pre></td></tr></table></figure><p>也可以连起来写成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><p>执行命令上面的命令</p><p><img src="https://pic.wjnba.top/img/IxI9G4.png" alt="图片"></p><p>当出现 “ Hexo is running at <a href="http://localhost:4000">http://localhost:4000</a> . Press Ctrl+C to stop” 时，证明 Hexo 已经启动，打开浏览器访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:4000</span><br></pre></td></tr></table></figure><p><img src="https://pic.wjnba.top/img/IxIZdK.png" alt="图片"></p><p>至此，本地 Hexo 搭建完成。</p><h2 id="更换-Hexo-主题"><a href="#更换-Hexo-主题" class="headerlink" title="更换 Hexo 主题"></a>更换 Hexo 主题</h2><p>Hexo 提供了很多主题可更换，访问<a href="https://hexo.io/themes/">https://hexo.io/themes/</a> ，寻找喜欢的主题并到github下载。<br><br>我比较喜欢<a href="https://github.com/chaooo/hexo-theme-BlueLake">BlueLake</a>和<a href="https://github.com/JoeyBling/hexo-theme-yilia-plus">yilia</a>这两个主题，我现在的博客用的是yilia这个主题，后面讲的也是这个主题，可以访问一下我的博客，看一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.wjnba.top/</span><br></pre></td></tr></table></figure><p>可以直接 Download zip，也可以使用git clone + 远程地址直接拉取下来</p><p><img src="https://pic.wjnba.top/img/Ix7ywt.png" alt="图片"></p><p>下载完成以后，把压缩包解压一下，把解压出来的文件改名为yilia（当然不改也是可以的）,并且把它放在themes文件夹下。<br><br>接下来打开网站根目录中的_config.yml 修改主题、网站信息等配置</p><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>下面是我自己修改好的配置</p><p><img src="https://pic.wjnba.top/img/IxqywR.png" alt="image"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: Hexo #你的网站名</span><br><span class="line">subtitle: &#x27;&#x27; #网站副标题</span><br><span class="line">description: &#x27;&#x27; #网站描述</span><br><span class="line">keywords: #网站关键字</span><br><span class="line">author: John Doe #网站作者</span><br><span class="line">language: en #网站语言</span><br><span class="line">timezone: &#x27;&#x27; #时区</span><br><span class="line"></span><br><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span><br><span class="line">url: http://yoursite.com #网站的url 例如https://asoc.gitee.io</span><br><span class="line">root: / #网站根目录</span><br></pre></td></tr></table></figure><p>需要更多关于配置文件的内容，请参照 <a href="https://hexo.io/zh-cn/docs/configuration">https://hexo.io/zh-cn/docs/configuration</a></p><p>现在我们先来修改主题，找到theme并修改为如图所示：</p><p><img src="https://pic.wjnba.top/img/IxLUHA.png" alt="image"></p><p>theme 后面的内容是刚才你下载的主题的文件夹名称</p><p>再次执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><p>访问<a href="http://localhost:4000/">http://localhost:4000/</a> ，可以看到页面发生了明显变化</p><p><img src="https://pic.wjnba.top/img/IxjQNn.png" alt="image"></p><p>现在博客还在我们本地还没部署到线上，接下来我们把它部署上去<br><br><br>复制仓库地址</p><p><img src="https://pic.wjnba.top/img/IxvxdH.png" alt="image"></p><p>修改根_config.yml 最后几行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://gitee.com/wjnba/wjnba.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>修改后保存，再次进入cmd，需要安装一个 deployer</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><p>Hexo 提供了快速方便的一键部署功能，让你只需一条命令就能将网站部署到服务器上。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>也可简写为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>执行下面命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>这时候可以看到仓库里面已经有了hexo的文件了</p><p><img src="https://pic.wjnba.top/img/IxvxdH.png" alt="image"></p><p>当然这还没完，此时需要我们开启Gitee Pages服务</p><p><img src="https://pic.wjnba.top/img/IzpZwD.png" alt="image"></p><p>Gitee Pages服务需要我们进行实名认证，按照步骤上传<strong>清晰的</strong>身份证照片就行了，一般一天内就会审核下来，申请成功后是这样的</p><p><img src="https://pic.wjnba.top/img/IzpxjP.png" alt="image"></p><p>我们上面使用<strong>hexo d</strong>命令上传文件到master分支，所以我们部署分支选择master，并且选择强制启用 https，最后点击下面的启动按钮（我是部署完成了的，所以是更新）<br>启动成功后访问 <a href="https://www.wjnba.top">https://www.wjnba.top</a> ，可以看到已经部署成功了</p><p><img src="https://pic.wjnba.top/img/IzCAaD.png" alt="image"></p><p>我们看一下本地目录下的hexo/public文件夹，在对比一下master分支上的代码，发现它们是一样的，意味着我们本地的代码只有public文件夹里面的上传上去了的,其他的文件并没有，我们有时候需要重装电脑、或者更换电脑，所以我们也要把其他文件也上传到git仓库里面去，以防后面找不到了，下面我们在git仓库里面创建一个名为hexo的分支，并设为默认分支</p><p><img src="https://pic.wjnba.top/img/Izi3CQ.png" alt="image"></p><p>使用上一篇安装的Git工具,执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone 远程仓库地址</span><br></pre></td></tr></table></figure><p>拉取远程仓库代码到本地，然后删除除.git文件以外的文件，然后执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &#x27;提交到hexo&#x27;</span><br><span class="line">git pull</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>提交代码到hexo分支，现在这个分支下的文件就删除完了，把本地E:\workspace\hexo文件夹的内容，拷贝到wjnba(这是我的仓库名)文件夹里面去</p><p><img src="https://pic.wjnba.top/img/IzFwLt.png" alt="image"></p><p>在根目录下创建.gitignore文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/node_modules/</span><br><span class="line">/.idea/</span><br><span class="line">/.deploy_git/</span><br><span class="line">/public/</span><br></pre></td></tr></table></figure><p>忽略不需要上传的文件，继续使用Git工具，执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &#x27;提交到hexo&#x27;</span><br><span class="line">git pull</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>现在我们在去看git仓库，发现hexo分支上已经有文件了</p><p><img src="https://pic.wjnba.top/img/Izkh1H.png" alt="image"></p><p>master分支是我们部署的静态页面资源，hexo分支是我们生成静态页面的工具（框架）</p>]]></content>
      
      
      <categories>
          
          <category> Hexo+Gitee </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人博客 </tag>
            
            <tag> Hexo </tag>
            
            <tag> Gitee Pages </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Hexo+Gitee免费搭建个人博客（一）</title>
      <link href="/articles/20211122e8318972bf07.html"/>
      <url>/articles/20211122e8318972bf07.html</url>
      
        <content type="html"><![CDATA[<p>前段时间使用有道云笔记来总结笔记的时候，发现有道云笔记使用qq无法登录，这个问题发生了几次，但是一直没得到解决。这时想到可以搭建一个属于自己的博客，来记录一些容易遗忘又非常重要的技术问题。但是对于个人而言，为了搭建个人博客去申请主机和域名，是不划算的。所以才有了使用<a href="https://hexo.io/zh-cn/">hexo</a>和<a href="https://gitee.com/help/articles/4136#article-header0">gitee pages</a>服务来搭建免费的个人博客。<br><span id="more"></span><br>下面记录一下搭建过程：</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h3><h4 id="1、下载nodeJs"><a href="#1、下载nodeJs" class="headerlink" title="1、下载nodeJs"></a>1、下载nodeJs</h4><p>官网下载：<a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a><br>下载最新版以后一路 Next 安装即可<br>安装完成后，Win+R 运行 cmd，输入以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p>如果出现版本号，就表示安装成功了</p><p><img src="https://pic.wjnba.top/img/IxMgXD.png" alt="图片"></p><h4 id="2、Git"><a href="#2、Git" class="headerlink" title="2、Git"></a>2、Git</h4><p>官网下载：<a href="https://git-scm.com/">https://git-scm.com/</a><br>同样，安装完成后，Win+R 运行 cmd，输入以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><p>出现版本号证明安装成功</p><p><img src="https://pic.wjnba.top/img/IxQVE9.png" alt="图片"></p><p>安装完成以后注册git账号，创建git仓库，<strong>注意仓库名字要和你的账号名一样</strong>，例如我的用户名是 wjnba，我新建的仓库名称和地址都是wjnba，如下：</p><p><img src="https://pic.wjnba.top/img/IxtLut.png" alt="图片"></p><p>这是我创建好了的</p><h5 id="至此，准备工作完成，后面将正式进入博客的搭建"><a href="#至此，准备工作完成，后面将正式进入博客的搭建" class="headerlink" title="至此，准备工作完成，后面将正式进入博客的搭建"></a>至此，准备工作完成，后面将正式进入博客的搭建</h5>]]></content>
      
      
      <categories>
          
          <category> Hexo+Gitee </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人博客 </tag>
            
            <tag> Hexo </tag>
            
            <tag> Gitee Pages </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css居中的几种方式</title>
      <link href="/articles/20211119cb59809120da.html"/>
      <url>/articles/20211119cb59809120da.html</url>
      
        <content type="html"><![CDATA[<h2 id="css居中的几种方式"><a href="#css居中的几种方式" class="headerlink" title="css居中的几种方式"></a>css居中的几种方式</h2><p>居中分水平和垂直两种，使用的频度也算是很高，下面分情况来讨论一下几种常用的实现方式。<br><span id="more"></span></p><h3 id="1-margin"><a href="#1-margin" class="headerlink" title="1.margin"></a>1.margin</h3><p>这种方式只能实现固定宽度的块级元素水平居中，如果该元素没有设置宽度或者不是块级元素，则不会生效。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*以div元素为例*/</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto; <span class="comment">/*或者margin: 0 auto;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-line-height"><a href="#2-line-height" class="headerlink" title="2.line-height"></a>2.line-height</h3><p>将单行文字<code>line-height</code>值设置为其父元素高度可以实现该行文字的垂直居中，局限也很明显。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> id=&#x27;container&#x27;&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span> id=&#x27;<span class="attribute">content</span>&#x27;&gt;文字内容&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#container</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#content</span>&#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-表格"><a href="#3-表格" class="headerlink" title="3.表格"></a>3.表格</h3><p>如果你使用表格的话，那么可以利用<code>td</code>元素的<code>align:center</code>和<code>valign:middle</code>属性轻易的做到水平和垂直居中，但是考虑到现在表格布局的使用频率已经很低了，实用性其实并不强。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&#x27;200px&#x27;</span> <span class="attr">height</span>=<span class="string">&#x27;200px&#x27;</span> <span class="attr">align</span>=<span class="string">&#x27;center&#x27;</span> <span class="attr">valign</span>=<span class="string">&#x27;middle&#x27;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 子元素 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-display-table-cell"><a href="#4-display-table-cell" class="headerlink" title="4.display: table-cell"></a>4.display: table-cell</h3><p>由于单元格可以轻易的实现水平和垂直居中，所以可以把父元素容器模拟成单元格元素，通过样式<code>text-align:center</code>以及<code>vertical-align:middle</code>来达到一样的效果。但是要注意的是<code>text-align:center</code>只能使非块级子元素水平居中而对块级子元素无效。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> id=&quot;<span class="selector-tag">table</span>-cel&quot;&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span>&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#table</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-绝对定位居中"><a href="#5-绝对定位居中" class="headerlink" title="5.绝对定位居中"></a>5.绝对定位居中</h3><p>这个方法使用的相对也较多，但是需要子元素有固定的宽高，不多说直接上代码。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span>&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span>&gt;<span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="comment">/*此时的元素并不是居中的，向右偏了一半的宽度，向下偏了一半的高度*/</span></span><br><span class="line">    <span class="comment">/*所以要使用margin把元素拉回来*/</span></span><br><span class="line">    <span class="attribute">margin</span>: -<span class="number">50px</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">50px</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-translate-50-50"><a href="#6-translate-50-50" class="headerlink" title="6.translate(-50%, -50%)"></a>6.translate(-50%, -50%)</h3><p>这个方法比较厉害了，其实可以算是前面绝对定位方法的改良版。之前的方法只能使固定宽高的元素居中，但是使用<code>transform: translate(-50%, -50%);</code>可以使不固定高宽的元素达到居中的效果。因为<code>translate</code>属性的百分比值是根据它本身而非父元素，下面看代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> id=&quot;father&quot;&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> id=&quot;child&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#father</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#child</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>);</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 深入浅出css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 居中 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中使用xlsx导出excel表格和把导入的excel表处理成json数据</title>
      <link href="/articles/20211115a66f41ec2ccb.html"/>
      <url>/articles/20211115a66f41ec2ccb.html</url>
      
        <content type="html"><![CDATA[<h2 id="Vue中使用xlsx导出excel表格和把导入的excel表处理成json数据"><a href="#Vue中使用xlsx导出excel表格和把导入的excel表处理成json数据" class="headerlink" title="Vue中使用xlsx导出excel表格和把导入的excel表处理成json数据"></a>Vue中使用xlsx导出excel表格和把导入的excel表处理成json数据</h2><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install xlsx -S</span><br></pre></td></tr></table></figure><h3 id="一、通过dom元素导出excel表格"><a href="#一、通过dom元素导出excel表格" class="headerlink" title="一、通过dom元素导出excel表格"></a>一、通过dom元素导出excel表格</h3><h4 id="创建公共方法"><a href="#创建公共方法" class="headerlink" title="创建公共方法"></a>创建公共方法</h4><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> XLSX <span class="keyword">from</span> <span class="string">&#x27;xlsx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 该方法用于通过dom导出表格</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>el dom元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>excelName 表格名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;any&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">exportExcel</span>(<span class="params">el, excelName</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/* 从表生成工作簿对象 */</span></span><br><span class="line">  <span class="keyword">const</span> wb = XLSX.utils.table_to_book(el);</span><br><span class="line">  <span class="comment">/* 获取二进制字符串作为输出 */</span></span><br><span class="line">  <span class="keyword">const</span> wbout = XLSX.write(wb, &#123;</span><br><span class="line">    <span class="attr">bookType</span>: <span class="string">&#x27;xlsx&#x27;</span>,</span><br><span class="line">    <span class="attr">bookSST</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;array&#x27;</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    FileSaver.saveAs(</span><br><span class="line">      <span class="comment">// Blob 对象表示一个不可变、原始数据的类文件对象。</span></span><br><span class="line">      <span class="comment">// Blob 表示的不一定是JavaScript原生格式的数据。</span></span><br><span class="line">      <span class="comment">// File 接口基于Blob，继承了 blob 的功能并将其扩展使其支持用户系统上的文件。</span></span><br><span class="line">      <span class="comment">// 返回一个新创建的 Blob 对象，其内容由参数中给定的数组串联组成。</span></span><br><span class="line">      <span class="keyword">new</span> Blob([wbout], &#123; <span class="attr">type</span>: <span class="string">&#x27;application/octet-stream&#x27;</span> &#125;),</span><br><span class="line">      <span class="comment">// 设置导出文件名称</span></span><br><span class="line">      <span class="string">`<span class="subst">$&#123;excelName&#125;</span>.xlsx`</span></span><br><span class="line">    );</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">console</span> !== <span class="string">&#x27;undefined&#x27;</span>) <span class="built_in">console</span>.log(e, wbout);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> wbout;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、把从后台获取到的数据后直接导出为excel表格"><a href="#二、把从后台获取到的数据后直接导出为excel表格" class="headerlink" title="二、把从后台获取到的数据后直接导出为excel表格"></a>二、把从后台获取到的数据后直接导出为excel表格</h3><h4 id="创建公共方法-1"><a href="#创建公共方法-1" class="headerlink" title="创建公共方法"></a>创建公共方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> XLSX <span class="keyword">from</span> <span class="string">&#x27;xlsx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">autoWidthFunc</span>(<span class="params">ws, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> colWidth = data.map(<span class="function"><span class="params">row</span> =&gt;</span> row.map(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (val == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">wch</span>: <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val.toString().charCodeAt(<span class="number">0</span>) &gt; <span class="number">255</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">wch</span>: val.toString().length * <span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">wch</span>: val.toString().length</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;))</span><br><span class="line">    <span class="keyword">const</span> result = colWidth[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; colWidth.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; colWidth[i].length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (result[j].wch &lt; colWidth[i][j].wch) &#123;</span><br><span class="line">                result[j].wch = colWidth[i][j].wch</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置表格样式，!cols为列宽</span></span><br><span class="line">    ws[<span class="string">&#x27;!cols&#x27;</span>] = result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonToArray</span>(<span class="params">key, jsonData</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> jsonData.map(<span class="function"><span class="params">v</span> =&gt;</span> key.map(<span class="function"><span class="params">j</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> v[j]</span><br><span class="line">    &#125;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建并导出excel</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>key 数据中对象的键名 [&#x27;id&#x27;, &#x27;title&#x27;, &#x27;desc&#x27;]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>data 导出的数据源 [&#123;id:&#x27;1&#x27;,title:&#x27;&#x27;,desc:&#x27;&#x27;&#125;]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>title 表头 [&#x27;id&#x27;,&#x27;标题&#x27;,&#x27;描述&#x27;]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>fileName 文件名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>autoWidth 是否自适应文件宽度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>columnsWidth 自定义宽度（选填） 当autoWidth为false或者undefined时使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">exportArrayToExcel</span>(<span class="params">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    key,</span></span></span><br><span class="line"><span class="params"><span class="function">    data,</span></span></span><br><span class="line"><span class="params"><span class="function">    title,</span></span></span><br><span class="line"><span class="params"><span class="function">    fileName,</span></span></span><br><span class="line"><span class="params"><span class="function">    autoWidth,</span></span></span><br><span class="line"><span class="params"><span class="function">    columnsWidth</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 新建一个工作簿</span></span><br><span class="line">    <span class="keyword">const</span> wb = XLSX.utils.book_new()</span><br><span class="line">    <span class="keyword">const</span> arr = jsonToArray(key, data)</span><br><span class="line">    arr.unshift(title)</span><br><span class="line">    <span class="comment">// 制作工作表 将一组 JS 数据数组转换为工作表</span></span><br><span class="line">    <span class="keyword">const</span> ws = XLSX.utils.aoa_to_sheet(arr)</span><br><span class="line">    <span class="keyword">if</span> (autoWidth) &#123;</span><br><span class="line">        <span class="comment">// 处理表格列宽</span></span><br><span class="line">        autoWidthFunc(ws, arr)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (columnsWidth) &#123;</span><br><span class="line">        ws[<span class="string">&#x27;!cols&#x27;</span>] = columnsWidth</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 将工作表添加到工作簿 */</span></span><br><span class="line">    XLSX.utils.book_append_sheet(wb, ws, fileName)</span><br><span class="line">    <span class="comment">/* 输出工作表， 由文件名决定的输出格式 */</span></span><br><span class="line">    XLSX.writeFile(wb, <span class="string">`<span class="subst">$&#123;fileName&#125;</span>.xlsx`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="vue页面中使用"><a href="#vue页面中使用" class="headerlink" title="vue页面中使用"></a>vue页面中使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    exportArrayToExcel</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;@/assets/js/exportExcel&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">dataList</span>: [] <span class="comment">//请求的数据放到这里</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="comment">// 页面上有个按钮 点击调用本方法，不赘述</span></span><br><span class="line">        <span class="function"><span class="title">exportExcel</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> params = &#123;</span><br><span class="line">                <span class="comment">// dataList中的字段 title,key 需要一一对应</span></span><br><span class="line">                <span class="attr">title</span>: [<span class="string">&#x27;订单号&#x27;</span>, <span class="string">&#x27;订单来源&#x27;</span>, <span class="string">&#x27;车牌号&#x27;</span>],</span><br><span class="line">                <span class="attr">key</span>: [<span class="string">&#x27;app_id&#x27;</span>, <span class="string">&#x27;app_source&#x27;</span>, <span class="string">&#x27;cars&#x27;</span>],</span><br><span class="line">                <span class="attr">data</span>: <span class="built_in">this</span>.dataList, <span class="comment">// 数据源</span></span><br><span class="line">                <span class="attr">autoWidth</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="comment">// 时间戳函数自己定义formatDate</span></span><br><span class="line">                <span class="attr">filename</span>: <span class="string">&#x27;清单&#x27;</span> + formatDate(<span class="keyword">new</span> <span class="built_in">Date</span>(), <span class="string">&#x27;yyyyMMddhhmmss&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            exportArrayToExcel(params)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、把导入的excel表处理成json数据"><a href="#三、把导入的excel表处理成json数据" class="headerlink" title="三、把导入的excel表处理成json数据"></a>三、把导入的excel表处理成json数据</h3><h4 id="创建公共方法-2"><a href="#创建公共方法-2" class="headerlink" title="创建公共方法"></a>创建公共方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> XLSX <span class="keyword">from</span> <span class="string">&#x27;xlsx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 把excel中的数据转换为json数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>file 文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>keys 对应的键值 从左到右依次对应</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>startIndex 数据开始的位置，默认为1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">exportExcelToJson</span>(<span class="params">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    file,</span></span></span><br><span class="line"><span class="params"><span class="function">    keys,</span></span></span><br><span class="line"><span class="params"><span class="function">    startIndex = <span class="number">1</span></span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> reader = <span class="keyword">new</span> FileReader()</span><br><span class="line">    reader.onload = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(event)</span><br><span class="line">        <span class="keyword">const</span> data = event.target.result</span><br><span class="line">        <span class="keyword">const</span> workbook = XLSX.read(data, &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;binary&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">const</span> resultArray = []</span><br><span class="line">        workbook.SheetNames.forEach(<span class="function">(<span class="params">sheetName</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> data = XLSX.utils.sheet_to_json(workbook.Sheets[sheetName], &#123;</span><br><span class="line">                <span class="attr">header</span>: <span class="number">1</span></span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">const</span> mainData = data.slice(startIndex)</span><br><span class="line">            <span class="keyword">if</span> (mainData.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!keys) &#123;</span><br><span class="line">                    keys = data[<span class="number">0</span>]</span><br><span class="line">                &#125;</span><br><span class="line">                mainData.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">const</span> rowData = &#123;&#125;</span><br><span class="line">                    keys.forEach(<span class="function">(<span class="params">key, keyIndex</span>) =&gt;</span> &#123;</span><br><span class="line">                        rowData[key] = item[keyIndex] || <span class="string">&#x27;&#x27;</span></span><br><span class="line">                    &#125;)</span><br><span class="line">                    resultArray.push(rowData)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;resultArray&#x27;</span>, resultArray)</span><br><span class="line">    &#125;</span><br><span class="line">    reader.readAsBinaryString(file)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="vue中调用"><a href="#vue中调用" class="headerlink" title="vue中调用"></a>vue中调用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;this.value=null&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;uploadFile&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; exportExcelToJson &#125; <span class="keyword">from</span> <span class="string">&quot;@/assets/js/exportExcel&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="comment">// 页面上有个按钮 点击调用本方法，不赘述</span></span><br><span class="line">        excelToJson () &#123;</span><br><span class="line">            <span class="keyword">const</span> that = <span class="built_in">this</span></span><br><span class="line">            <span class="keyword">const</span> file = that.$refs.uploadFile.files[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">const</span> keys = [<span class="string">&#x27;app_id&#x27;</span>, <span class="string">&#x27;app_source&#x27;</span>, <span class="string">&#x27;cars&#x27;</span>]</span><br><span class="line">            exportExcelToJson(&#123;</span><br><span class="line">                file,</span><br><span class="line">                keys,</span><br><span class="line">                <span class="attr">startIndex</span>:<span class="number">1</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> vue </tag>
            
            <tag> excel </tag>
            
            <tag> xlsx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>扁平数据树形化</title>
      <link href="/articles/202111126770eb352d18.html"/>
      <url>/articles/202111126770eb352d18.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @description 扁平数据树形化</span><br><span class="line"> * @param dataList 原数组</span><br><span class="line"> * @param options （keyId：id值，childrenName：子节点数组名，parentId：父id）</span><br><span class="line"> * @param fixListItem 做其他操作</span><br><span class="line"> * @returns &#123;[]&#125;</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">arrayToTree</span>(<span class="params">dataList, options, fixListItem</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.time(<span class="string">&#x27;时间是：&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> &#123; keyId, childrenName, parentKeyId &#125; = options<span class="comment">// 解构赋值</span></span><br><span class="line">  <span class="keyword">const</span> tree = []</span><br><span class="line">  <span class="keyword">const</span> record = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = dataList.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> dataItem = dataList[i]</span><br><span class="line">    <span class="keyword">if</span> (!valueIsBlank(fixListItem)) &#123;</span><br><span class="line">      fixListItem(dataItem)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> id = dataItem[keyId]</span><br><span class="line">    <span class="keyword">if</span> (!id) &#123;</span><br><span class="line">      <span class="keyword">continue</span><span class="comment">// 中断循环中的迭代，如果出现了指定的条件，然后继续循环中的下一个迭代。</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (record[id]) &#123;</span><br><span class="line">      dataItem[childrenName] = record[id]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      dataItem[childrenName] = record[id] = []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dataItem[parentKeyId]) &#123;</span><br><span class="line">      <span class="keyword">const</span> parentId = dataItem[parentKeyId]</span><br><span class="line">      <span class="keyword">if</span> (!record[parentId]) &#123;</span><br><span class="line">        record[parentId] = []</span><br><span class="line">      &#125;</span><br><span class="line">      record[parentId].push(dataItem)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      tree.push(dataItem)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.timeEnd(<span class="string">&#x27;时间是：&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> tree</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 深入浅出js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
